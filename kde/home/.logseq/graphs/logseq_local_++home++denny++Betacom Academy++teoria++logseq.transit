["~#datascript/DB",["^ ","~:schema",["^ ","~:ast/version",["^ "],"~:file/content",["^ "],"~:block/properties-text-values",["^ "],"~:block/alias",["^ ","~:db/valueType","~:db.type/ref","~:db/cardinality","~:db.cardinality/many"],"~:block/pre-block?",["^ "],"~:block/uuid",["^ ","~:db/unique","~:db.unique/identity"],"~:block/priority",["^ "],"~:block/properties",["^ "],"~:block/journal?",["^ "],"~:block/namespace",["^ ","^6","^7"],"~:block/updated-at",["^ "],"~:block/repeated?",["^ "],"~:db/type",["^ "],"~:file/handle",["^ "],"~:block/left",["^ ","^6","^7","~:db/index",true],"~:block/refs",["^ ","^6","^7","^8","^9"],"~:block/scheduled",["^ "],"~:block/properties-order",["^ "],"~:block/created-at",["^ "],"~:block/deadline",["^ "],"~:block/collapsed?",["^ ","^G",true],"~:block/journal-day",["^ "],"~:block/format",["^ "],"~:block/tags",["^ ","^6","^7","^8","^9"],"~:block/content",["^ "],"~:recent/pages",["^ "],"~:block/macros",["^ ","^6","^7","^8","^9"],"~:db/ident",["^ ","^<","^="],"~:block/path-refs",["^ ","^6","^7","^8","^9"],"~:block/parent",["^ ","^6","^7","^G",true],"~:block/type",["^ "],"~:block/page",["^ ","^6","^7","^G",true],"~:block/name",["^ ","^<","^="],"~:file/path",["^ ","^<","^="],"~:block/file",["^ ","^6","^7"],"~:block/marker",["^ "],"~:block/original-name",["^ ","^<","^="],"~:schema/version",["^ "]],"~:datoms",["~#list",[["~#datascript/Datom",[1,"^12",2,536870913]],["^15",[2,"^@",false,536870914]],["^15",[2,"^Y","card",536870913]],["^15",[2,"^11","card",536870913]],["^15",[2,"^;","~u3516c000-dd65-4c34-b5c5-8bb2f65d4925",536870921]],["^15",[3,"^@",false,536870914]],["^15",[3,"^Y","canceled",536870914]],["^15",[3,"^11","CANCELED",536870914]],["^15",[3,"^;","~u0e5465b7-4800-4bf6-a79d-4c055db680d3",536870921]],["^15",[4,"^@",false,536870914]],["^15",[4,"^Y","todo",536870914]],["^15",[4,"^11","TODO",536870914]],["^15",[4,"^;","~u09feaea5-26f6-406f-8921-e3d55386dccf",536870921]],["^15",[5,"^@",false,536870914]],["^15",[5,"^Y","now",536870914]],["^15",[5,"^11","NOW",536870914]],["^15",[5,"^;","~u135060c1-00b3-44d1-b9a2-8682f99e502f",536870921]],["^15",[6,"^@",false,536870914]],["^15",[6,"^Y","later",536870914]],["^15",[6,"^11","LATER",536870914]],["^15",[6,"^;","~u3e4af143-2ccc-40cf-8135-ee33041bd54f",536870921]],["^15",[7,"^@",false,536870914]],["^15",[7,"^Y","done",536870914]],["^15",[7,"^11","DONE",536870914]],["^15",[7,"^;","~u64d6fe37-09d5-407e-b10f-e084a3392a89",536870921]],["^15",[8,"^@",false,536870914]],["^15",[8,"^Y","doing",536870914]],["^15",[8,"^11","DOING",536870914]],["^15",[8,"^;","~ue3d20524-6972-4654-b126-f4ed108c0fb6",536870921]],["^15",[9,"^@",false,536870914]],["^15",[9,"^Y","in-progress",536870914]],["^15",[9,"^11","IN-PROGRESS",536870914]],["^15",[9,"^;","~u7e7c0838-be57-4c5b-8955-a83b8f08474f",536870921]],["^15",[10,"^@",false,536870914]],["^15",[10,"^Y","c",536870914]],["^15",[10,"^11","C",536870914]],["^15",[10,"^;","~u7205a687-90fc-427d-86a3-2dc1901fcb8f",536870921]],["^15",[11,"^@",false,536870914]],["^15",[11,"^Y","b",536870914]],["^15",[11,"^11","B",536870914]],["^15",[11,"^;","~ue5705808-fb28-42b0-b545-b465eca04c4a",536870921]],["^15",[12,"^[",22,536870919]],["^15",[12,"^@",false,536870914]],["^15",[12,"^Y","contents",536870914]],["^15",[12,"^11","Contents",536870914]],["^15",[12,"^;","~ue27cd0d0-6b2c-4504-8e29-a01c938a8855",536870921]],["^15",[13,"^@",false,536870914]],["^15",[13,"^Y","waiting",536870914]],["^15",[13,"^11","WAITING",536870914]],["^15",[13,"^;","~ua5c193dc-4b4a-4b09-af28-4468c661dfd2",536870921]],["^15",[14,"^@",false,536870914]],["^15",[14,"^Y","favorites",536870914]],["^15",[14,"^11","Favorites",536870914]],["^15",[14,"^;","~u4e64fc3c-c812-4863-aed3-5ad603d130f6",536870921]],["^15",[15,"^@",false,536870914]],["^15",[15,"^Y","a",536870914]],["^15",[15,"^11","A",536870914]],["^15",[15,"^;","~u63a4692d-3c2a-47ba-8d02-42b30fd82f49",536870921]],["^15",[16,"^@",false,536870914]],["^15",[16,"^Y","cancelled",536870914]],["^15",[16,"^11","CANCELLED",536870914]],["^15",[16,"^;","~u9f9f081e-77a6-4715-998c-475ae13f784f",536870921]],["^15",[17,"^@",false,536870914]],["^15",[17,"^Y","wait",536870914]],["^15",[17,"^11","WAIT",536870914]],["^15",[17,"^;","~u2cf30b31-0c4a-451d-879b-13e8f3c6f174",536870921]],["^15",[18,"^K",1698762105586,536870915]],["^15",[18,"^O","~:markdown",536870915]],["^15",[18,"^N",20231031,536870915]],["^15",[18,"^@",true,536870915]],["^15",[18,"^Y","oct 31st, 2023",536870915]],["^15",[18,"^11","Oct 31st, 2023",536870915]],["^15",[18,"^B",1698762105586,536870915]],["^15",[18,"^;","~u65410d79-536b-46c8-ad7d-203add8f2762",536870915]],["^15",[19,"^Q","",536870916]],["^15",[19,"^O","^16",536870916]],["^15",[19,"^N",20231031,536870916]],["^15",[19,"^@",true,536870916]],["^15",[19,"^F",18,536870916]],["^15",[19,"^X",18,536870916]],["^15",[19,"^V",18,536870916]],["^15",[19,"^U",18,536870917]],["^15",[19,"^?",["^ "],536870916]],["^15",[19,"^;","~u65410d79-df06-4993-936e-8e2113374102",536870916]],["^15",[20,"^3","",536870918]],["^15",[20,"~:file/created-at",1698762105723,536870919]],["^15",[20,"^Z","logseq/custom.css",536870918]],["^15",[21,"^3","{:meta/version 1\n\n ;; Set the preferred format.\n ;; Available options:\n ;; - Markdown (default)\n ;; - Org\n ;; :preferred-format \"Markdown\"\n\n ;; Set the preferred workflow style.\n ;; Available options:\n ;; - :now for NOW/LATER style (default)\n ;; - :todo for TODO/DOING style\n :preferred-workflow :now\n\n ;; Exclude directories/files.\n ;; Example usage:\n ;; :hidden [\"/archived\" \"/test.md\" \"../assets/archived\"]\n :hidden []\n\n ;; Define the default journal page template.\n ;; Enter the template name between the quotes.\n :default-templates\n {:journals \"\"}\n\n ;; Set a custom date format for the journal page title.\n ;; Default value: \"MMM do, yyyy\"\n ;; e.g., \"Jan 19th, 2038\"\n ;; Example usage e.g., \"Tue 19th, Jan 2038\"\n ;; :journal/page-title-format \"EEE do, MMM yyyy\"\n\n ;; Specify the journal filename format using a valid date format string.\n ;; !Warning:\n ;;   This configuration is not retroactive and affects only new journals.\n ;;   To show old journal files in the app, manually rename the files in the\n ;;   journal directory to match the new format.\n ;; Default value: \"yyyy_MM_dd\"\n ;; :journal/file-name-format \"yyyy_MM_dd\"\n\n ;; Enable tooltip preview on hover.\n ;; Default value: true\n :ui/enable-tooltip? true\n\n ;; Display brackets [[]] around page references.\n ;; Default value: true\n ;; :ui/show-brackets? true\n\n ;; Display all lines of a block when referencing ((block)).\n ;; Default value: false\n :ui/show-full-blocks? false\n\n ;; Automatically expand block references when zooming in.\n ;; Default value: true\n :ui/auto-expand-block-refs? true\n\n ;; Enable Block timestamps.\n ;; Default value: false\n :feature/enable-block-timestamps? false\n\n ;; Disable accent marks when searching.\n ;; After changing this setting, rebuild the search index by pressing (^C ^S).\n ;; Default value: true\n :feature/enable-search-remove-accents? true\n\n ;; Enable journals.\n ;; Default value: true\n ;; :feature/enable-journals? true\n\n ;; Enable flashcards.\n ;; Default value: true\n ;; :feature/enable-flashcards? true\n\n ;; Enable whiteboards.\n ;; Default value: true\n ;; :feature/enable-whiteboards? true\n\n ;; Disable the journal's built-in 'Scheduled tasks and deadlines' query.\n ;; Default value: false\n ;; :feature/disable-scheduled-and-deadline-query? false\n\n ;; Specify the number of days displayed in the future for\n ;; the 'scheduled tasks and deadlines' query.\n ;; Example usage:\n ;; Display all scheduled and deadline blocks for the next 14 days:\n ;; :scheduled/future-days 14\n ;; Default value: 7\n ;; :scheduled/future-days 7\n\n ;; Specify the first day of the week.\n ;; Available options:\n ;;  - integer from 0 to 6 (Monday to Sunday)\n ;; Default value: 6 (Sunday)\n :start-of-week 6\n\n ;; Specify a custom CSS import.\n ;; This option takes precedence over the local `logseq/custom.css` file.\n ;; Example usage:\n ;; :custom-css-url \"@import url('https://cdn.jsdelivr.net/gh/dracula/logseq@master/custom.css');\"\n\n ;; Specify a custom JS import.\n ;; This option takes precedence over the local `logseq/custom.js` file.\n ;; Example usage:\n ;; :custom-js-url \"https://cdn.logseq.com/custom.js\"\n\n ;; Set a custom Arweave gateway\n ;; Default gateway: https://arweave.net\n ;; :arweave/gateway \"https://arweave.net\"\n\n ;; Set bullet indentation when exporting\n ;; Available options:\n ;;  - `:eight-spaces` as eight spaces\n ;;  - `:four-spaces` as four spaces\n ;;  - `:two-spaces` as two spaces\n ;;  - `:tab` as a tab character (default)\n ;; :export/bullet-indentation :tab\n\n ;; Publish all pages within the Graph\n ;; Regardless of whether individual pages have been marked as public.\n ;; Default value: false\n ;; :publishing/all-pages-public? false\n\n ;; Define the default home page and sidebar status.\n ;; If unspecified, the journal page will be loaded on startup and the right sidebar will stay hidden.\n ;; The `:page` value represents the name of the page displayed at startup.\n ;; Available options for `:sidebar` are:\n ;; - \"Contents\" to display the Contents page in the right sidebar.\n ;; - A specific page name to display in the right sidebar.\n ;; - An array of multiple pages, e.g., [\"Contents\" \"Page A\" \"Page B\"].\n ;; If `:sidebar` remains unset, the right sidebar will stay hidden.\n ;; Examples:\n ;; 1. Set \"Changelog\" as the home page and display \"Contents\" in the right sidebar:\n ;; :default-home {:page \"Changelog\", :sidebar \"Contents\"}\n ;; 2. Set \"Jun 3rd, 2021\" as the home page without the right sidebar:\n ;; :default-home {:page \"Jun 3rd, 2021\"}\n ;; 3. Set \"home\" as the home page and display multiple pages in the right sidebar:\n ;; :default-home {:page \"home\", :sidebar [\"Page A\" \"Page B\"]}\n\n ;; Set the default location for storing notes.\n ;; Default value: \"pages\"\n ;; :pages-directory \"pages\"\n\n ;; Set the default location for storing journals.\n ;; Default value: \"journals\"\n ;; :journals-directory \"journals\"\n\n ;; Set the default location for storing whiteboards.\n ;; Default value: \"whiteboards\"\n ;; :whiteboards-directory \"whiteboards\"\n\n ;; Enabling this option converts\n ;; [[Grant Ideas]] to [[file:./grant_ideas.org][Grant Ideas]] for org-mode.\n ;; For more information, visit https://github.com/logseq/logseq/issues/672\n ;; :org-mode/insert-file-link? false\n\n ;; Configure custom shortcuts.\n ;; Syntax:\n ;; 1. + indicates simultaneous key presses, e.g., `Ctrl+Shift+a`.\n ;; 2. A space between keys represents key chords, e.g., `t s` means\n ;;    pressing `t` followed by `s`.\n ;; 3. mod refers to `Ctrl` for Windows/Linux and `Command` for Mac.\n ;; 4. Use false to disable a specific shortcut.\n ;; 5. You can define multiple bindings for a single action, e.g., [\"ctrl+j\" \"down\"].\n ;; The full list of configurable shortcuts is available at:\n ;; https://github.com/logseq/logseq/blob/master/src/main/frontend/modules/shortcut/config.cljs\n ;; Example:\n ;; :shortcuts\n ;; {:editor/new-block       \"enter\"\n ;;  :editor/new-line        \"shift+enter\"\n ;;  :editor/insert-link     \"mod+shift+k\"\n ;;  :editor/highlight       false\n ;;  :ui/toggle-settings     \"t s\"\n ;;  :editor/up              [\"ctrl+k\" \"up\"]\n ;;  :editor/down            [\"ctrl+j\" \"down\"]\n ;;  :editor/left            [\"ctrl+h\" \"left\"]\n ;;  :editor/right           [\"ctrl+l\" \"right\"]}\n :shortcuts {}\n\n ;; Configure the behavior of pressing Enter in document mode.\n ;; if set to true, pressing Enter will create a new block.\n ;; Default value: false\n :shortcut/doc-mode-enter-for-new-block? false\n\n ;; Block content larger than `block/content-max-length` will not be searchable\n ;; or editable for performance.\n ;; Default value: 10000\n :block/content-max-length 10000\n\n ;; Display command documentation on hover.\n ;; Default value: true\n :ui/show-command-doc? true\n\n ;; Display empty bullet points.\n ;; Default value: false\n :ui/show-empty-bullets? false\n\n ;; Pre-defined :view function to use with advanced queries.\n :query/views\n {:pprint\n  (fn [r] [:pre.code (pprint r)])}\n\n ;; Advanced queries `:result-transform` function.\n ;; Transform the query result before displaying it.\n :query/result-transforms\n {:sort-by-priority\n  (fn [result] (sort-by (fn [h] (get h :block/priority \"Z\")) result))}\n\n ;; The following queries will be displayed at the bottom of today's journal page.\n ;; The \"NOW\" query returns tasks with \"NOW\" or \"DOING\" status.\n ;; The \"NEXT\" query returns tasks with \"NOW\", \"LATER\", or \"TODO\" status.\n :default-queries\n {:journals\n  [{:title \"🔨 NOW\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?today\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"DOING\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(>= ?d ?start)]\n            [(<= ?d ?today)]]\n    :inputs [:14d :today]\n    :result-transform (fn [result]\n                        (sort-by (fn [h]\n                                   (get h :block/priority \"Z\")) result))\n    :group-by-page? false\n    :collapsed? false}\n   {:title \"📅 NEXT\"\n    :query [:find (pull ?h [*])\n            :in $ ?start ?next\n            :where\n            [?h :block/marker ?marker]\n            [(contains? #{\"NOW\" \"LATER\" \"TODO\"} ?marker)]\n            [?h :block/page ?p]\n            [?p :block/journal? true]\n            [?p :block/journal-day ?d]\n            [(> ?d ?start)]\n            [(< ?d ?next)]]\n    :inputs [:today :7d-after]\n    :group-by-page? false\n    :collapsed? false}]}\n\n ;; Add custom commands to the command palette\n ;; Example usage:\n ;; :commands\n ;; [\n ;;  [\"js\" \"Javascript\"]\n ;;  [\"md\" \"Markdown\"]\n ;;  ]\n :commands []\n\n ;; Enable collapsing blocks with titles but no children.\n ;; By default, only blocks with children can be collapsed.\n ;; Setting `:outliner/block-title-collapse-enabled?` to true allows collapsing\n ;; blocks with titles (multiple lines) and content. For example:\n ;; - block title\n ;;   block content\n ;; Default value: false\n :outliner/block-title-collapse-enabled? false\n\n ;; Macros replace texts and will make you more productive.\n ;; Example usage:\n ;; Change the :macros value below to:\n ;; {\"poem\" \"Rose is $1, violet's $2. Life's ordered: Org assists you.\"}\n ;; input \"{{poem red,blue}}\"\n ;; becomes\n ;; Rose is red, violet's blue. Life's ordered: Org assists you.\n :macros {}\n\n ;; Configure the default expansion level for linked references.\n ;; For example, consider the following block hierarchy:\n ;; - a [[page]] (level 1)\n ;;   - b        (level 2)\n ;;     - c      (level 3)\n ;;       - d    (level 4)\n ;;\n ;; With the default value of level 2, block b will be collapsed.\n ;; If the level's value is set to 3, block c will be collapsed.\n ;; Default value: 2\n :ref/default-open-blocks-level 2\n\n ;; Configure the threshold for linked references before collapsing.\n ;; Default value: 100\n :ref/linked-references-collapsed-threshold 50\n\n ;; Graph view configuration.\n ;; Example usage:\n ;; :graph/settings\n ;; {:orphan-pages?   true   ; Default value: true\n ;;  :builtin-pages?  false  ; Default value: false\n ;;  :excluded-pages? false  ; Default value: false\n ;;  :journal?        false} ; Default value: false\n\n ;; Favorites to list on the left sidebar\n :favorites [\"betacom academy\"]\n\n ;; Set flashcards interval.\n ;; Expected value:\n ;; - Float between 0 and 1\n ;; higher values result in faster changes to the next review interval.\n ;; Default value: 0.5\n ;; :srs/learning-fraction 0.5\n\n ;; Set the initial interval after the first successful review of a card.\n ;; Default value: 4\n ;; :srs/initial-interval 4\n\n ;; Hide specific block properties.\n ;; Example usage:\n ;; :block-hidden-properties #{:public :icon}\n\n ;; Create a page for all properties.\n ;; Default value: true\n :property-pages/enabled? true\n\n ;; Properties to exclude from having property pages\n ;; Example usage:\n ;; :property-pages/excludelist #{:duration :author}\n\n ;; By default, property value separated by commas will not be treated as\n ;; page references. You can add properties to enable it.\n ;; Example usage:\n ;; :property/separated-by-commas #{:alias :tags}\n\n ;; Properties that are ignored when parsing property values for references\n ;; Example usage:\n ;; :ignored-page-references-keywords #{:author :website}\n\n ;; logbook configuration.\n ;; :logbook/settings\n ;; {:with-second-support? false ;limit logbook to minutes, seconds will be eliminated\n ;;  :enabled-in-all-blocks true ;display logbook in all blocks after timetracking\n ;;  :enabled-in-timestamped-blocks false ;don't display logbook at all\n ;; }\n\n ;; Mobile photo upload configuration.\n ;; :mobile/photo\n ;; {:allow-editing? true\n ;;  :quality        80}\n\n ;; Mobile features options\n ;; Gestures\n ;; Example usage:\n ;; :mobile\n ;; {:gestures/disabled-in-block-with-tags [\"kanban\"]}\n\n ;; Extra CodeMirror options\n ;; See https://codemirror.net/5/doc/manual.html#config for possible options\n ;; Example usage:\n ;; :editor/extra-codemirror-options\n ;; {:lineWrapping  false  ; Default value: false\n ;;  :lineNumbers   true   ; Default value: true\n ;;  :readOnly      false} ; Default value: false\n\n ;; Enable logical outdenting\n ;; Default value: false\n ;; :editor/logical-outdenting? false\n\n ;; Prefer pasting the file when text and a file are in the clipboard.\n ;; Default value: false\n ;; :editor/preferred-pasting-file? false\n\n ;; Quick capture templates for receiving content from other apps.\n ;; Each template contains three elements {time}, {text} and {url}, which can be auto-expanded\n ;; by receiving content from other apps. Note: the {} cannot be omitted.\n ;; - {time}: capture time\n ;; - {date}: capture date using current date format, use `[[{date}]]` to get a page reference\n ;; - {text}: text that users selected before sharing.\n ;; - {url}: URL or assets path for media files stored in Logseq.\n ;; You can also reorder them or use only one or two of them in the template.\n ;; You can also insert or format any text in the template, as shown in the following examples.\n ;; :quick-capture-templates\n ;; {:text \"[[quick capture]] **{time}**: {text} from {url}\"\n ;;  :media \"[[quick capture]] **{time}**: {url}\"}\n\n ;; Quick capture options.\n ;; - insert-today?   Insert the capture at the end of today's journal page (boolean).\n ;; - redirect-page?  Redirect to the quick capture page after capturing (boolean).\n ;; - default-page    The default page to capture to if insert-today? is false (string).\n ;; :quick-capture-options\n ;; {:insert-today? false           ;; Default value: true\n ;;  :redirect-page? false          ;; Default value: false\n ;;  :default-page \"quick capture\"} ;; Default page: \"quick capture\"\n\n ;; File sync options\n ;; Ignore these files when syncing, regexp is supported.\n ;; :file-sync/ignore-files []\n\n ;; Configure the Enter key behavior for\n ;; context-aware editing with DWIM (Do What I Mean).\n ;; context-aware Enter key behavior implies that pressing Enter will\n ;; have different outcomes based on the context.\n ;; For instance, pressing Enter within a list generates a new list item,\n ;; whereas pressing Enter in a block reference opens the referenced block.\n ;; :dwim/settings\n ;; {:admonition&src?  true        ;; Default value: true\n ;;  :markup?          false       ;; Default value: false\n ;;  :block-ref?       true        ;; Default value: true\n ;;  :page-ref?        true        ;; Default value: true\n ;;  :properties?      true        ;; Default value: true\n ;;  :list?            false}      ;; Default value: false\n\n ;; Configure the escaping method for special characters in page titles.\n ;; Warning:\n ;;   This is a dangerous operation. To modify the setting,\n ;;   access the 'Filename format' setting and follow the instructions.\n ;;   Otherwise, You may need to manually rename all affected files and\n ;;   re-index them on all clients after synchronization.\n ;;   Incorrect handling may result in messy page titles.\n ;; Available options:\n ;;   - :triple-lowbar (default)\n ;;      ;use triple underscore `___` for slash `/` in page title\n ;;      ;use Percent-encoding for other invalid characters\n :file/name-format :triple-lowbar}\n",536870919]],["^15",[21,"^17",1698762105676,536870919]],["^15",[21,"^Z","logseq/config.edn",536870919]],["^15",[22,"^3","-",536870919]],["^15",[22,"^17",1698762105757,536870919]],["^15",[22,"^Z","pages/contents.md",536870919]],["^15",[23,"^Q","",536870919]],["^15",[23,"^O","^16",536870919]],["^15",[23,"^F",12,536870919]],["^15",[23,"^X",12,536870919]],["^15",[23,"^V",12,536870919]],["^15",[23,"^U",12,536870919]],["^15",[23,"^;","~u65410d79-b4c9-478f-8613-bb40cbb4006c",536870919]],["^15",[24,"^3","- #TEORIA\n- #PRATICA",536870919]],["^15",[24,"^17",1698762105807,536870919]],["^15",[24,"^Z","pages/CSharp.md",536870919]],["^15",[25,"^K",1698762106958,536870919]],["^15",[25,"^[",24,536870919]],["^15",[25,"^@",false,536870919]],["^15",[25,"^Y","csharp",536870919]],["^15",[25,"^11","CSharp",536870919]],["^15",[25,"^B",1698762106958,536870919]],["^15",[25,"^;","~u65410d7a-8f3d-4468-925b-cc388dc9631b",536870919]],["^15",[26,"^K",1698762106947,536870919]],["^15",[26,"^[",371,536870919]],["^15",[26,"^@",false,536870919]],["^15",[26,"^Y","teoria",536870919]],["^15",[26,"^11","TEORIA",536870919]],["^15",[26,"^B",1698762106947,536870919]],["^15",[26,"^;","~u65410d7a-62f9-4f6e-8dfd-9bada61c0ace",536870919]],["^15",[27,"^K",1698762106829,536870919]],["^15",[27,"^[",30,536870919]],["^15",[27,"^@",false,536870919]],["^15",[27,"^Y","pratica",536870919]],["^15",[27,"^11","PRATICA",536870919]],["^15",[27,"^B",1698762106829,536870919]],["^15",[27,"^;","~u65438c86-7044-4212-869f-96e7ae1235c7",536870927]],["^15",[28,"^Q","#TEORIA",536870919]],["^15",[28,"^O","^16",536870919]],["^15",[28,"^F",25,536870919]],["^15",[28,"^X",25,536870919]],["^15",[28,"^V",25,536870919]],["^15",[28,"^U",25,536870919]],["^15",[28,"^U",26,536870919]],["^15",[28,"^H",26,536870919]],["^15",[28,"^;","~u65410d79-0fde-4110-81f6-ef1652d969ef",536870919]],["^15",[29,"^Q","#PRATICA",536870919]],["^15",[29,"^O","^16",536870919]],["^15",[29,"^F",28,536870919]],["^15",[29,"^X",25,536870919]],["^15",[29,"^V",25,536870919]],["^15",[29,"^U",25,536870919]],["^15",[29,"^U",27,536870919]],["^15",[29,"^H",27,536870919]],["^15",[29,"^;","~u65410d79-a506-4058-8656-251285ca9287",536870919]],["^15",[30,"^3","## GENERALI\n\t- **SINTASSI**\n\t  collapsed:: true\n\t\t- *modificatori visiblità*\n\t\t  id:: 6527a3c5-a0cc-4dc1-b90b-a7b028625423\n\t\t  collapsed:: true\n\t\t\t- `public`\n\t\t\t  id:: 6527a3c5-433a-4828-9a12-ca4f72d023cb\n\t\t\t  collapsed:: true\n\t\t\t\t- visibile su più progetti\n\t\t\t\t- visibile dalle librerie\n\t\t\t- `internal`\n\t\t\t  id:: 6527a3c5-ec59-481e-93b6-3907eb48ef29\n\t\t\t  collapsed:: true\n\t\t\t\t- visibile solo nel tuo progetto\n\t\t\t- `private`\n\t\t\t  id:: 6527a3c5-e1e1-4922-a7de-7a56e2fb6e3e\n\t\t\t  collapsed:: true\n\t\t\t\t- visibile solo nella classe corrente\n\t\t\t- `protected`\n\t\t\t  id:: 6527a3c5-6960-4bb4-a454-0984dbb36549\n\t\t\t  collapsed:: true\n\t\t\t\t- visibile dalla classe corrente e sottoclassi\n\t\t- *variabili*\n\t\t  collapsed:: true\n\t\t\t- **nullable**\n\t\t\t  collapsed:: true\n\t\t\t\t- accettano *null* come valore\n\t\t\t\t- ```C#\n\t\t\t\t  int? = 0;\n\t\t\t\t  ```\n\t\t\t- **non-nullable**\n\t\t\t  collapsed:: true\n\t\t\t\t- non accettano *null* come valore\n\t\t\t\t- ```C#\n\t\t\t\t  int = 0;\n\t\t\t\t  ```\n\t\t- *cicli*\n\t\t  collapsed:: true\n\t\t\t- **while**\n\t\t\t  collapsed:: true\n\t\t\t\t- permette di eseguire una porzione di codice fin che una condizione è soddisfatta\n\t\t\t\t- ```C#\n\t\t\t\t  while(condition){\n\t\t\t\t  \t//istruzioni\n\t\t\t\t  }\n\t\t\t\t  ```\n\t\t\t- **do-while**\n\t\t\t  collapsed:: true\n\t\t\t\t- permette una prima esecuzione del codice, e la sua riesecuzione fin che una codizione è soddisfatta\n\t\t\t\t- ```C#\n\t\t\t\t  do{\n\t\t\t\t  \t//istruzioni\n\t\t\t\t  }while(condition)\n\t\t\t\t  ```\n\t\t\t- **for**\n\t\t\t  collapsed:: true\n\t\t\t\t- permette di eseguire una porzione di codice tante volte quante quelle specificate nella condizione\n\t\t\t\t- ```C#\n\t\t\t\t  for(int i=0; i<n; i++){\n\t\t\t\t    //istruzioni\n\t\t\t\t  }\n\t\t\t\t  ```\n\t\t\t- **foreach**\n\t\t\t  collapsed:: true\n\t\t\t\t- permette di ciclare una porzione di dati assegnando ad una variabile ogni posizione della porzione di dati\n\t\t\t\t- ```C#\n\t\t\t\t  foreach(string str in list){\n\t\t\t\t    //istruzioni\n\t\t\t\t  }\n\t\t\t\t  ```\n\t\t- *funzioni*\n\t\t  collapsed:: true\n\t\t\t- **funzione classica**\n\t\t\t  collapsed:: true\n\t\t\t\t- permette l'esecuzione di più istruzioni in un blocco\n\t\t\t\t- ```C#\n\t\t\t\t  private void func() {\n\t\t\t\t    //più istruzioni\n\t\t\t\t  }\n\t\t\t\t  ```\n\t\t\t- **lambda function**\n\t\t\t  collapsed:: true\n\t\t\t\t- permette lì'istruzione e volendo il return di una sola istruzione su una sola riga\n\t\t\t\t- ```C#\n\t\t\t\t  private void func() => //un istruzione\n\t\t\t\t  ```\n\t\t- *gestione console*\n\t\t  collapsed:: true\n\t\t\t- **input**\n\t\t\t  collapsed:: true\n\t\t\t\t- permette di prendere i input dei valori da console\n\t\t\t\t- ```C#\n\t\t\t\t  Console.ReadLine();\n\t\t\t\t  System.Console.ReadLine();\n\t\t\t\t  ```\n\t\t\t- **output**\n\t\t\t  collapsed:: true\n\t\t\t\t- permette di stampare a console dei valori\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  Console.WriteLine(\"...\");\n\t\t\t\t\t  System.Console.WriteLine(\"...\");\n\t\t\t\t\t  ```\n\t\t\t\t- permette di stampare stringhe formattate\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  Console.WriteLine($\"...{var}...\")\n\t\t\t\t\t  ```\n\t\t\t\t- permette di interpretare in modo letterale il testo senza contare i caratteri di escape\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  Console.WriteLine(@\"...\\n\")\n\t\t\t\t\t  ```\n\t\t\t\t- permette di stampare a console degli errori\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  Console.Error.WriteLine(\"...\");\n\t\t\t\t\t  System.Console.Error.WriteLine(\"...\");\n\t\t\t\t\t  ```\n\t\t\t- **puntatore**\n\t\t\t  collapsed:: true\n\t\t\t\t- imposta la posizione del cursore in una certa posizione nella console\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  Console.SetCursorPosition(x,y);\n\t\t\t\t\t  ```\n\t\t\t\t- ritorna la posizione del cursore\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  Console.CursorLeft\n\t\t\t\t\t  Console.CursorTop\n\t\t\t\t\t  ```\n\t\t\t- **caratteri di escape**\n\t\t\t  collapsed:: true\n\t\t\t\t- un carattere di escape è un carattere seguito da `\\` che permette alla shell di eseguire certi comportamenti in base all'escape che trova\n\t\t\t\t- `\\n`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- a capo\n\t\t\t\t- `\\r`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- invio\n\t\t\t\t- `t`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- tabulazione\n\t\t\t\t- `\\v`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- tabulazione verticale\n\t\t- *try-catch*\n\t\t  collapsed:: true\n\t\t\t- ```C#\n\t\t\t  try\n\t\t\t  {\n\t\t\t  \t//codice\n\t\t\t  }\n\t\t\t  catch(Exception e)\n\t\t\t  {\n\t\t\t    \t// gestione errori\n\t\t\t  }\n\t\t\t  finally\n\t\t\t  {\n\t\t\t  \t// codice che viene sempre eseguito a prescindere da che blocco entra\n\t\t\t  }\n\t\t\t  ```\n\t\t- *if*\n\t\t  collapsed:: true\n\t\t\t- permette di fare dei controlli\n\t\t\t- ```C#\n\t\t\t  if(condition){\n\t\t\t    //istruzione\n\t\t\t  }else if(condition 2){\n\t\t\t    //istruzuone\n\t\t\t  }else{\n\t\t\t    //istruzione\n\t\t\t  }\n\t\t\t  ```\n\t\t\t- **conditional operator**\n\t\t\t  collapsed:: true\n\t\t\t\t- *&&*\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- AND\n\t\t\t\t- *||*\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- OR\n\t\t- *ternary operator*\n\t\t  collapsed:: true\n\t\t\t- l'operatore ternario consente di *valutare una condizione* e *restituire* un valore diverso a seconda che la condizione sia vera o falsa.\n\t\t\t- si chiama ternario perchè è composto da tre parti:\n\t\t\t  collapsed:: true\n\t\t\t\t- condizione\n\t\t\t\t  logseq.order-list-type:: number\n\t\t\t\t- return true\n\t\t\t\t  logseq.order-list-type:: number\n\t\t\t\t- return false\n\t\t\t\t  logseq.order-list-type:: number\n\t\t\t- ```c#\n\t\t\t  var x = condition ? true : false;\n\t\t\t  ```\n\t\t- *operatore di null coalescing*\n\t\t  collapsed:: true\n\t\t\t- questo operatore viene utilizzato per fornire un valore predefinito nel caso in cui l'operando a sinistra sia `null`\n\t\t\t- ```C#\n\t\t\t  var x = operandoSinistro ?? valorePredefiito\n\t\t\t  ```\n\t\t- *operatore di null conditional*\n\t\t  collapsed:: true\n\t\t\t- questo operatore viene utilizzato per permettere di accedere ad un elemento solo e solo se l'elemento madre non è `null`\n\t\t\t- ```C#\n\t\t\t  var x = obj?.attr;\n\t\t\t  ```\n\t\t- *lambda expression*\n\t\t  collapsed:: true\n\t\t\t- funzioni anonime\n\t\t\t- **lambda operator**\n\t\t\t  collapsed:: true\n\t\t\t\t- `=>`\n\t\t\t- **expression lambda**\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  input => expression;\n\t\t\t\t  ```\n\t\t\t- **statement lambda**\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  input => { statement };\n\t\t\t\t  ```\n\t\t- *istanza di un oggetto*\n\t\t  collapsed:: true\n\t\t\t- per poter istanziare un oggetto in C# sono presenti più metodi:\n\t\t\t  collapsed:: true\n\t\t\t\t- metodo vecchio:\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  Object obj = new Object(parametri);\n\t\t\t\t\t  ```\n\t\t\t\t- metodo nuovo:\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  Object obj = new(paramtri);\n\t\t\t\t\t  ```\n\t\t- *passaggio dati per referenza*\n\t\t  collapsed:: true\n\t\t\t- il passaggio dati per referenza fa si che non venga passato il valore di una variabile ad una funzione, bensì la sua porzione di memoria\n\t\t\t- quando viene modificata una variabile passata per referenza verrà modificata anche all'esterno della funzione dove viene modificata\n\t\t\t- ```C#\n\t\t\t  internal void test(ref int n){\n\t\t\t        \n\t\t\t  }\n\t\t\t  ```\n\t\t- *extention method*\n\t\t  collapsed:: true\n\t\t\t- in C# è possibile assegnare ad un certo Tipo delle nuove funzioni in questo modo\n\t\t\t- ```C#\n\t\t\t  internal static class ExtensionMethod\n\t\t\t  {\n\t\t\t      internal static int WordCounts(this string s){\n\t\t\t  \t\t//codice\n\t\t\t      }\n\t\t\t  }  \n\t\t\t  ```\n\t\t- *metodo generico*\n\t\t  collapsed:: true\n\t\t\t- un metodo generico è un metodo che viene dichiarato con parametri `<T>` generici\n\t\t\t- ```C#\n\t\t\t  internal static void MetodoGenerico<T>() \n\t\t\t  {\n\t\t\t  \t//codice\n\t\t\t  }\n\t\t\t  ```\n\t\t\t- è comodo per esempio per passare come parametri degli Enum cosa che non potresti fare in una funzione normale non avendo un tipo\n\t\t\t- ```C#\n\t\t\t  internal static void MetodoGenerico<T>() where T: Enum\n\t\t\t  {\n\t\t\t  \t//codice\n\t\t\t      //questo metodo accetta come parametro solo un Enum\n\t\t\t  }\n\t\t\t  ```\n\t\t- *data annotation*\n\t\t  collapsed:: true\n\t\t\t- le `dataAnnotation` servono per la validazioni di dati\n\t\t\t- ```C#\n\t\t\t  class Name\n\t\t\t  {\n\t\t\t      [Annotation] \n\t\t\t      readonly int id ;\n\t\t\t  ```\n\t\t\t- ecco alcuni esempi:\n\t\t\t  collapsed:: true\n\t\t\t\t- `Required`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- dice che quel dato DEVE esser assegnato\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  [Required]\n\t\t\t\t\t  readonly string str;\n\t\t\t\t\t  ```\n\t\t\t\t- `Key`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- dice che quell'attributo è una chiave, per esempio in un database\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  [Key]\n\t\t\t\t\t  readonly int id;\n\t\t\t\t\t  ```\n\t\t\t\t- `MaxLenght`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- dice che quell'attributo può avere una lunghezza massima di tot caratteri\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  [MaxLength(30)]\n\t\t\t\t\t  readonly string str;\n\t\t\t\t\t  ```\n\t\t\t\t- `MinLenght`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- dice che quell'attributo può avere una lunghezza minima di tot caratteri\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  [MinLength(10)]\n\t\t\t\t\t  readonly string str;\n\t\t\t\t\t  ```\n\t\t\t\t- `DisplayName`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- assegna ad un attributo un nome da te indicato\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  [DisplayName(\"name\")]\n\t\t\t\t\t  readonly string str;\n\t\t\t\t\t  ```\n\t\t\t\t- `Range`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- dice che un attributo deve essere presente in un range di caratteri\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  [Range(10,30)]\n\t\t\t\t\t  readonly int n;\n\t\t\t\t\t  ```\n\t\t\t- è possibile assegnare degli `ErrorMessage` personalizzati in questo modo:\n\t\t\t- ```C#\n\t\t\t  [Range(4,10, ErrorMessage = \"error message\")]\n\t\t\t  ```\n\t\t\t- è possibile validare le data annotation tramite l'oggetto built in `ValidationContext`\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  ValidationContext context = new(MyObj);\n\t\t\t\t  ```\n\t- **METODI**\n\t\t- *parsing di una variabile*\n\t\t  collapsed:: true\n\t\t\t- il parsing di una variabile permette di convertire una variabile in un altro tipo\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  int.Parse(var) //type.Parse(var)\n\t\t\t\t  ```\n\t\t\t- nel caso in cui si tenti per esempio di fare il parsing di una stringa ad intero potrebbe dare errore nel momento in cui tu cerchi di convertire una lettera a intero è possibile usare di conseguenza il metodo ``TryParse(var, out var)``\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  int.TryParse(\"1\", out int var)\n\t\t\t\t  ```\n\t\t- *array*\n\t\t  collapsed:: true\n\t\t\t- un array è una collection dati che permette di salvare massimo tot numero di oggetti\n\t\t\t- le posizioni non assegnate in un array verranno messe a `null`\n\t\t\t- ```C#\n\t\t\t  type[] Var = new type[lenght]\n\t\t\t  Var[n] //permette di accedere ad una certa posizione dell'array\n\t\t\t  ```\n\t\t- *liste*\n\t\t  collapsed:: true\n\t\t\t- una lista è una collection dati che permette di contenere una quantità non limitata di oggetti\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  List<type> list = new List<>();\n\t\t\t\t  ```\n\t\t\t- le liste posseggono molti metodi per poter gestire i dati al loro interno, ecco alcuni esempi:\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  list.add(Var);\t\t\t\t\t//aggiunge un elemento alla lista\n\t\t\t\t  list.remove(Var);\t\t\t\t//rimuove un elemento alla lista\n\t\t\t\t  list.foreach(x => method(x))\t//per ogni elemento esegue un metodo\n\t\t\t\t  ```\n\t\t- *dictionary*\n\t\t\t- un dictionary è una particolare collection caratterizzata dal fatto che può contenere un rapporto chiave-valore\n\t\t\t\t- ```C#\n\t\t\t\t  Dictionary<Tkey, Tvar> dic = new();\n\t\t\t\t  dic.add(Tkey, Tvar)\n\t\t\t\t  ```\n\t\t\t- è possibile ciclare un Dictionary\n\t\t\t\t- ```C#\n\t\t\t\t  foreach(string x in dic.Keys){\n\t\t\t\t  \tConsole.WriteLine(dic[x]);\n\t\t\t\t  \tConsole.WriteLine(x);\n\t\t\t\t  }\n\t\t\t\t  \n\t\t\t\t  foreach(string x in dic.Values){\n\t\t\t\t  \tConsole.WriteLine(dic.FirstOrDefault(z => z.Value == x).Key);\n\t\t\t\t  \tConsole.WriteLine(x);\n\t\t\t\t  }\n\t\t\t\t  \n\t\t\t\t  foreach(KeyValuePair<string, string> x in dic){\n\t\t\t\t  \tConsole.WriteLine($\"key -> {x.Key} - value -> {x.Value}\");\n\t\t\t\t  }\n\t\t\t\t  ```\n\t\t- *tuple*\n\t\t  collapsed:: true\n\t\t\t- una tupla è una particolare collection caratterizzata da vari record dove sono presenti più variabili anche di tipi diversi o oggetti\n\t\t\t\t- una tupla non è dinamica quindi non sarà possibile aggiungere elementi in seguito\n\t\t\t\t- id:: 6527a615-9120-4328-96ab-f46f0c17ae6c\n\t\t\t\t  ```C#\n\t\t\t\t   Tuple<int, string, Student> tuple = Tuple.Create(\n\t\t\t\t     1,\"parola\", new Student(\"denys\", \"raimondi\")\n\t\t\t\t   );\n\t\t\t\t  ```\n\t\t\t\t- possibile accedere ai metodi di una tupla in questo modo:\n\t\t\t\t- ```C#\n\t\t\t\t  Console.WriteLine($\"valore tupla: {tuple.Item1}\\n\" + \n\t\t\t\t                    $\"{tuple.Item2}\\n\" + \n\t\t\t\t                    $\"\\n{tuple.Item3}\");\n\t\t\t\t  ```\n\t\t- *using*\n\t\t  collapsed:: true\n\t\t\t- l'istruzione `using` garantisce l'uso corretto di un istanza IDisposable quindi di un istanza che gestisce delle risorse\n\t\t\t  collapsed:: true\n\t\t\t\t- come può essere la lettura di un file di testo\n\t\t\t- ```C#\n\t\t\t  using StreamReader sr = new StreamReader(\"Path/to/file\");\n\t\t\t  while ((line = sr.ReadLine()!) != null)\n\t\t\t  \tstrList.Add(line);\n\t\t\t  ```\n\t\t\t- ```C#\n\t\t\t  using StreamReader sr = new StreamReader(\"Path/to/file\")\n\t\t\t  {\n\t\t\t   \twhile ((line = sr.ReadLine()!) != null)\n\t\t\t  \t\tstrList.Add(line);\n\t\t\t  }\n\t\t\t  ```\n\t\t- *linQ*\n\t\t  collapsed:: true\n\t\t\t- con `linQ` è possibile fare delle qeury alle liste\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  List<string> strList = new(){\"data1\", \"d4ta2\", \"data3\", \"data 4\"};\n\t\t\t\t  List<string> filtred = (from el in strList \n\t\t\t\t  \t\t\t\t\t\twhere el.Contains(\"data\")\n\t\t\t\t                         \tselect el\n\t\t\t\t                         ).toList();\n\t\t\t\t  ```\n\t\t\t- `linQ` offre anche altri metodi lambda per lavorare sulle liste\n\t\t\t  collapsed:: true\n\t\t\t\t- `Find`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- Find ritorna la prima occorrenza della lista che corrispondono alla condizione\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  string filtred = strList.Find(s => s.Contains(\"data\"));\n\t\t\t\t\t  ```\n\t\t\t\t- `FindAll`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- FindAll ritorna una lista di elementi che corrispondono alla condizione\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  List<string> filtred = strList.findAll(s => s.Contains(\"data\"));\n\t\t\t\t\t  ```\n\t\t\t\t- `Where`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- Where ritorna una sottolista di elementi che corrispondono alla condizione\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  List<string> filtred = strList.Where(s => s.Contains(\"data\"));\n\t\t\t\t\t  ```\n\t\t\t\t- `FirstOrDefault`\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- FirstOrDefault restituisce il primo elemento di una sequenza o un valore predefinito se non viene trovato alcun elemento.\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  string filtred = strList.FirstOrDefault(s => s.Contains(\"data\"),\"\");\n\t\t\t\t\t  ```\n\t- **TIPI**\n\t  collapsed:: true\n\t\t- *DateTime*\n\t\t\t- DateTime è un tipo di variabile che permette lo storage e i calcoli sulle date\n\t\t\t\t- ```C#\n\t\t\t\t  DateTime time = DateTime.Now //ritorna la data attuale \n\t\t\t\t  ```\n\t\t\t- è possibile anche formattare il formato della data richiesta\n\t\t\t\t- ```C#\n\t\t\t\t  time.ToString(\"format\") //il metodo ToString accetta in input il formato\n\t\t\t\t  ```\n\t\t- *ENUM*\n\t\t  collapsed:: true\n\t\t\t- un enumerator è una particolare struttura dati immutabile definito da un set di costanti che permette di definire un tipo di enumerazione\n\t\t\t- ```C#\n\t\t\t  internal enum Name\n\t\t\t  {\n\t\t\t  \tData1,\n\t\t\t      Data2,\n\t\t\t      Data3\n\t\t\t  }\n\t\t\t  ```\n\t\t\t- per ogni elemento dell'enumeratore viene assegnato un ID con autoincrement. è possibile riassegnare gli ID in un enumeratore in questo modo:\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  internal enum Name\n\t\t\t\t  {\n\t\t\t\t  \tData1 = 10,\t//in questo modo la conta pratirà da 10\n\t\t\t\t      Data2,\t\t//11\n\t\t\t\t      Data3\t\t//12\n\t\t\t\t  }\n\t\t\t\t  ```\n\t\t\t- è possibile accedere agli elementi di un enumeratore in questo modo:\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  Name na = Name.Data1  //in questo momento n avrà il valore di Data1\n\t\t\t\t  int n = (int) na\t  //è possibile avere l'ID castando ad intero\n\t\t\t\t  ```\n\t\t\t- è possibile stampare una lista completa di tutto l'enumeratore in questo modo:\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  foreach (Name na in Enum.GetValues(typeof(Name)))\n\t\t\t\t  {\n\t\t\t\t  \tConsole.WriteLine(na);\n\t\t\t\t  }\n\t\t\t\t  ```\n\t- **GESTIONE FILESYSTEM**\n\t  collapsed:: true\n\t\t- *File*\n\t\t  collapsed:: true\n\t\t\t- l'oggetto `File` in C# permette la gestione di molte tipologie di File\n\t\t\t- *lettura*\n\t\t\t\t- con il metodo `ReadAllText` è possibile leggere tutto l'intero file fino al terminatore `EOF` e assegnarlo ad una variabile\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  string fData = File.ReadAllText(\"path/to/file\");\n\t\t\t\t\t  ```\n\t\t\t\t- con il metodo `ReadAllLines` è possibile leggere l'intero file fino al terminatore `EOF` e assegnare ogni riga ad una posizione di un array di stringhe\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t   string[] fData = File.ReadAllLines(\"path/to/file\");\n\t\t\t\t\t  ```\n\t\t- *StreamReader*\n\t\t\t- l'oggetto `StreamReader` legge tutti i caratteri da un flusso di byte in una certa codifica\n\t\t\t- ```C#\n\t\t\t  StreamReader sr = new(\"Path/to/file\"); \n\t\t\t  ```\n\t\t\t- *lettura di un file*\n\t\t\t\t- con il metodo `ReadToEnd` è possibile leggere un intero flusso di byte e salvarlo tutto all'interno di una variabile di tipo stringa\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  string fData = sr.ReadToEnd();\n\t\t\t\t\t  ```\n\t\t\t\t- con il metodo `ReadLines` è possibile leggere una riga di un flusso di dati, quindi al terminatore di riga, e scrivelo in una variabile di tipo stringa\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  string fData = sr.ReadLine();\n\t\t\t\t\t  ```\n\t\t\t\t\t- è possibile leggere un intero file e salvarlo in una lista di stringhe in questo modo:\n\t\t\t\t\t\t- ```C#\n\t\t\t\t\t\t  List<string> lines = new();\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  while((sline = sr.ReadLine()!) != null)\n\t\t\t\t\t\t  \tlines.Add(sline);\n\t\t\t\t\t\t  ```\n\t\t- *DirectoryInfo*\n\t\t  collapsed:: true\n\t\t\t- con `DirectoryInfo` è possibile vedere molte informazioni relative alle direttori\n\t\t\t- ```C#\n\t\t\t  DirectoryInfo dir = new(\"Path/to/dir\");\n\t\t\t  ```\n\t\t\t- `GetFiles`\n\t\t\t  collapsed:: true\n\t\t\t\t- col metodo GetFiles è possibile ricevere una lista di tutti i file presenti in una directory\n\t\t\t\t- ```C#\n\t\t\t\t  string[] files = dir.GetFiles();\n\t\t\t\t  ```\n\t\t- *StreamWriter*\n\t\t  collapsed:: true\n\t\t\t- l'oggetto `StreamWriter` permtte di scrivere in un flusso di byte in una certa codifica\n\t\t\t- ```C#\n\t\t\t  StreamWriter sw = new StreamWriter(\"Path/to/file\");\n\t\t\t  ```\n\t\t\t- *scrittura su un file*\n\t\t\t  collapsed:: true\n\t\t\t\t- con il metodo `WriteLine` è possibile scrivere una riga su un flusso di byte\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  sw.WriteLine(\"text\");\n\t\t\t\t\t  ```\n\t- **DATA SERIALIZATION**\n\t  collapsed:: true\n\t\t- *JSON*\n\t\t\t- Javascricp Script Object Notation\n\t\t\t- tutti gli oggetti da serializzare devono avere attributi `getter` & `setter` pubbici\n\t\t\t- in C# per lavorare con i JSON sarà necessario importare la libreria Newtonsoft.Json\n\t\t\t  collapsed:: true\n\t\t\t\t- `dotnet** add package Newtonsoft.Json`\n\t\t\t- `Serialize`\n\t\t\t  collapsed:: true\n\t\t\t\t- serializzare una serie di oggetti da object a json\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  object json = JsonConvert.SerializeObject(obj, Formatting.Indented);\n\t\t\t\t\t  ```\n\t\t\t\t- salvatagio dati json su file\n\t\t\t\t\t- using(StreamWriter sw = new(\"Path/to/JSON\")\n\t\t\t\t\t  {\n\t\t\t\t\t  \tsw.WriteLine(json);\n\t\t\t\t\t  }\n\t\t\t- `Deserialize`\n\t\t\t  collapsed:: true\n\t\t\t\t- deserializzare un json per esempio letto da file e serializzarlo come lista di oggetti\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ogni oggetto deve avere gli stessi attributi pubblici che sono presenti nel JSON\n\t\t\t\t- lettura di file json\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  using(StreamReader sr = new(\"Path/to/JSON\")\n\t\t\t\t\t  {\n\t\t\t\t\t  \tfJson = sr.ReadToEnd();\n\t\t\t\t\t  }\n\t\t\t\t\t  ```\n\t\t\t\t- conversione da file JSON a lista di oggetti\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  List<object>list=JsonConvert.DeserializeObject<List<object>>(fJson);\n\t\t\t\t\t  ```\n\t\t- *XML*\n\t\t  collapsed:: true\n\t\t\t- eXtensible Markup Language\n\t\t\t- tutti gli oggetti da serializzare devono avere attributi `getter` & `setter` pubbici\n\t\t\t- `Serialize`\n\t\t\t  collapsed:: true\n\t\t\t\t- serializzare una serie di oggetti da object a XML\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  XmlSerializer xml = new(MyObj.GetType());\n\t\t\t\t\t  xml.Serialize(Console.Out, MyObj);\n\t\t\t\t\t  ```\n\t\t\t\t\t- nel metodo `Serialize` al posto di Console.Out è possibile mettere qualiasi metodo di scrittura come uno StreamWriter\n\t\t\t\t\t  collapsed:: true\n\t\t\t\t\t\t- ```C#\n\t\t\t\t\t\t  XmlSerializer xml = new(MyObj.GetType());\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  using(StreamWriter sw = new(\"Path/to/xml\"))\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t  \txml.Serialize(sw, MyObj);\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  ```\n\t\t\t- `Deserialize`\n\t\t\t  collapsed:: true\n\t\t\t\t- deserializzare una serie di oggetti da XML ad object\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  XmlSerializer xml = new(MyObj.GetType());\n\t\t\t\t\t  using FileStream fs = new(\"Path/to/xml\", FileMode.Open);\n\t\t\t\t\t  List<obj> result = xml.Deserialize(fs) as List<obj> ?? new();\n\t\t\t\t\t  ```\n\t\t\t- `append`\n\t\t\t  collapsed:: true\n\t\t\t\t- permette di andare in lettura su un file XML ed appendere al suo interno degli oggetti\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  //carico il mio file XML in un Xdocument\n\t\t\t\t\t  Xdocument xmlDoc = Xdocument.Load(\"Path/to/xml\");\n\t\t\t\t\t  //creo l'elemento root\n\t\t\t\t\t  Xelement RootElement = new(MyObj.GetType());\n\t\t\t\t\t  //creo l'elemento child e ci assegno un valore\n\t\t\t\t\t  Xelement ChildElement = new(\"name\");\n\t\t\t\t\t  ChildElement.Value = MyObj.getter ?? string.Empty;\n\t\t\t\t\t  //appendo l'elemento al RootElement\n\t\t\t\t\t  RootElement.Add(ChildElement);\n\t\t\t\t\t  //appendo il RootElement al documento XML\n\t\t\t\t\t  xmlDoc.Root.Add(RootElement);\n\t\t\t\t\t  //salvo il documento\n\t\t\t\t\t  mlDoc.Save(\"Path/to/xml\"); \t\n\t\t\t\t\t  ```\n\t- **CRYPT**\n\t  collapsed:: true\n\t\t- *HASH*\n\t\t  collapsed:: true\n\t\t\t- per ogni stringa corrisponde sempre un solo HASH\n\t\t\t- per estrarre l'hash di una stringa è possibile utilizzare alcuni algoritmi come per esempio:\n\t\t\t  collapsed:: true\n\t\t\t\t- SHA\n\t\t\t\t  logseq.order-list-type:: number\n\t\t\t\t- SHA128\n\t\t\t\t  logseq.order-list-type:: number\n\t\t\t\t- SHA256\n\t\t\t\t  logseq.order-list-type:: number\n\t\t\t\t- SHA512\n\t\t\t\t  logseq.order-list-type:: number\n\t\t\t\t- MD5\n\t\t\t\t  logseq.order-list-type:: number\n\t\t\t- un HASH è chiamata anche OneWayHash ciò significa che non può esser decryptata. però, visto che due stringhe uguali andranno a generare un hash identica sarà possibile quindi eguliare l'hash salvata e l'hash calcolata al momento, se sono uguali allora la parola di origine è stata trovata\n\t\t\t- *SHA*\n\t\t\t  collapsed:: true\n\t\t\t\t- utilizzando SHA e le sue derivanti è possibile estrarre un hash composta da meno o più bit in base a quale algoritmo si scelga.\n\t\t\t\t  collapsed:: true\n\t\t\t\t  È possibile ricavare l'hash in questo modo:\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  internal string EncryptString(string s)\n\t\t\t\t\t  {\n\t\t\t\t\t  \tStringBuilder strB = new();\n\t\t\t\t\t  \ttry\n\t\t\t\t\t      {\n\t\t\t\t\t  \t\tSHA256 sha256 = SHA256.Create();\n\t\t\t\t\t  \t\tbyte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(s)); \n\t\t\t\t\t  \n\t\t\t\t\t  \t\tfor (int i = 0; i < bytes.Length; i++)\n\t\t\t\t\t          \t//c2 serve per convertire in HEX\n\t\t\t\t\t  \t\t\tstrB.Append(bytes[i].ToString(\"x2\")); \n\t\t\t\t\t      }\n\t\t\t\t\t  \tcatch (System.Exception)\n\t\t\t\t\t  \t{\n\t\t\t\t\t  \t\tthrow;\n\t\t\t\t\t  \t}\n\t\t\t\t\t      return strB.ToString();\n\t\t\t\t\t  }\n\t\t\t\t\t  ```\n\t\t\t- *SHA SALT*\n\t\t\t  collapsed:: true\n\t\t\t\t- questo metodo permette di generare due HASH diverse anche nel momento in cui si fa l'hash sulla stessa parola.\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- questo è possibile usando un `Salt` una serie di bytes generati randomicamente inseriti nella frase che permettono quindi di generare un HASH sempre diversa\n\t\t\t\t\t- C# permette di farlo installando la libreria `KeyDerivation`:\n\t\t\t\t\t  collapsed:: true\n\t\t\t\t\t\t- `dotnet add package Microsoft.AspNetCore.Cryptography.KeyDerivation --version 7.0.12`\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  internal KeyValuePair<string,string> EncryptSaltString(string s){\n\t\t\t\t\t  \tbyte[] byteSalt = new byte[16];\n\t\t\t\t\t  \tstring EncResult = string.Empty;\n\t\t\t\t\t      string EncSalt = string.Empty;\n\t\t\t\t\t  \ttry\n\t\t\t\t\t  \t{\n\t\t\t\t\t  \t\tRandomNumberGenerator.Fill(byteSalt);\n\t\t\t\t\t          EncResult = Convert.ToBase64String(\n\t\t\t\t\t              KeyDerivation.Pbkdf2(   \n\t\t\t\t\t              password: s,\n\t\t\t\t\t              salt: byteSalt,\n\t\t\t\t\t              prf: KeyDerivationPrf.HMACSHA256,\n\t\t\t\t\t              iterationCount: 10000,\n\t\t\t\t\t              numBytesRequested: 132\n\t\t\t\t\t  \t\t\t)\n\t\t\t\t\t          );\n\t\t\t\t\t         \tEncSalt = Convert.ToBase64String(byteSalt);\n\t\t\t\t\t  \t}\n\t\t\t\t\t  \tcatch (System.Exception)\n\t\t\t\t\t  \t{\n\t\t\t\t\t  \t\tthrow;\n\t\t\t\t\t  \t}\n\t\t\t\t\t  \treturn new KeyValuePair<string, string>(EncSalt, EncResult);\n\t\t\t\t\t  }\n\t\t\t\t\t  \n\t\t\t\t\t  ```\n\t\t\t\t- di conseguenza non sarà possibile comparare l'HASH salvata con la nuova HASH appena calcolata per vedere la corrispondenza, perchè verranno generate HASH diverse.\n\t\t\t\t  collapsed:: true\n\t\t\t\t\t- sarà quindi necessario salvarci anche il primo `Salt` per poterlo riutilizzare per generare una sequenza di byte identica a quella dell'HASH precedente.\n\t\t\t\t\t- ```C#\n\t\t\t\t\t  internal bool VerifyPassword(string enteredPassword, \n\t\t\t\t\t                               KeyValuePair<string, string> hashedSalt)\n\t\t\t\t\t  {\n\t\t\t\t\t          byte[] salt = Convert.FromBase64String(hashedSalt.Key);\n\t\t\t\t\t          byte[] hash = Convert.FromBase64String(hashedSalt.Value);\n\t\t\t\t\t  \n\t\t\t\t\t          byte[] newHash = KeyDerivation.Pbkdf2(\n\t\t\t\t\t              password: enteredPassword,\n\t\t\t\t\t              salt: salt,\n\t\t\t\t\t              prf: KeyDerivationPrf.HMACSHA256,\n\t\t\t\t\t              iterationCount: 10000,\n\t\t\t\t\t              numBytesRequested: hash.lenght\n\t\t\t\t\t          );\n\t\t\t\t\t  \n\t\t\t\t\t          return newHash.SequenceEqual(hash);\n\t\t\t\t\t      }\n\t\t\t\t\t  }\n\t\t\t\t\t  ```\n- ## OOP\n\t- **MODIFICATORI DI VISIBILITÀ**\n\t  collapsed:: true\n\t\t- ((6527a3c5-a0cc-4dc1-b90b-a7b028625423))\n\t- **SINTASSI**\n\t  collapsed:: true\n\t\t- *classe*\n\t\t  collapsed:: true\n\t\t\t- una classe ha la potenza di definire le caratteristiche di un insieme di oggetti che hanno proprietà e compiono azioni uguali\n\t\t\t- ```C#\n\t\t\t  public class Name\n\t\t\t  {\n\t\t\t    \n\t\t\t  }\n\t\t\t  ```\n\t\t- *costruttore*\n\t\t  collapsed:: true\n\t\t\t- il costruttore di una classe è il primo metodo a venir eseguito e viene eseguito in automatico nel momento del richiamo della new();\n\t\t\t- ```C#\n\t\t\t  public Name(Parametri){\n\t\t\t  \t//istruzioni\n\t\t\t  }\n\t\t\t  ```\n\t\t- *attributi*\n\t\t  collapsed:: true\n\t\t\t- gli attributi di una classe sono quelle variabili definite all'interno di una classe\n\t\t\t- ```C#\n\t\t\t  public class Name\n\t\t\t  {\n\t\t\t    int x {get; set;} = 0;\n\t\t\t  }\n\t\t\t  ```\n\t\t\t- *NB*\n\t\t\t  collapsed:: true\n\t\t\t\t- in C# è possibile definire fin da subito quando una variabile può essere solo letta o solo sovrascritta o entrambi attraverso le keyword `{get;}` e `{set;}`\n\t\t- *getter e setter*\n\t\t  collapsed:: true\n\t\t\t- i getter e setter sono metodi che permettono di accedere a degli attributi della classe privati anche dall'esterno, al suo interno è possibile effettuare controlli o gestire i dati.\n\t\t\t- ci sono vari modi per definire un getter o un setter\n\t\t\t  collapsed:: true\n\t\t\t\t- ```C#\n\t\t\t\t  internal type GetVar => Var;\t//non-invocable member\n\t\t\t\t  internal type getVar() => Var;\t//lambda method\n\t\t\t\t  internal type getVar(){\t\t\t//metodo esteso\n\t\t\t\t    //controlli\n\t\t\t\t    return Var;\t\t\t\t\t\n\t\t\t\t  }\n\t\t\t\t  ```\n\t\t\t\t- ```C#\n\t\t\t\t  internal void SetVar(type Var) => this.Var = Var; //lambda method\n\t\t\t\t  internal void SetVar(type Var){\t\t\t\t\t  //metodo esteso\n\t\t\t\t    //controlli\n\t\t\t\t    this.Var = Var;\n\t\t\t\t  }\n\t\t\t\t  ```\n\t\t\t\t- ```C#\n\t\t\t\t  public int x {get; private set;} \n\t\t\t\t  //permette di mettere il get pubblico e il set privato\n\t\t\t\t  ```\n\t\t- *interface*\n\t\t  collapsed:: true\n\t\t\t- un `interface` in C# permette di salvare al suo interno le firme di metodi che poi dovranno essere implementati.\n\t\t\t- è possibile estendere più interfacce\n\t\t\t- collapsed:: true\n\t\t\t  ```C#\n\t\t\t  internal interface IInterface\n\t\t\t  {\n\t\t\t     //firme metodi\n\t\t\t  }\n\t\t\t  ```\n\t\t\t\t- è buona cosa iniziare i nome delle interfaccie con una `I` maiuscola, almeno quando si va a estendere un interfaccie si riesce a differenziare le interfaccie dalle classi\n\t\t\t\t- ```C#\n\t\t\t\t  internal class Name : IInterface1, IInterface2\n\t\t\t\t  {\n\t\t\t\t  \t//codice\n\t\t\t\t  }\n\t\t\t\t  ```\n\t\t\t- in C# un interfaccia non può contenere attributi\n\t\t- *singleton*\n\t\t  collapsed:: true\n\t\t\t- una classe singleton è una classe che potrà avere solo 1 istanza\n\t\t\t  collapsed:: true\n\t\t\t\t- in C# non esiste built-in la classe singleton\n\t\t\t- è possibile implementarla in questo modo:\n\t\t\t- ```C#\n\t\t\t  internal class SingletonClass  \n\t\t\t  {\n\t\t\t      private static SingletonClass? _instance;\n\t\t\t  \n\t\t\t      public static SingletonClass Instance() =>\n\t\t\t      \t_instance ??= new();\n\t\t\t  }\n\t\t\t  ```\n\t\t\t- e sarà possibile creare un isntanza in questo modo:\n\t\t\t- ```C#\n\t\t\t  SingletonClass s = SingletonClass.Instance();\n\t\t\t  ```\n\t- **PROPRIETÀ**\n\t  collapsed:: true\n\t\t- *ereditarietà*\n\t\t\t- l'ereditarietà è quella proprietà della OOP che permette ad una classe figlia di ereditare metodi e attributi da una classe madre\n\t\t\t  collapsed:: true\n\t\t\t\t- è possibile sentir chiamare classe Madre e FIglia: Super Class e Base Class\n\t\t\t- id:: 652f7406-2a99-4dad-8c23-36ae5dbd519a\n\t\t\t  ```C#\n\t\t\t  class childClass : MotherClass\t\n\t\t\t  {\n\t\t\t  \t//codice\n\t\t\t  }\n\t\t\t  ```\n\t\t\t- nel momento in cui nella classe madre sono definiti dei metodi astratti sarà necessario l'Override nella classe figlia\n\t\t\t- è possibile estendere ed eriditare i metodi di sola una classe per volta\n\t\t- *classe astratta*\n\t\t\t- una classe astratta è una classe i quali metodi e attributi le quali implementazioni sono mancanti o incomplete. o MotherClass la quale però non potrà avere un istanza\n\t\t\t  collapsed:: true\n\t\t\t\t- abstract potrà quindi essere usato per indicare una classe da usare come classe di base\n\t\t\t- il modificatore abstract può essere usato su classi, metodi, e attributi, indicizzatori ed eventi\n\t\t\t- una classe abstract in C# deve esser definita come sottoclasse\n\t\t\t- ```C#\n\t\t\t  internal class Name1\n\t\t\t  {\n\t\t\t    internal abstract class Name2\n\t\t\t    {\n\t\t\t      internal abstract int n;\n\t\t\t    }\n\t\t\t  }\n\t\t\t  ```\n\t\t\t- i metodi e gli attributi abstract sarà neessario fargli l'override nella classe che la estenderà\n\t\t- *incapsulamento*\n\t\t  collapsed:: true\n\t\t\t- l'incapsulamento è la capacità di un oggetto di una classe madre di nascondere la sua implementazione ad una classe figlia e permettere l'accesso di quel valore solo tramite `getter` e `setter`\n\t\t\t- ```C#\n\t\t\t  class Name\n\t\t\t  {\n\t\t\t    public int n {get; private set;};\n\t\t\t  }\n\t\t\t  ```",536870964]],["^15",[30,"^17",1698762106845,536870919]],["^15",[30,"~:file/last-modified-at","~m1698925841022",536870963]],["^15",[30,"^Z","pages/PRATICA.md",536870919]],["^15",[31,"^Q","*ereditarietà*",536870919]],["^15",[31,"^O","^16",536870919]],["^15",[31,"^F",75,536870919]],["^15",[31,"^X",27,536870919]],["^15",[31,"^V",75,536870919]],["^15",[31,"^U",27,536870919]],["^15",[31,"^;","~u65410d7a-cffe-42ff-8fe6-3074422d29a7",536870919]],["^15",[32,"^Q","è possibile estendere più interfacce",536870919]],["^15",[32,"^O","^16",536870919]],["^15",[32,"^F",106,536870919]],["^15",[32,"^X",27,536870919]],["^15",[32,"^V",105,536870919]],["^15",[32,"^U",27,536870919]],["^15",[32,"^;","~u65410d7a-d9b8-411d-b922-5b828b7b77b1",536870919]],["^15",[33,"^M",true,536870919]],["^15",[33,"^Q","~`Deserialize`\ncollapsed:: true",536870919]],["^15",[33,"^O","^16",536870919]],["^15",[33,"^F",416,536870927]],["^15",[33,"^X",27,536870919]],["^15",[33,"^V",286,536870919]],["^15",[33,"^U",27,536870919]],["^15",[33,"^?",["^ "],536870927]],["^15",[33,"^J",[],536870927]],["^15",[33,"^4",["^ "],536870927]],["^15",[33,"^;","~u65410d7a-ea1b-4ff7-bda3-f34cc269e5b3",536870919]],["^15",[34,"^Q","~```C#\ninternal enum Name\n{\n\tData1,\n    Data2,\n    Data3\n}\n```",536870919]],["^15",[34,"^O","^16",536870919]],["^15",[34,"^F",124,536870919]],["^15",[34,"^X",27,536870919]],["^15",[34,"^V",180,536870919]],["^15",[34,"^U",27,536870919]],["^15",[34,"^;","~u65410d7a-b75d-4da6-896c-6bd902d47983",536870919]],["^15",[35,"^Q","~```C#\ninternal class Name1\n{\n  internal abstract class Name2\n  {\n    internal abstract int n;\n  }\n}\n```",536870919]],["^15",[35,"^O","^16",536870919]],["^15",[35,"^F",367,536870919]],["^15",[35,"^X",27,536870919]],["^15",[35,"^V",144,536870919]],["^15",[35,"^U",27,536870919]],["^15",[35,"^;","~u65410d7a-f96e-462a-9804-8740935924e0",536870919]],["^15",[36,"^Q","abstract potrà quindi essere usato per indicare una classe da usare come classe di base",536870919]],["^15",[36,"^O","^16",536870919]],["^15",[36,"^F",330,536870919]],["^15",[36,"^X",27,536870919]],["^15",[36,"^V",330,536870919]],["^15",[36,"^U",27,536870919]],["^15",[36,"^;","~u65410d7a-e4e3-45a1-85b6-3b0ec01b0ae6",536870919]],["^15",[37,"^Q","l'operatore ternario consente di *valutare una condizione* e *restituire* un valore diverso a seconda che la condizione sia vera o falsa.",536870919]],["^15",[37,"^O","^16",536870919]],["^15",[37,"^F",319,536870919]],["^15",[37,"^X",27,536870919]],["^15",[37,"^V",319,536870919]],["^15",[37,"^U",27,536870919]],["^15",[37,"^;","~u65410d7a-f84d-4716-a6e4-874dae0d622f",536870919]],["^15",[38,"^Q","~```C#\nusing StreamReader sr = new StreamReader(\"Path/to/file\")\n{\n \twhile ((line = sr.ReadLine()!) != null)\n\t\tstrList.Add(line);\n}\n```",536870919]],["^15",[38,"^O","^16",536870919]],["^15",[38,"^F",214,536870919]],["^15",[38,"^X",27,536870919]],["^15",[38,"^V",128,536870919]],["^15",[38,"^U",27,536870919]],["^15",[38,"^;","~u65410d7a-1f8e-48dc-b80d-544d0f3b0706",536870919]],["^15",[39,"^M",true,536870919]],["^15",[39,"^Q","*costruttore*\ncollapsed:: true",536870919]],["^15",[39,"^O","^16",536870919]],["^15",[39,"^F",321,536870919]],["^15",[39,"^X",27,536870919]],["^15",[39,"^V",86,536870919]],["^15",[39,"^U",27,536870919]],["^15",[39,"^?",["^ "],536870927]],["^15",[39,"^J",[],536870927]],["^15",[39,"^4",["^ "],536870927]],["^15",[39,"^;","~u65410d7a-7059-47f6-ab81-222326ebe978",536870919]],["^15",[40,"^Q","condizione\nlogseq.order-list-type:: number",536870919]],["^15",[40,"^O","^16",536870919]],["^15",[40,"^F",70,536870919]],["^15",[40,"^X",27,536870919]],["^15",[40,"^V",70,536870919]],["^15",[40,"^U",27,536870919]],["^15",[40,"^?",["^ ","~:logseq.order-list-type","number"],536870927]],["^15",[40,"^J",["^19"],536870927]],["^15",[40,"^4",["^ ","^19","number"],536870927]],["^15",[40,"^;","~u65410d7a-138b-4c7e-aa94-ee4fc531b9a4",536870919]],["^15",[41,"^Q","con il metodo `ReadLines` è possibile leggere una riga di un flusso di dati, quindi al terminatore di riga, e scrivelo in una variabile di tipo stringa",536870919]],["^15",[41,"^O","^16",536870919]],["^15",[41,"^F",310,536870919]],["^15",[41,"^X",27,536870919]],["^15",[41,"^V",271,536870919]],["^15",[41,"^U",27,536870919]],["^15",[41,"^;","~u65410d7a-3110-4305-8ca9-24e97a751507",536870919]],["^15",[42,"^Q","~```C#\nList<object>list=JsonConvert.DeserializeObject<List<object>>(fJson);\n```",536870919]],["^15",[42,"^O","^16",536870919]],["^15",[42,"^F",56,536870919]],["^15",[42,"^X",27,536870919]],["^15",[42,"^V",56,536870919]],["^15",[42,"^U",27,536870919]],["^15",[42,"^;","~u65410d7a-1d62-492e-94c6-bc1824be832f",536870919]],["^15",[43,"^M",true,536870919]],["^15",[43,"^Q","*gestione console*\ncollapsed:: true",536870919]],["^15",[43,"^O","^16",536870919]],["^15",[43,"^F",174,536870919]],["^15",[43,"^X",27,536870919]],["^15",[43,"^V",197,536870919]],["^15",[43,"^U",27,536870919]],["^15",[43,"^?",["^ "],536870927]],["^15",[43,"^J",[],536870927]],["^15",[43,"^4",["^ "],536870927]],["^15",[43,"^;","~u65410d7a-8c72-4db6-944d-0799ef35b0c3",536870919]],["^15",[44,"^Q","l'oggetto `File` in C# permette la gestione di molte tipologie di File",536870919]],["^15",[44,"^O","^16",536870919]],["^15",[44,"^F",125,536870919]],["^15",[44,"^X",27,536870919]],["^15",[44,"^V",125,536870919]],["^15",[44,"^U",27,536870919]],["^15",[44,"^;","~u65410d7a-67d1-4280-a8b0-abf6f2dfebfa",536870919]],["^15",[45,"^Q","~```C#\nXmlSerializer xml = new(MyObj.GetType());\nxml.Serialize(Console.Out, MyObj);\n```",536870919]],["^15",[45,"^O","^16",536870919]],["^15",[45,"^F",127,536870919]],["^15",[45,"^X",27,536870919]],["^15",[45,"^V",127,536870919]],["^15",[45,"^U",27,536870919]],["^15",[45,"^;","~u65410d7a-cb5e-4f3b-a01a-b77d7f0a434d",536870919]],["^15",[46,"^M",true,536870919]],["^15",[46,"^Q","C# permette di farlo installando la libreria `KeyDerivation`:\ncollapsed:: true",536870919]],["^15",[46,"^O","^16",536870919]],["^15",[46,"^F",88,536870919]],["^15",[46,"^X",27,536870919]],["^15",[46,"^V",216,536870919]],["^15",[46,"^U",27,536870919]],["^15",[46,"^?",["^ "],536870927]],["^15",[46,"^J",[],536870927]],["^15",[46,"^4",["^ "],536870927]],["^15",[46,"^;","~u65410d7a-c51c-4e71-b074-e96d846d5222",536870919]],["^15",[47,"^Q","questo operatore viene utilizzato per permettere di accedere ad un elemento solo e solo se l'elemento madre non è `null`",536870919]],["^15",[47,"^O","^16",536870919]],["^15",[47,"^F",73,536870919]],["^15",[47,"^X",27,536870919]],["^15",[47,"^V",73,536870919]],["^15",[47,"^U",27,536870919]],["^15",[47,"^;","~u65410d7a-9f08-4ab8-9007-0da775e7c000",536870919]],["^15",[48,"^Q","~```C#\ninternal KeyValuePair<string,string> EncryptSaltString(string s){\n\tbyte[] byteSalt = new byte[16];\n\tstring EncResult = string.Empty;\n    string EncSalt = string.Empty;\n\ttry\n\t{\n\t\tRandomNumberGenerator.Fill(byteSalt);\n        EncResult = Convert.ToBase64String(\n            KeyDerivation.Pbkdf2(   \n            password: s,\n            salt: byteSalt,\n            prf: KeyDerivationPrf.HMACSHA256,\n            iterationCount: 10000,\n            numBytesRequested: 132\n\t\t\t)\n        );\n       \tEncSalt = Convert.ToBase64String(byteSalt);\n\t}\n\tcatch (System.Exception)\n\t{\n\t\tthrow;\n\t}\n\treturn new KeyValuePair<string, string>(EncSalt, EncResult);\n}\n\n```",536870919]],["^15",[48,"^O","^16",536870919]],["^15",[48,"^F",46,536870919]],["^15",[48,"^X",27,536870919]],["^15",[48,"^V",216,536870919]],["^15",[48,"^U",27,536870919]],["^15",[48,"^;","~u65410d7a-1f9a-47a8-ab2b-191b7ab501b8",536870919]],["^15",[49,"^M",true,536870919]],["^15",[49,"^Q","per estrarre l'hash di una stringa è possibile utilizzare alcuni algoritmi come per esempio:\ncollapsed:: true",536870919]],["^15",[49,"^O","^16",536870919]],["^15",[49,"^F",171,536870919]],["^15",[49,"^X",27,536870919]],["^15",[49,"^V",213,536870919]],["^15",[49,"^U",27,536870919]],["^15",[49,"^?",["^ "],536870927]],["^15",[49,"^J",[],536870927]],["^15",[49,"^4",["^ "],536870927]],["^15",[49,"^;","~u65410d7a-7e26-4acc-ac0a-8c663c053fa4",536870919]],["^15",[50,"^Q","tutti gli oggetti da serializzare devono avere attributi `getter` & `setter` pubbici",536870919]],["^15",[50,"^O","^16",536870919]],["^15",[50,"^F",110,536870919]],["^15",[50,"^X",27,536870919]],["^15",[50,"^V",412,536870927]],["^15",[50,"^U",27,536870919]],["^15",[50,"^;","~u65410d7a-4872-4d66-aff5-134534f266f4",536870919]],["^15",[51,"^Q","e sarà possibile creare un isntanza in questo modo:",536870919]],["^15",[51,"^O","^16",536870919]],["^15",[51,"^F",100,536870919]],["^15",[51,"^X",27,536870919]],["^15",[51,"^V",80,536870919]],["^15",[51,"^U",27,536870919]],["^15",[51,"^;","~u65410d7a-7cca-482e-9427-cf43321beec2",536870919]],["^15",[52,"^Q","assegna ad un attributo un nome da te indicato",536870919]],["^15",[52,"^O","^16",536870919]],["^15",[52,"^F",335,536870919]],["^15",[52,"^X",27,536870919]],["^15",[52,"^V",335,536870919]],["^15",[52,"^U",27,536870919]],["^15",[52,"^;","~u65410d7a-2228-4c29-b28f-d3ff7ce0384e",536870919]],["^15",[53,"^Q","~```c#\nvar x = condition ? true : false;\n```",536870919]],["^15",[53,"^O","^16",536870919]],["^15",[53,"^F",70,536870919]],["^15",[53,"^X",27,536870919]],["^15",[53,"^V",319,536870919]],["^15",[53,"^U",27,536870919]],["^15",[53,"^;","~u65410d7a-e7f0-4b6a-bef5-9442776d2a8d",536870919]],["^15",[54,"^Q","~```C#\ninternal string EncryptString(string s)\n{\n\tStringBuilder strB = new();\n\ttry\n    {\n\t\tSHA256 sha256 = SHA256.Create();\n\t\tbyte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(s)); \n\n\t\tfor (int i = 0; i < bytes.Length; i++)\n        \t//c2 serve per convertire in HEX\n\t\t\tstrB.Append(bytes[i].ToString(\"x2\")); \n    }\n\tcatch (System.Exception)\n\t{\n\t\tthrow;\n\t}\n    return strB.ToString();\n}\n```",536870919]],["^15",[54,"^O","^16",536870919]],["^15",[54,"^F",131,536870919]],["^15",[54,"^X",27,536870919]],["^15",[54,"^V",131,536870919]],["^15",[54,"^U",27,536870919]],["^15",[54,"^;","~u65410d7a-49cf-42b1-82ab-6891711832b4",536870919]],["^15",[55,"^Q","accettano *null* come valore",536870919]],["^15",[55,"^O","^16",536870919]],["^15",[55,"^F",181,536870919]],["^15",[55,"^X",27,536870919]],["^15",[55,"^V",181,536870919]],["^15",[55,"^U",27,536870919]],["^15",[55,"^;","~u65410d7a-1eeb-42ec-b3c3-61dfc589f7f7",536870919]],["^15",[56,"^M",true,536870919]],["^15",[56,"^Q","conversione da file JSON a lista di oggetti\ncollapsed:: true",536870919]],["^15",[56,"^O","^16",536870919]],["^15",[56,"^F",209,536870919]],["^15",[56,"^X",27,536870919]],["^15",[56,"^V",345,536870919]],["^15",[56,"^U",27,536870919]],["^15",[56,"^?",["^ "],536870927]],["^15",[56,"^J",[],536870927]],["^15",[56,"^4",["^ "],536870927]],["^15",[56,"^;","~u65410d7a-15b6-4245-8dc0-7fe1dc0638e1",536870919]],["^15",[57,"^Q","~```C#\ninternal void SetVar(type Var) => this.Var = Var; //lambda method\ninternal void SetVar(type Var){\t\t\t\t\t  //metodo esteso\n  //controlli\n  this.Var = Var;\n}\n```",536870919]],["^15",[57,"^O","^16",536870919]],["^15",[57,"^F",227,536870919]],["^15",[57,"^X",27,536870919]],["^15",[57,"^V",339,536870919]],["^15",[57,"^U",27,536870919]],["^15",[57,"^;","~u65410d7a-471b-4568-a121-f870ff772d9c",536870919]],["^15",[58,"^Q","è possibile implementarla in questo modo:",536870919]],["^15",[58,"^O","^16",536870919]],["^15",[58,"^F",273,536870919]],["^15",[58,"^X",27,536870919]],["^15",[58,"^V",80,536870919]],["^15",[58,"^U",27,536870919]],["^15",[58,"^;","~u65410d7a-7540-4ccf-b3e4-e7a108803002",536870919]],["^15",[59,"^M",true,536870919]],["^15",[59,"^Q","*extention method*\ncollapsed:: true",536870919]],["^15",[59,"^O","^16",536870919]],["^15",[59,"^F",148,536870919]],["^15",[59,"^X",27,536870919]],["^15",[59,"^V",197,536870919]],["^15",[59,"^U",27,536870919]],["^15",[59,"^?",["^ "],536870927]],["^15",[59,"^J",[],536870927]],["^15",[59,"^4",["^ "],536870927]],["^15",[59,"^;","~u65410d7a-631b-4f3e-b2e1-2e3717ffdf5a",536870919]],["^15",[60,"^M",true,536870919]],["^15",[60,"^Q","con il metodo `WriteLine` è possibile scrivere una riga su un flusso di byte\ncollapsed:: true",536870919]],["^15",[60,"^O","^16",536870919]],["^15",[60,"^F",355,536870919]],["^15",[60,"^X",27,536870919]],["^15",[60,"^V",355,536870919]],["^15",[60,"^U",27,536870919]],["^15",[60,"^?",["^ "],536870927]],["^15",[60,"^J",[],536870927]],["^15",[60,"^4",["^ "],536870927]],["^15",[60,"^;","~u65410d7a-026b-4b44-887a-640aa0223dd3",536870919]],["^15",[61,"^M",true,536870919]],["^15",[61,"^Q","*operatore di null coalescing*\ncollapsed:: true",536870919]],["^15",[61,"^O","^16",536870919]],["^15",[61,"^F",319,536870919]],["^15",[61,"^X",27,536870919]],["^15",[61,"^V",197,536870919]],["^15",[61,"^U",27,536870919]],["^15",[61,"^?",["^ "],536870927]],["^15",[61,"^J",[],536870927]],["^15",[61,"^4",["^ "],536870927]],["^15",[61,"^;","~u65410d7a-116a-46cc-93ad-5f242352ee29",536870919]],["^15",[62,"^M",true,536870919]],["^15",[62,"^Q","*linQ*\ncollapsed:: true",536870919]],["^15",[62,"^O","^16",536870919]],["^15",[62,"^F",128,536870919]],["^15",[62,"^X",27,536870919]],["^15",[62,"^V",291,536870919]],["^15",[62,"^U",27,536870919]],["^15",[62,"^?",["^ "],536870927]],["^15",[62,"^J",[],536870927]],["^15",[62,"^4",["^ "],536870927]],["^15",[62,"^;","~u65410d7a-38c6-4247-8057-0197e6aad750",536870919]],["^15",[63,"^Q","~```C#\nvar x = obj?.attr;\n```",536870919]],["^15",[63,"^O","^16",536870919]],["^15",[63,"^F",47,536870919]],["^15",[63,"^X",27,536870919]],["^15",[63,"^V",73,536870919]],["^15",[63,"^U",27,536870919]],["^15",[63,"^;","~u65410d7a-7e87-4997-a8d9-d8a602ad3abe",536870919]],["^15",[64,"^M",true,536870919]],["^15",[64,"^Q","in C# per lavorare con i JSON sarà necessario importare la libreria Newtonsoft.Json\ncollapsed:: true",536870919]],["^15",[64,"^O","^16",536870919]],["^15",[64,"^F",50,536870919]],["^15",[64,"^X",27,536870919]],["^15",[64,"^V",412,536870927]],["^15",[64,"^U",27,536870919]],["^15",[64,"^?",["^ "],536870927]],["^15",[64,"^J",[],536870927]],["^15",[64,"^4",["^ "],536870927]],["^15",[64,"^;","~u65410d7a-8035-4c86-8ab0-9ce9e6f36fc5",536870919]],["^15",[65,"^M",true,536870919]],["^15",[65,"^Q","*cicli*\ncollapsed:: true",536870919]],["^15",[65,"^O","^16",536870919]],["^15",[65,"^F",360,536870919]],["^15",[65,"^X",27,536870919]],["^15",[65,"^V",197,536870919]],["^15",[65,"^U",27,536870919]],["^15",[65,"^?",["^ "],536870927]],["^15",[65,"^J",[],536870927]],["^15",[65,"^4",["^ "],536870927]],["^15",[65,"^;","~u65410d7a-387b-4383-b989-ab866442f069",536870919]],["^15",[66,"^M",true,536870919]],["^15",[66,"^Q","con `linQ` è possibile fare delle qeury alle liste\ncollapsed:: true",536870919]],["^15",[66,"^O","^16",536870919]],["^15",[66,"^F",62,536870919]],["^15",[66,"^X",27,536870919]],["^15",[66,"^V",62,536870919]],["^15",[66,"^U",27,536870919]],["^15",[66,"^?",["^ "],536870927]],["^15",[66,"^J",[],536870927]],["^15",[66,"^4",["^ "],536870927]],["^15",[66,"^;","~u65410d7a-10ef-484c-b054-7a6fa264aed1",536870919]],["^15",[67,"^M",true,536870919]],["^15",[67,"^Q","~`public`\nid:: 6527a3c5-433a-4828-9a12-ca4f72d023cb\ncollapsed:: true",536870919]],["^15",[67,"^O","^16",536870919]],["^15",[67,"^F",232,536870919]],["^15",[67,"^X",27,536870919]],["^15",[67,"^V",232,536870919]],["^15",[67,"^U",27,536870919]],["^15",[67,"^?",["^ ","~:id","6527a3c5-433a-4828-9a12-ca4f72d023cb"],536870927]],["^15",[67,"^J",["^1:"],536870927]],["^15",[67,"^4",["^ ","^1:","6527a3c5-433a-4828-9a12-ca4f72d023cb"],536870927]],["^15",[67,"^;","~u6527a3c5-433a-4828-9a12-ca4f72d023cb",536870919]],["^15",[68,"^Q","dice che quell'attributo può avere una lunghezza massima di tot caratteri",536870919]],["^15",[68,"^O","^16",536870919]],["^15",[68,"^F",223,536870919]],["^15",[68,"^X",27,536870919]],["^15",[68,"^V",223,536870919]],["^15",[68,"^U",27,536870919]],["^15",[68,"^;","~u65410d7a-db97-4b08-918f-0738f2f320c0",536870919]],["^15",[69,"^M",true,536870935]],["^15",[69,"^Q","**TIPI**\ncollapsed:: true",536870927]],["^15",[69,"^O","^16",536870919]],["^15",[69,"^F",291,536870919]],["^15",[69,"^X",27,536870919]],["^15",[69,"^V",290,536870919]],["^15",[69,"^U",27,536870919]],["^15",[69,"^?",["^ "],536870927]],["^15",[69,"^J",[],536870927]],["^15",[69,"^4",["^ "],536870927]],["^15",[69,"^;","~u65410d7a-b380-4e72-9343-04aadc9d696c",536870919]],["^15",[70,"^M",true,536870919]],["^15",[70,"^Q","si chiama ternario perchè è composto da tre parti:\ncollapsed:: true",536870919]],["^15",[70,"^O","^16",536870919]],["^15",[70,"^F",37,536870919]],["^15",[70,"^X",27,536870919]],["^15",[70,"^V",319,536870919]],["^15",[70,"^U",27,536870919]],["^15",[70,"^?",["^ "],536870927]],["^15",[70,"^J",[],536870927]],["^15",[70,"^4",["^ "],536870927]],["^15",[70,"^;","~u65410d7a-d89e-4050-a32a-4fbb21f92337",536870919]],["^15",[71,"^Q","a capo",536870919]],["^15",[71,"^O","^16",536870919]],["^15",[71,"^F",115,536870919]],["^15",[71,"^X",27,536870919]],["^15",[71,"^V",115,536870919]],["^15",[71,"^U",27,536870919]],["^15",[71,"^;","~u65410d7a-9fc2-4a86-beea-c88d3fca9c31",536870919]],["^15",[72,"^Q","SHA\nlogseq.order-list-type:: number",536870919]],["^15",[72,"^O","^16",536870919]],["^15",[72,"^F",49,536870919]],["^15",[72,"^X",27,536870919]],["^15",[72,"^V",49,536870919]],["^15",[72,"^U",27,536870919]],["^15",[72,"^?",["^ ","^19","number"],536870927]],["^15",[72,"^J",["^19"],536870927]],["^15",[72,"^4",["^ ","^19","number"],536870927]],["^15",[72,"^;","~u65410d7a-c387-42d2-b4ee-9c406c5b4a2b",536870919]],["^15",[73,"^M",true,536870919]],["^15",[73,"^Q","*operatore di null conditional*\ncollapsed:: true",536870919]],["^15",[73,"^O","^16",536870919]],["^15",[73,"^F",61,536870919]],["^15",[73,"^X",27,536870919]],["^15",[73,"^V",197,536870919]],["^15",[73,"^U",27,536870919]],["^15",[73,"^?",["^ "],536870927]],["^15",[73,"^J",[],536870927]],["^15",[73,"^4",["^ "],536870927]],["^15",[73,"^;","~u65410d7a-a4ba-4c29-aa5d-20f1fa792711",536870919]],["^15",[74,"^Q","una tupla non è dinamica quindi non sarà possibile aggiungere elementi in seguito",536870919]],["^15",[74,"^O","^16",536870919]],["^15",[74,"^F",328,536870919]],["^15",[74,"^X",27,536870919]],["^15",[74,"^V",328,536870919]],["^15",[74,"^U",27,536870919]],["^15",[74,"^;","~u65410d7a-eeee-4c54-980d-9fe9dd1d40cc",536870919]],["^15",[75,"^M",true,536870919]],["^15",[75,"^Q","**PROPRIETÀ**\ncollapsed:: true",536870919]],["^15",[75,"^O","^16",536870919]],["^15",[75,"^F",86,536870919]],["^15",[75,"^X",27,536870919]],["^15",[75,"^V",135,536870919]],["^15",[75,"^U",27,536870919]],["^15",[75,"^?",["^ "],536870927]],["^15",[75,"^J",[],536870927]],["^15",[75,"^4",["^ "],536870927]],["^15",[75,"^;","~u65410d7a-902b-4aee-86c7-24d11c9b6293",536870919]],["^15",[76,"^Q","il costruttore di una classe è il primo metodo a venir eseguito e viene eseguito in automatico nel momento del richiamo della new();",536870919]],["^15",[76,"^O","^16",536870919]],["^15",[76,"^F",39,536870919]],["^15",[76,"^X",27,536870919]],["^15",[76,"^V",39,536870919]],["^15",[76,"^U",27,536870919]],["^15",[76,"^;","~u65410d7a-9c32-4eab-8edf-9b7f618c44ba",536870919]],["^15",[77,"^Q","~```C#\nprivate void func() {\n  //più istruzioni\n}\n```",536870919]],["^15",[77,"^O","^16",536870919]],["^15",[77,"^F",282,536870919]],["^15",[77,"^X",27,536870919]],["^15",[77,"^V",266,536870919]],["^15",[77,"^U",27,536870919]],["^15",[77,"^;","~u65410d7a-b79a-4424-acf4-1a4bcb6ecc24",536870919]],["^15",[78,"^Q","~```C#\nclass Name\n{\n  public int n {get; private set;};\n}\n```",536870919]],["^15",[78,"^O","^16",536870919]],["^15",[78,"^F",281,536870919]],["^15",[78,"^X",27,536870919]],["^15",[78,"^V",210,536870919]],["^15",[78,"^U",27,536870919]],["^15",[78,"^;","~u65410d7a-449e-4ac2-9e71-0bad12d3b00e",536870919]],["^15",[79,"^M",true,536870919]],["^15",[79,"^Q","**DATA SERIALIZATION**",536870927]],["^15",[79,"^O","^16",536870919]],["^15",[79,"^F",300,536870919]],["^15",[79,"^X",27,536870919]],["^15",[79,"^V",290,536870919]],["^15",[79,"^U",27,536870919]],["^15",[79,"^;","~u65410d7a-c933-4498-817f-eae5ca293925",536870919]],["^15",[80,"^M",true,536870919]],["^15",[80,"^Q","*singleton*\ncollapsed:: true",536870919]],["^15",[80,"^O","^16",536870919]],["^15",[80,"^F",105,536870919]],["^15",[80,"^X",27,536870919]],["^15",[80,"^V",86,536870919]],["^15",[80,"^U",27,536870919]],["^15",[80,"^?",["^ "],536870927]],["^15",[80,"^J",[],536870927]],["^15",[80,"^4",["^ "],536870927]],["^15",[80,"^;","~u65410d7a-dd9a-4eed-aaaa-087d1ca3e453",536870919]],["^15",[81,"^M",true,536870919]],["^15",[81,"^Q","**non-nullable**\ncollapsed:: true",536870919]],["^15",[81,"^O","^16",536870919]],["^15",[81,"^F",181,536870919]],["^15",[81,"^X",27,536870919]],["^15",[81,"^V",360,536870919]],["^15",[81,"^U",27,536870919]],["^15",[81,"^?",["^ "],536870927]],["^15",[81,"^J",[],536870927]],["^15",[81,"^4",["^ "],536870927]],["^15",[81,"^;","~u65410d7a-55c2-4996-8770-cdfa4d07e63b",536870919]],["^15",[82,"^Q","i getter e setter sono metodi che permettono di accedere a degli attributi della classe privati anche dall'esterno, al suo interno è possibile effettuare controlli o gestire i dati.",536870919]],["^15",[82,"^O","^16",536870919]],["^15",[82,"^F",220,536870919]],["^15",[82,"^X",27,536870919]],["^15",[82,"^V",220,536870919]],["^15",[82,"^U",27,536870919]],["^15",[82,"^;","~u65410d7a-a136-4b54-a957-a12a11519eb8",536870919]],["^15",[84,"^M",true,536870919]],["^15",[84,"^Q","~`\\v`\ncollapsed:: true",536870919]],["^15",[84,"^O","^16",536870919]],["^15",[84,"^F",165,536870919]],["^15",[84,"^X",27,536870919]],["^15",[84,"^V",265,536870919]],["^15",[84,"^U",27,536870919]],["^15",[84,"^?",["^ "],536870927]],["^15",[84,"^J",[],536870927]],["^15",[84,"^4",["^ "],536870927]],["^15",[84,"^;","~u65410d7a-6215-4caf-8389-316fb5466da3",536870919]],["^15",[86,"^M",true,536870919]],["^15",[86,"^Q","**SINTASSI**\ncollapsed:: true",536870919]],["^15",[86,"^O","^16",536870919]],["^15",[86,"^F",117,536870919]],["^15",[86,"^X",27,536870919]],["^15",[86,"^V",135,536870919]],["^15",[86,"^U",27,536870919]],["^15",[86,"^?",["^ "],536870927]],["^15",[86,"^J",[],536870927]],["^15",[86,"^4",["^ "],536870927]],["^15",[86,"^;","~u65410d7a-15ae-4278-b295-9aeee8f28747",536870919]],["^15",[87,"^Q","non accettano *null* come valore",536870919]],["^15",[87,"^O","^16",536870919]],["^15",[87,"^F",81,536870919]],["^15",[87,"^X",27,536870919]],["^15",[87,"^V",81,536870919]],["^15",[87,"^U",27,536870919]],["^15",[87,"^;","~u65410d7a-f637-4179-87cd-7a2ffa80c526",536870919]],["^15",[88,"^Q","questo è possibile usando un `Salt` una serie di bytes generati randomicamente inseriti nella frase che permettono quindi di generare un HASH sempre diversa",536870919]],["^15",[88,"^O","^16",536870919]],["^15",[88,"^F",216,536870919]],["^15",[88,"^X",27,536870919]],["^15",[88,"^V",216,536870919]],["^15",[88,"^U",27,536870919]],["^15",[88,"^;","~u65410d7a-3dec-406b-98b5-26ce1587de68",536870919]],["^15",[89,"^Q","~```C#\ninternal void test(ref int n){\n      \n}\n```",536870919]],["^15",[89,"^O","^16",536870919]],["^15",[89,"^F",98,536870919]],["^15",[89,"^X",27,536870919]],["^15",[89,"^V",148,536870919]],["^15",[89,"^U",27,536870919]],["^15",[89,"^;","~u65410d7a-26e8-4df9-9d67-49a1a5eafbc5",536870919]],["^15",[90,"^Q","return true\nlogseq.order-list-type:: number",536870919]],["^15",[90,"^O","^16",536870919]],["^15",[90,"^F",40,536870919]],["^15",[90,"^X",27,536870919]],["^15",[90,"^V",70,536870919]],["^15",[90,"^U",27,536870919]],["^15",[90,"^?",["^ ","^19","number"],536870927]],["^15",[90,"^J",["^19"],536870927]],["^15",[90,"^4",["^ ","^19","number"],536870927]],["^15",[90,"^;","~u65410d7a-3de7-4c6f-bea5-2c752b15a776",536870919]],["^15",[91,"^Q","~```C#\nValidationContext context = new(MyObj);\n```",536870919]],["^15",[91,"^O","^16",536870919]],["^15",[91,"^F",239,536870919]],["^15",[91,"^X",27,536870919]],["^15",[91,"^V",239,536870919]],["^15",[91,"^U",27,536870919]],["^15",[91,"^;","~u65410d7a-8036-401f-aac1-f6b4b8dd1d1f",536870919]],["^15",[92,"^Q","~```C#\nif(condition){\n  //istruzione\n}else if(condition 2){\n  //istruzuone\n}else{\n  //istruzione\n}\n```",536870919]],["^15",[92,"^O","^16",536870919]],["^15",[92,"^F",344,536870919]],["^15",[92,"^X",27,536870919]],["^15",[92,"^V",302,536870919]],["^15",[92,"^U",27,536870919]],["^15",[92,"^;","~u65410d7a-1e2e-49e9-84b6-92b4011dbe70",536870919]],["^15",[93,"^Q","~```C#\nusing(StreamReader sr = new(\"Path/to/JSON\")\n{\n\tfJson = sr.ReadToEnd();\n}\n```",536870919]],["^15",[93,"^O","^16",536870919]],["^15",[93,"^F",209,536870919]],["^15",[93,"^X",27,536870919]],["^15",[93,"^V",209,536870919]],["^15",[93,"^U",27,536870919]],["^15",[93,"^;","~u65410d7a-a8ef-4abe-9293-98b9c8889d7f",536870919]],["^15",[94,"^Q","~```C#\nConsole.ReadLine();\nSystem.Console.ReadLine();\n```",536870919]],["^15",[94,"^O","^16",536870919]],["^15",[94,"^F",306,536870919]],["^15",[94,"^X",27,536870919]],["^15",[94,"^V",267,536870919]],["^15",[94,"^U",27,536870919]],["^15",[94,"^;","~u65410d7a-17e0-473f-be6f-0ad9c4283a6f",536870919]],["^15",[95,"^M",true,536870919]],["^15",[95,"^Q","*metodo generico*\ncollapsed:: true",536870919]],["^15",[95,"^O","^16",536870919]],["^15",[95,"^F",59,536870919]],["^15",[95,"^X",27,536870919]],["^15",[95,"^V",197,536870919]],["^15",[95,"^U",27,536870919]],["^15",[95,"^?",["^ "],536870927]],["^15",[95,"^J",[],536870927]],["^15",[95,"^4",["^ "],536870927]],["^15",[95,"^;","~u65410d7a-dbc2-4f1b-8be4-f19fbb828eba",536870919]],["^15",[96,"^Q","~```C#\nstring fData = sr.ReadLine();\n```",536870919]],["^15",[96,"^O","^16",536870919]],["^15",[96,"^F",41,536870919]],["^15",[96,"^X",27,536870919]],["^15",[96,"^V",41,536870919]],["^15",[96,"^U",27,536870919]],["^15",[96,"^;","~u65410d7a-fab8-47ad-a125-baf949f3ed60",536870919]],["^15",[97,"^M",true,536870919]],["^15",[97,"^Q","deserializzare una serie di oggetti da XML ad object\ncollapsed:: true",536870919]],["^15",[97,"^O","^16",536870919]],["^15",[97,"^F",33,536870919]],["^15",[97,"^X",27,536870919]],["^15",[97,"^V",33,536870919]],["^15",[97,"^U",27,536870919]],["^15",[97,"^?",["^ "],536870927]],["^15",[97,"^J",[],536870927]],["^15",[97,"^4",["^ "],536870927]],["^15",[97,"^;","~u65410d7a-fa90-4205-9364-5d7f9254d851",536870919]],["^15",[98,"^Q","quando viene modificata una variabile passata per referenza verrà modificata anche all'esterno della funzione dove viene modificata",536870919]],["^15",[98,"^O","^16",536870919]],["^15",[98,"^F",244,536870919]],["^15",[98,"^X",27,536870919]],["^15",[98,"^V",148,536870919]],["^15",[98,"^U",27,536870919]],["^15",[98,"^;","~u65410d7a-f627-4d71-96ee-a396719992fa",536870919]],["^15",[99,"^M",true,536870919]],["^15",[99,"^Q","*data annotation*\ncollapsed:: true",536870919]],["^15",[99,"^O","^16",536870919]],["^15",[99,"^F",95,536870919]],["^15",[99,"^X",27,536870919]],["^15",[99,"^V",197,536870919]],["^15",[99,"^U",27,536870919]],["^15",[99,"^?",["^ "],536870927]],["^15",[99,"^J",[],536870927]],["^15",[99,"^4",["^ "],536870927]],["^15",[99,"^;","~u65410d7a-06cc-43bf-bea5-d7aa4549e413",536870919]],["^15",[100,"^Q","~```C#\ninternal class SingletonClass  \n{\n    private static SingletonClass? _instance;\n\n    public static SingletonClass Instance() =>\n    \t_instance ??= new();\n}\n```",536870919]],["^15",[100,"^O","^16",536870919]],["^15",[100,"^F",58,536870919]],["^15",[100,"^X",27,536870919]],["^15",[100,"^V",80,536870919]],["^15",[100,"^U",27,536870919]],["^15",[100,"^;","~u65410d7a-18cf-4f96-94b9-e7bc11d96056",536870919]],["^15",[101,"^Q","((6527a3c5-a0cc-4dc1-b90b-a7b028625423))",536870919]],["^15",[101,"^O","^16",536870919]],["^15",[101,"^F",117,536870919]],["^15",[101,"^X",27,536870919]],["^15",[101,"^V",117,536870919]],["^15",[101,"^U",27,536870919]],["^15",[101,"^H",232,536870927]],["^15",[101,"^;","~u65410d7a-ce4d-4037-a065-dee3492e9679",536870919]],["^15",[102,"^Q","~```C#\ninternal static void MetodoGenerico<T>() where T: Enum\n{\n\t//codice\n    //questo metodo accetta come parametro solo un Enum\n}\n```",536870919]],["^15",[102,"^O","^16",536870919]],["^15",[102,"^F",242,536870919]],["^15",[102,"^X",27,536870919]],["^15",[102,"^V",95,536870919]],["^15",[102,"^U",27,536870919]],["^15",[102,"^;","~u65410d7a-e87e-4314-94f4-e1491500d984",536870919]],["^15",[103,"^M",true,536870919]],["^15",[103,"^Q","ritorna la posizione del cursore\ncollapsed:: true",536870919]],["^15",[103,"^O","^16",536870919]],["^15",[103,"^F",370,536870919]],["^15",[103,"^X",27,536870919]],["^15",[103,"^V",185,536870919]],["^15",[103,"^U",27,536870919]],["^15",[103,"^?",["^ "],536870927]],["^15",[103,"^J",[],536870927]],["^15",[103,"^4",["^ "],536870927]],["^15",[103,"^;","~u65410d7a-07fb-4fe6-a02b-3612a6106b4e",536870919]],["^15",[104,"^Q","~```C#\nConsole.Error.WriteLine(\"...\");\nSystem.Console.Error.WriteLine(\"...\");\n```",536870919]],["^15",[104,"^O","^16",536870919]],["^15",[104,"^F",170,536870919]],["^15",[104,"^X",27,536870919]],["^15",[104,"^V",170,536870919]],["^15",[104,"^U",27,536870919]],["^15",[104,"^;","~u65410d7a-47b8-4a8e-84b4-6874a6bdd12d",536870919]],["^15",[105,"^M",true,536870919]],["^15",[105,"^Q","*interface*\ncollapsed:: true",536870919]],["^15",[105,"^O","^16",536870919]],["^15",[105,"^F",220,536870919]],["^15",[105,"^X",27,536870919]],["^15",[105,"^V",86,536870919]],["^15",[105,"^U",27,536870919]],["^15",[105,"^?",["^ "],536870927]],["^15",[105,"^J",[],536870927]],["^15",[105,"^4",["^ "],536870927]],["^15",[105,"^;","~u65410d7a-6921-43bd-b4ee-35120eed77ab",536870919]],["^15",[106,"^Q","un `interface` in C# permette di salvare al suo interno le firme di metodi che poi dovranno essere implementati.",536870919]],["^15",[106,"^O","^16",536870919]],["^15",[106,"^F",105,536870919]],["^15",[106,"^X",27,536870919]],["^15",[106,"^V",105,536870919]],["^15",[106,"^U",27,536870919]],["^15",[106,"^;","~u65410d7a-d45f-481e-b157-8fa3f8e29e08",536870919]],["^15",[107,"^Q","~```C#\nint? = 0;\n```",536870919]],["^15",[107,"^O","^16",536870919]],["^15",[107,"^F",55,536870919]],["^15",[107,"^X",27,536870919]],["^15",[107,"^V",181,536870919]],["^15",[107,"^U",27,536870919]],["^15",[107,"^;","~u65410d7a-bdd9-43cf-9faa-6d7e83d2bc09",536870919]],["^15",[108,"^Q","AND",536870919]],["^15",[108,"^O","^16",536870919]],["^15",[108,"^F",277,536870919]],["^15",[108,"^X",27,536870919]],["^15",[108,"^V",277,536870919]],["^15",[108,"^U",27,536870919]],["^15",[108,"^;","~u65410d7a-7e60-4261-8d5e-282b220d9113",536870919]],["^15",[109,"^M",true,536870919]],["^15",[109,"^Q","**lambda operator**\ncollapsed:: true",536870919]],["^15",[109,"^O","^16",536870919]],["^15",[109,"^F",246,536870919]],["^15",[109,"^X",27,536870919]],["^15",[109,"^V",235,536870919]],["^15",[109,"^U",27,536870919]],["^15",[109,"^?",["^ "],536870927]],["^15",[109,"^J",[],536870927]],["^15",[109,"^4",["^ "],536870927]],["^15",[109,"^;","~u65410d7a-2283-4ba4-a983-4ed002a0d0e5",536870919]],["^15",[110,"^Q","Javascricp Script Object Notation",536870919]],["^15",[110,"^O","^16",536870919]],["^15",[110,"^F",412,536870927]],["^15",[110,"^X",27,536870919]],["^15",[110,"^V",412,536870927]],["^15",[110,"^U",27,536870919]],["^15",[110,"^;","~u65410d7a-b891-4007-b60a-a9c8d3f99857",536870919]],["^15",[111,"^Q","il modificatore abstract può essere usato su classi, metodi, e attributi, indicizzatori ed eventi",536870919]],["^15",[111,"^O","^16",536870919]],["^15",[111,"^F",330,536870919]],["^15",[111,"^X",27,536870919]],["^15",[111,"^V",144,536870919]],["^15",[111,"^U",27,536870919]],["^15",[111,"^;","~u65410d7a-dfa5-4977-847b-962590f79843",536870919]],["^15",[112,"^Q","sarà quindi necessario salvarci anche il primo `Salt` per poterlo riutilizzare per generare una sequenza di byte identica a quella dell'HASH precedente.",536870919]],["^15",[112,"^O","^16",536870919]],["^15",[112,"^F",324,536870919]],["^15",[112,"^X",27,536870919]],["^15",[112,"^V",324,536870919]],["^15",[112,"^U",27,536870919]],["^15",[112,"^;","~u65410d7a-4703-45bb-aa3e-21ad0f739af5",536870919]],["^15",[113,"^Q","~```C#\nObject obj = new(paramtri);\n```",536870919]],["^15",[113,"^O","^16",536870919]],["^15",[113,"^F",159,536870919]],["^15",[113,"^X",27,536870919]],["^15",[113,"^V",159,536870919]],["^15",[113,"^U",27,536870919]],["^15",[113,"^;","~u65410d7a-107b-4396-bfe1-2da472c548d2",536870919]],["^15",[114,"^Q","~```C#\nvar x = operandoSinistro ?? valorePredefiito\n```",536870919]],["^15",[114,"^O","^16",536870919]],["^15",[114,"^F",173,536870919]],["^15",[114,"^X",27,536870919]],["^15",[114,"^V",61,536870919]],["^15",[114,"^U",27,536870919]],["^15",[114,"^;","~u65410d7a-3d05-4372-8094-44d5a4b51c26",536870919]],["^15",[115,"^M",true,536870919]],["^15",[115,"^Q","~`\\n`\ncollapsed:: true",536870919]],["^15",[115,"^O","^16",536870919]],["^15",[115,"^F",166,536870919]],["^15",[115,"^X",27,536870919]],["^15",[115,"^V",265,536870919]],["^15",[115,"^U",27,536870919]],["^15",[115,"^?",["^ "],536870927]],["^15",[115,"^J",[],536870927]],["^15",[115,"^4",["^ "],536870927]],["^15",[115,"^;","~u65410d7a-9d94-4ad6-9c58-57bee9fed398",536870919]],["^15",[116,"^M",true,536870919]],["^15",[116,"^Q","*attributi*\ncollapsed:: true",536870919]],["^15",[116,"^O","^16",536870919]],["^15",[116,"^F",39,536870919]],["^15",[116,"^X",27,536870919]],["^15",[116,"^V",86,536870919]],["^15",[116,"^U",27,536870919]],["^15",[116,"^?",["^ "],536870927]],["^15",[116,"^J",[],536870927]],["^15",[116,"^4",["^ "],536870927]],["^15",[116,"^;","~u65410d7a-a617-40b3-a133-3aca9edf640e",536870919]],["^15",[117,"^M",true,536870919]],["^15",[117,"^Q","**MODIFICATORI DI VISIBILITÀ**\ncollapsed:: true",536870919]],["^15",[117,"^O","^16",536870919]],["^15",[117,"^F",135,536870919]],["^15",[117,"^X",27,536870919]],["^15",[117,"^V",135,536870919]],["^15",[117,"^U",27,536870919]],["^15",[117,"^?",["^ "],536870927]],["^15",[117,"^J",[],536870927]],["^15",[117,"^4",["^ "],536870927]],["^15",[117,"^;","~u65410d7a-afa3-4260-988d-fd4020a6aedf",536870919]],["^15",[118,"^Q","ogni oggetto deve avere gli stessi attributi pubblici che sono presenti nel JSON",536870919]],["^15",[118,"^O","^16",536870919]],["^15",[118,"^F",315,536870919]],["^15",[118,"^X",27,536870919]],["^15",[118,"^V",315,536870919]],["^15",[118,"^U",27,536870919]],["^15",[118,"^;","~u65410d7a-d568-4ef1-b58f-1d86b0323b54",536870919]],["^15",[119,"^M",true,536870919]],["^15",[119,"^Q","~`protected`\nid:: 6527a3c5-6960-4bb4-a454-0984dbb36549\ncollapsed:: true",536870919]],["^15",[119,"^O","^16",536870919]],["^15",[119,"^F",253,536870919]],["^15",[119,"^X",27,536870919]],["^15",[119,"^V",232,536870919]],["^15",[119,"^U",27,536870919]],["^15",[119,"^?",["^ ","^1:","6527a3c5-6960-4bb4-a454-0984dbb36549"],536870927]],["^15",[119,"^J",["^1:"],536870927]],["^15",[119,"^4",["^ ","^1:","6527a3c5-6960-4bb4-a454-0984dbb36549"],536870927]],["^15",[119,"^;","~u6527a3c5-6960-4bb4-a454-0984dbb36549",536870919]],["^15",[120,"^Q","~```C#\npublic class Name\n{\n  int x {get; set;} = 0;\n}\n```",536870919]],["^15",[120,"^O","^16",536870919]],["^15",[120,"^F",222,536870919]],["^15",[120,"^X",27,536870919]],["^15",[120,"^V",116,536870919]],["^15",[120,"^U",27,536870919]],["^15",[120,"^;","~u65410d7a-921a-4973-93ce-930166ac5bee",536870919]],["^15",[121,"^M",false,536870941]],["^15",[121,"^Q","*dictionary*\ncollapsed:: true",536870919]],["^15",[121,"^O","^16",536870919]],["^15",[121,"^F",187,536870919]],["^15",[121,"^X",27,536870919]],["^15",[121,"^V",291,536870919]],["^15",[121,"^U",27,536870919]],["^15",[121,"^?",["^ "],536870927]],["^15",[121,"^J",[],536870927]],["^15",[121,"^4",["^ "],536870927]],["^15",[121,"^;","~u65410d7a-d0a1-4d23-af3a-6f169ca2e550",536870919]],["^15",[122,"^M",true,536870919]],["^15",[122,"^Q","permette di andare in lettura su un file XML ed appendere al suo interno degli oggetti\ncollapsed:: true",536870919]],["^15",[122,"^O","^16",536870919]],["^15",[122,"^F",218,536870919]],["^15",[122,"^X",27,536870919]],["^15",[122,"^V",218,536870919]],["^15",[122,"^U",27,536870919]],["^15",[122,"^?",["^ "],536870927]],["^15",[122,"^J",[],536870927]],["^15",[122,"^4",["^ "],536870927]],["^15",[122,"^;","~u65410d7a-3a7f-4f45-b4f3-12abcaf1f427",536870919]],["^15",[123,"^Q","~```C#\ntype[] Var = new type[lenght]\nVar[n] //permette di accedere ad una certa posizione dell'array\n```",536870919]],["^15",[123,"^O","^16",536870919]],["^15",[123,"^F",193,536870919]],["^15",[123,"^X",27,536870919]],["^15",[123,"^V",331,536870919]],["^15",[123,"^U",27,536870919]],["^15",[123,"^;","~u65410d7a-c95b-4975-a675-1232a56a05ea",536870919]],["^15",[124,"^Q","un enumerator è una particolare struttura dati immutabile definito da un set di costanti che permette di definire un tipo di enumerazione",536870919]],["^15",[124,"^O","^16",536870919]],["^15",[124,"^F",180,536870919]],["^15",[124,"^X",27,536870919]],["^15",[124,"^V",180,536870919]],["^15",[124,"^U",27,536870919]],["^15",[124,"^;","~u65410d7a-3240-40c3-98bc-98778a018c3b",536870919]],["^15",[125,"^M",true,536870919]],["^15",[125,"^Q","*File*\ncollapsed:: true",536870919]],["^15",[125,"^O","^16",536870919]],["^15",[125,"^F",300,536870919]],["^15",[125,"^X",27,536870919]],["^15",[125,"^V",300,536870919]],["^15",[125,"^U",27,536870919]],["^15",[125,"^?",["^ "],536870927]],["^15",[125,"^J",[],536870927]],["^15",[125,"^4",["^ "],536870927]],["^15",[125,"^;","~u65410d7a-5058-4361-b6f8-378d75337696",536870919]],["^15",[126,"^M",true,536870919]],["^15",[126,"^Q","è possibile stampare una lista completa di tutto l'enumeratore in questo modo:\ncollapsed:: true",536870919]],["^15",[126,"^O","^16",536870919]],["^15",[126,"^F",190,536870919]],["^15",[126,"^X",27,536870919]],["^15",[126,"^V",180,536870919]],["^15",[126,"^U",27,536870919]],["^15",[126,"^?",["^ "],536870927]],["^15",[126,"^J",[],536870927]],["^15",[126,"^4",["^ "],536870927]],["^15",[126,"^;","~u65410d7a-5431-4ad8-9f3c-87a2a64bccd5",536870919]],["^15",[127,"^M",true,536870919]],["^15",[127,"^Q","serializzare una serie di oggetti da object a XML\ncollapsed:: true",536870919]],["^15",[127,"^O","^16",536870919]],["^15",[127,"^F",416,536870927]],["^15",[127,"^X",27,536870919]],["^15",[127,"^V",416,536870927]],["^15",[127,"^U",27,536870919]],["^15",[127,"^?",["^ "],536870927]],["^15",[127,"^J",[],536870927]],["^15",[127,"^4",["^ "],536870927]],["^15",[127,"^;","~u65410d7a-8590-48b7-ba96-5435a9eddc60",536870919]],["^15",[128,"^M",true,536870919]],["^15",[128,"^Q","*using*\ncollapsed:: true",536870919]],["^15",[128,"^O","^16",536870919]],["^15",[128,"^F",208,536870919]],["^15",[128,"^X",27,536870919]],["^15",[128,"^V",291,536870919]],["^15",[128,"^U",27,536870919]],["^15",[128,"^?",["^ "],536870927]],["^15",[128,"^J",[],536870927]],["^15",[128,"^4",["^ "],536870927]],["^15",[128,"^;","~u65410d7a-835c-4c75-935c-4b7ee89cc9c4",536870919]],["^15",[129,"^Q","~```C#\nXmlSerializer xml = new(MyObj.GetType());\nusing FileStream fs = new(\"Path/to/xml\", FileMode.Open);\nList<obj> result = xml.Deserialize(fs) as List<obj> ?? new();\n```",536870919]],["^15",[129,"^O","^16",536870919]],["^15",[129,"^F",97,536870919]],["^15",[129,"^X",27,536870919]],["^15",[129,"^V",97,536870919]],["^15",[129,"^U",27,536870919]],["^15",[129,"^;","~u65410d7a-f0d0-4b0c-b388-60fafaca6559",536870919]],["^15",[130,"^Q","~```C#\n//carico il mio file XML in un Xdocument\nXdocument xmlDoc = Xdocument.Load(\"Path/to/xml\");\n//creo l'elemento root\nXelement RootElement = new(MyObj.GetType());\n//creo l'elemento child e ci assegno un valore\nXelement ChildElement = new(\"name\");\nChildElement.Value = MyObj.getter ?? string.Empty;\n//appendo l'elemento al RootElement\nRootElement.Add(ChildElement);\n//appendo il RootElement al documento XML\nxmlDoc.Root.Add(RootElement);\n//salvo il documento\nmlDoc.Save(\"Path/to/xml\"); \t\n```",536870919]],["^15",[130,"^O","^16",536870919]],["^15",[130,"^F",122,536870919]],["^15",[130,"^X",27,536870919]],["^15",[130,"^V",122,536870919]],["^15",[130,"^U",27,536870919]],["^15",[130,"^;","~u65410d7a-8db3-41d0-9bdd-d7a283b88958",536870919]],["^15",[131,"^M",true,536870919]],["^15",[131,"^Q","utilizzando SHA e le sue derivanti è possibile estrarre un hash composta da meno o più bit in base a quale algoritmo si scelga.\ncollapsed:: true\nÈ possibile ricavare l'hash in questo modo:",536870919]],["^15",[131,"^O","^16",536870919]],["^15",[131,"^F",212,536870919]],["^15",[131,"^X",27,536870919]],["^15",[131,"^V",212,536870919]],["^15",[131,"^U",27,536870919]],["^15",[131,"^?",["^ "],536870927]],["^15",[131,"^J",[],536870927]],["^15",[131,"^4",["^ "],536870927]],["^15",[131,"^;","~u65410d7a-afa4-4743-9b08-84a4a14ea4ea",536870919]],["^15",[132,"^Q","~`=>`",536870919]],["^15",[132,"^O","^16",536870919]],["^15",[132,"^F",109,536870919]],["^15",[132,"^X",27,536870919]],["^15",[132,"^V",109,536870919]],["^15",[132,"^U",27,536870919]],["^15",[132,"^;","~u65410d7a-65e3-4ed5-bbb1-ec7c5bf2a60f",536870919]],["^15",[133,"^M",false,536870944]],["^15",[133,"^Q","un dictionary è una particolare collection caratterizzata dal fatto che può contenere un rapporto chiave-valore\ncollapsed:: true",536870919]],["^15",[133,"^O","^16",536870919]],["^15",[133,"^F",121,536870919]],["^15",[133,"^X",27,536870919]],["^15",[133,"^V",121,536870919]],["^15",[133,"^U",27,536870919]],["^15",[133,"^?",["^ "],536870927]],["^15",[133,"^J",[],536870927]],["^15",[133,"^4",["^ "],536870927]],["^15",[133,"^;","~u65410d7a-c7eb-47d1-bb58-42cd9ea1eeb0",536870919]],["^15",[134,"^Q","~```C#\nstring filtred = strList.Find(s => s.Contains(\"data\"));\n```",536870919]],["^15",[134,"^O","^16",536870919]],["^15",[134,"^F",325,536870919]],["^15",[134,"^X",27,536870919]],["^15",[134,"^V",238,536870919]],["^15",[134,"^U",27,536870919]],["^15",[134,"^;","~u65410d7a-88cf-431b-b956-9bb105525fee",536870919]],["^15",[135,"^Q","## OOP",536870919]],["^15",[135,"^O","^16",536870919]],["^15",[135,"^F",290,536870919]],["^15",[135,"^X",27,536870919]],["^15",[135,"^V",27,536870919]],["^15",[135,"^U",27,536870919]],["^15",[135,"^?",["^ ","~:heading",2],536870927]],["^15",[135,"^J",[],536870927]],["^15",[135,"^;","~u65410d7a-c8dc-430a-816c-fa9feee151d4",536870919]],["^15",[136,"^Q","~```C#\n[Required]\nreadonly string str;\n```",536870919]],["^15",[136,"^O","^16",536870919]],["^15",[136,"^F",336,536870919]],["^15",[136,"^X",27,536870919]],["^15",[136,"^V",366,536870919]],["^15",[136,"^U",27,536870919]],["^15",[136,"^;","~u65410d7a-35bf-46e5-a6fc-45f779cb8718",536870919]],["^15",[137,"^Q","~```C#\nforeach(string str in list){\n  //istruzioni\n}\n```",536870919]],["^15",[137,"^O","^16",536870919]],["^15",[137,"^F",199,536870919]],["^15",[137,"^X",27,536870919]],["^15",[137,"^V",140,536870919]],["^15",[137,"^U",27,536870919]],["^15",[137,"^;","~u65410d7a-df36-41b9-96ca-def59116a622",536870919]],["^15",[138,"^Q","~```C#\nConsole.WriteLine($\"...{var}...\")\n```",536870919]],["^15",[138,"^O","^16",536870919]],["^15",[138,"^F",154,536870919]],["^15",[138,"^X",27,536870919]],["^15",[138,"^V",154,536870919]],["^15",[138,"^U",27,536870919]],["^15",[138,"^;","~u65410d7a-8b8d-4f3b-8edf-4163a098bba9",536870919]],["^15",[139,"^Q","DateTime è un tipo di variabile che permette lo storage e i calcoli sulle date",536870919]],["^15",[139,"^O","^16",536870919]],["^15",[139,"^F",298,536870919]],["^15",[139,"^X",27,536870919]],["^15",[139,"^V",298,536870919]],["^15",[139,"^U",27,536870919]],["^15",[139,"^;","~u65410d7a-f122-4243-9e75-1ac59fe2626a",536870919]],["^15",[140,"^M",true,536870919]],["^15",[140,"^Q","**foreach**\ncollapsed:: true",536870919]],["^15",[140,"^O","^16",536870919]],["^15",[140,"^F",294,536870919]],["^15",[140,"^X",27,536870919]],["^15",[140,"^V",65,536870919]],["^15",[140,"^U",27,536870919]],["^15",[140,"^?",["^ "],536870927]],["^15",[140,"^J",[],536870927]],["^15",[140,"^4",["^ "],536870927]],["^15",[140,"^;","~u65410d7a-a3a1-4cf8-a425-3f32f78379e0",536870919]],["^15",[141,"^Q","con `DirectoryInfo` è possibile vedere molte informazioni relative alle direttori",536870919]],["^15",[141,"^O","^16",536870919]],["^15",[141,"^F",341,536870919]],["^15",[141,"^X",27,536870919]],["^15",[141,"^V",341,536870919]],["^15",[141,"^U",27,536870919]],["^15",[141,"^;","~u65410d7a-d053-4f2f-a826-bd8e2a355299",536870919]],["^15",[142,"^Q","~```C#\nObject obj = new Object(parametri);\n```",536870919]],["^15",[142,"^O","^16",536870919]],["^15",[142,"^F",183,536870919]],["^15",[142,"^X",27,536870919]],["^15",[142,"^V",183,536870919]],["^15",[142,"^U",27,536870919]],["^15",[142,"^;","~u65410d7a-d7ab-4071-993a-78eb37fda555",536870919]],["^15",[143,"^Q","return false\nlogseq.order-list-type:: number",536870919]],["^15",[143,"^O","^16",536870919]],["^15",[143,"^F",90,536870919]],["^15",[143,"^X",27,536870919]],["^15",[143,"^V",70,536870919]],["^15",[143,"^U",27,536870919]],["^15",[143,"^?",["^ ","^19","number"],536870927]],["^15",[143,"^J",["^19"],536870927]],["^15",[143,"^4",["^ ","^19","number"],536870927]],["^15",[143,"^;","~u65410d7a-199c-4085-84f6-4171371b56da",536870919]],["^15",[144,"^Q","*classe astratta*",536870919]],["^15",[144,"^O","^16",536870919]],["^15",[144,"^F",31,536870919]],["^15",[144,"^X",27,536870919]],["^15",[144,"^V",75,536870919]],["^15",[144,"^U",27,536870919]],["^15",[144,"^;","~u65410d7a-209b-4b73-9deb-be85fac0fb94",536870919]],["^15",[145,"^Q","FirstOrDefault restituisce il primo elemento di una sequenza o un valore predefinito se non viene trovato alcun elemento.",536870919]],["^15",[145,"^O","^16",536870919]],["^15",[145,"^F",189,536870919]],["^15",[145,"^X",27,536870919]],["^15",[145,"^V",189,536870919]],["^15",[145,"^U",27,536870919]],["^15",[145,"^;","~u65410d7a-0f93-4f89-8c74-483fa83808a1",536870919]],["^15",[146,"^Q","~```C#\nSingletonClass s = SingletonClass.Instance();\n```",536870919]],["^15",[146,"^O","^16",536870919]],["^15",[146,"^F",51,536870919]],["^15",[146,"^X",27,536870919]],["^15",[146,"^V",80,536870919]],["^15",[146,"^U",27,536870919]],["^15",[146,"^;","~u65410d7a-966d-47b8-a5e5-9ca3aac162e7",536870919]],["^15",[147,"^Q","Where ritorna una sottolista di elementi che corrispondono alla condizione",536870919]],["^15",[147,"^O","^16",536870919]],["^15",[147,"^F",342,536870919]],["^15",[147,"^X",27,536870919]],["^15",[147,"^V",342,536870919]],["^15",[147,"^U",27,536870919]],["^15",[147,"^;","~u65410d7a-43ad-4afb-81f1-2138f4194b6b",536870919]],["^15",[148,"^M",true,536870919]],["^15",[148,"^Q","*passaggio dati per referenza*\ncollapsed:: true",536870919]],["^15",[148,"^O","^16",536870919]],["^15",[148,"^F",164,536870919]],["^15",[148,"^X",27,536870919]],["^15",[148,"^V",197,536870919]],["^15",[148,"^U",27,536870919]],["^15",[148,"^?",["^ "],536870927]],["^15",[148,"^J",[],536870927]],["^15",[148,"^4",["^ "],536870927]],["^15",[148,"^;","~u65410d7a-3123-4ed6-b12d-9ac17d2ad158",536870919]],["^15",[149,"^M",true,536870919]],["^15",[149,"^Q","**output**\ncollapsed:: true",536870919]],["^15",[149,"^O","^16",536870919]],["^15",[149,"^F",267,536870919]],["^15",[149,"^X",27,536870919]],["^15",[149,"^V",43,536870919]],["^15",[149,"^U",27,536870919]],["^15",[149,"^?",["^ "],536870927]],["^15",[149,"^J",[],536870927]],["^15",[149,"^4",["^ "],536870927]],["^15",[149,"^;","~u65410d7a-cc33-4fe0-b99c-24e636066a10",536870919]],["^15",[150,"^Q","una classe ha la potenza di definire le caratteristiche di un insieme di oggetti che hanno proprietà e compiono azioni uguali",536870919]],["^15",[150,"^O","^16",536870919]],["^15",[150,"^F",321,536870919]],["^15",[150,"^X",27,536870919]],["^15",[150,"^V",321,536870919]],["^15",[150,"^U",27,536870919]],["^15",[150,"^;","~u65410d7a-dd64-4399-838f-15b3742c1b80",536870919]],["^15",[151,"^Q","~```C#\npublic Name(Parametri){\n\t//istruzioni\n}\n```",536870919]],["^15",[151,"^O","^16",536870919]],["^15",[151,"^F",76,536870919]],["^15",[151,"^X",27,536870919]],["^15",[151,"^V",39,536870919]],["^15",[151,"^U",27,536870919]],["^15",[151,"^;","~u65410d7a-7b52-4b98-b6d1-2e035d58e475",536870919]],["^15",[152,"^M",true,536870919]],["^15",[152,"^Q","~`FindAll`\ncollapsed:: true",536870919]],["^15",[152,"^O","^16",536870919]],["^15",[152,"^F",238,536870919]],["^15",[152,"^X",27,536870919]],["^15",[152,"^V",215,536870919]],["^15",[152,"^U",27,536870919]],["^15",[152,"^?",["^ "],536870927]],["^15",[152,"^J",[],536870927]],["^15",[152,"^4",["^ "],536870927]],["^15",[152,"^;","~u65410d7a-4e8a-4f97-af56-009517659f9b",536870919]],["^15",[153,"^M",true,536870919]],["^15",[153,"^Q","*parsing di una variabile*\ncollapsed:: true",536870919]],["^15",[153,"^O","^16",536870919]],["^15",[153,"^F",291,536870919]],["^15",[153,"^X",27,536870919]],["^15",[153,"^V",291,536870919]],["^15",[153,"^U",27,536870919]],["^15",[153,"^?",["^ "],536870927]],["^15",[153,"^J",[],536870927]],["^15",[153,"^4",["^ "],536870927]],["^15",[153,"^;","~u65410d7a-fa64-4b3c-851a-f0f4ceb3379d",536870919]],["^15",[154,"^M",true,536870919]],["^15",[154,"^Q","permette di stampare stringhe formattate\ncollapsed:: true",536870919]],["^15",[154,"^O","^16",536870919]],["^15",[154,"^F",318,536870919]],["^15",[154,"^X",27,536870919]],["^15",[154,"^V",149,536870919]],["^15",[154,"^U",27,536870919]],["^15",[154,"^?",["^ "],536870927]],["^15",[154,"^J",[],536870927]],["^15",[154,"^4",["^ "],536870927]],["^15",[154,"^;","~u65410d7a-1034-438e-a3e1-78754aef9dd7",536870919]],["^15",[155,"^Q","~```C#\n[Key]\nreadonly int id;\n```",536870919]],["^15",[155,"^O","^16",536870919]],["^15",[155,"^F",348,536870919]],["^15",[155,"^X",27,536870919]],["^15",[155,"^V",204,536870919]],["^15",[155,"^U",27,536870919]],["^15",[155,"^;","~u65410d7a-c880-4e6d-b046-89caaf370c1f",536870919]],["^15",[156,"^Q","~```C#\n[Range(10,30)]\nreadonly int n;\n```",536870919]],["^15",[156,"^O","^16",536870919]],["^15",[156,"^F",362,536870919]],["^15",[156,"^X",27,536870919]],["^15",[156,"^V",245,536870919]],["^15",[156,"^U",27,536870919]],["^15",[156,"^;","~u65410d7a-71e2-4715-9eb4-0cecdba0c06e",536870919]],["^15",[157,"^Q","*lettura*",536870919]],["^15",[157,"^O","^16",536870919]],["^15",[157,"^F",44,536870919]],["^15",[157,"^X",27,536870919]],["^15",[157,"^V",125,536870919]],["^15",[157,"^U",27,536870919]],["^15",[157,"^;","~u65410d7a-a9f5-4975-833a-ed372db3f7b8",536870919]],["^15",[158,"^Q","l'oggetto `StreamWriter` permtte di scrivere in un flusso di byte in una certa codifica",536870919]],["^15",[158,"^O","^16",536870919]],["^15",[158,"^F",256,536870919]],["^15",[158,"^X",27,536870919]],["^15",[158,"^V",256,536870919]],["^15",[158,"^U",27,536870919]],["^15",[158,"^;","~u65410d7a-f4d3-4b49-ad72-05b241223bb3",536870919]],["^15",[159,"^M",true,536870919]],["^15",[159,"^Q","metodo nuovo:\ncollapsed:: true",536870919]],["^15",[159,"^O","^16",536870919]],["^15",[159,"^F",183,536870919]],["^15",[159,"^X",27,536870919]],["^15",[159,"^V",299,536870919]],["^15",[159,"^U",27,536870919]],["^15",[159,"^?",["^ "],536870927]],["^15",[159,"^J",[],536870927]],["^15",[159,"^4",["^ "],536870927]],["^15",[159,"^;","~u65410d7a-4602-43df-a61d-000528db243d",536870919]],["^15",[160,"^Q","in C# è possibile assegnare ad un certo Tipo delle nuove funzioni in questo modo",536870919]],["^15",[160,"^O","^16",536870919]],["^15",[160,"^F",59,536870919]],["^15",[160,"^X",27,536870919]],["^15",[160,"^V",59,536870919]],["^15",[160,"^U",27,536870919]],["^15",[160,"^;","~u65410d7a-e301-473c-a504-e668d5a3e352",536870919]],["^15",[161,"^Q","~```C#\nConsole.SetCursorPosition(x,y);\n```",536870919]],["^15",[161,"^O","^16",536870919]],["^15",[161,"^F",370,536870919]],["^15",[161,"^X",27,536870919]],["^15",[161,"^V",370,536870919]],["^15",[161,"^U",27,536870919]],["^15",[161,"^;","~u65410d7a-68ed-41eb-ac97-7b37f13f9b5c",536870919]],["^15",[162,"^Q","~```C#\n[MinLength(10)]\nreadonly string str;\n```",536870919]],["^15",[162,"^O","^16",536870919]],["^15",[162,"^F",234,536870919]],["^15",[162,"^X",27,536870919]],["^15",[162,"^V",317,536870919]],["^15",[162,"^U",27,536870919]],["^15",[162,"^;","~u65410d7a-1bbe-43bb-9a9a-519d8db9faba",536870919]],["^15",[163,"^Q","~```C#\nforeach(string x in dic.Keys){\n\tConsole.WriteLine(dic[x]);\n\tConsole.WriteLine(x);\n}\n\nforeach(string x in dic.Values){\n\tConsole.WriteLine(dic.FirstOrDefault(z => z.Value == x).Key);\n\tConsole.WriteLine(x);\n}\n\nforeach(KeyValuePair<string, string> x in dic){\n\tConsole.WriteLine($\"key -> {x.Key} - value -> {x.Value}\");\n}\n```",536870919]],["^15",[163,"^O","^16",536870919]],["^15",[163,"^F",229,536870919]],["^15",[163,"^X",27,536870919]],["^15",[163,"^V",229,536870919]],["^15",[163,"^U",27,536870919]],["^15",[163,"^;","~u65410d7a-eccf-4673-a89d-ba187e5677fe",536870919]],["^15",[164,"^M",true,536870919]],["^15",[164,"^Q","*istanza di un oggetto*\ncollapsed:: true",536870919]],["^15",[164,"^O","^16",536870919]],["^15",[164,"^F",235,536870919]],["^15",[164,"^X",27,536870919]],["^15",[164,"^V",197,536870919]],["^15",[164,"^U",27,536870919]],["^15",[164,"^?",["^ "],536870927]],["^15",[164,"^J",[],536870927]],["^15",[164,"^4",["^ "],536870927]],["^15",[164,"^;","~u65410d7a-d64a-46da-a0ca-086111797b5e",536870919]],["^15",[165,"^M",true,536870919]],["^15",[165,"^Q","~`t`\ncollapsed:: true",536870919]],["^15",[165,"^O","^16",536870919]],["^15",[165,"^F",279,536870919]],["^15",[165,"^X",27,536870919]],["^15",[165,"^V",265,536870919]],["^15",[165,"^U",27,536870919]],["^15",[165,"^?",["^ "],536870927]],["^15",[165,"^J",[],536870927]],["^15",[165,"^4",["^ "],536870927]],["^15",[165,"^;","~u65410d7a-b76b-4c9c-a693-67b7f5f88bc0",536870919]],["^15",[166,"^Q","un carattere di escape è un carattere seguito da `\\` che permette alla shell di eseguire certi comportamenti in base all'escape che trova",536870919]],["^15",[166,"^O","^16",536870919]],["^15",[166,"^F",265,536870919]],["^15",[166,"^X",27,536870919]],["^15",[166,"^V",265,536870919]],["^15",[166,"^U",27,536870919]],["^15",[166,"^;","~u65410d7a-e73b-4aa1-b75d-3cdb516480b1",536870919]],["^15",[167,"^Q","nel momento in cui nella classe madre sono definiti dei metodi astratti sarà necessario l'Override nella classe figlia",536870919]],["^15",[167,"^O","^16",536870919]],["^15",[167,"^F",264,536870919]],["^15",[167,"^X",27,536870919]],["^15",[167,"^V",31,536870919]],["^15",[167,"^U",27,536870919]],["^15",[167,"^;","~u65410d7a-4c49-43e4-b73f-5b4bb2b24811",536870919]],["^15",[168,"^Q","~```C#\nStreamWriter sw = new StreamWriter(\"Path/to/file\");\n```",536870919]],["^15",[168,"^O","^16",536870919]],["^15",[168,"^F",158,536870919]],["^15",[168,"^X",27,536870919]],["^15",[168,"^V",256,536870919]],["^15",[168,"^U",27,536870919]],["^15",[168,"^;","~u65410d7a-a1c6-4c2a-bdba-ef4687ec209f",536870919]],["^15",[170,"^M",true,536870919]],["^15",[170,"^Q","permette di stampare a console degli errori\ncollapsed:: true",536870919]],["^15",[170,"^O","^16",536870919]],["^15",[170,"^F",233,536870919]],["^15",[170,"^X",27,536870919]],["^15",[170,"^V",149,536870919]],["^15",[170,"^U",27,536870919]],["^15",[170,"^?",["^ "],536870927]],["^15",[170,"^J",[],536870927]],["^15",[170,"^4",["^ "],536870927]],["^15",[170,"^;","~u65410d7a-6dfd-4506-b663-f081fffaf976",536870919]],["^15",[171,"^Q","per ogni stringa corrisponde sempre un solo HASH",536870919]],["^15",[171,"^O","^16",536870919]],["^15",[171,"^F",213,536870919]],["^15",[171,"^X",27,536870919]],["^15",[171,"^V",213,536870919]],["^15",[171,"^U",27,536870919]],["^15",[171,"^;","~u65410d7a-9995-4998-a381-003b63320b1f",536870919]],["^15",[172,"^Q","~```C#\nfor(int i=0; i<n; i++){\n  //istruzioni\n}\n```",536870919]],["^15",[172,"^O","^16",536870919]],["^15",[172,"^F",192,536870919]],["^15",[172,"^X",27,536870919]],["^15",[172,"^V",294,536870919]],["^15",[172,"^U",27,536870919]],["^15",[172,"^;","~u65410d7a-4abc-4df0-9eed-1440b357127b",536870919]],["^15",[173,"^Q","questo operatore viene utilizzato per fornire un valore predefinito nel caso in cui l'operando a sinistra sia `null`",536870919]],["^15",[173,"^O","^16",536870919]],["^15",[173,"^F",61,536870919]],["^15",[173,"^X",27,536870919]],["^15",[173,"^V",61,536870919]],["^15",[173,"^U",27,536870919]],["^15",[173,"^;","~u65410d7a-7917-413e-8252-8a99501ec838",536870919]],["^15",[174,"^M",true,536870919]],["^15",[174,"^Q","*funzioni*\ncollapsed:: true",536870919]],["^15",[174,"^O","^16",536870919]],["^15",[174,"^F",65,536870919]],["^15",[174,"^X",27,536870919]],["^15",[174,"^V",197,536870919]],["^15",[174,"^U",27,536870919]],["^15",[174,"^?",["^ "],536870927]],["^15",[174,"^J",[],536870927]],["^15",[174,"^4",["^ "],536870927]],["^15",[174,"^;","~u65410d7a-fbc1-41d1-91cf-cdc73e13801a",536870919]],["^15",[175,"^Q","l'oggetto `StreamReader` legge tutti i caratteri da un flusso di byte in una certa codifica",536870919]],["^15",[175,"^O","^16",536870919]],["^15",[175,"^F",326,536870919]],["^15",[175,"^X",27,536870919]],["^15",[175,"^V",326,536870919]],["^15",[175,"^U",27,536870919]],["^15",[175,"^;","~u65410d7a-8f82-4f86-8aaf-709173515664",536870919]],["^15",[176,"^M",true,536870919]],["^15",[176,"^Q","collapsed:: true\n```C#\ninternal interface IInterface\n{\n   //firme metodi\n}\n```",536870919]],["^15",[176,"^O","^16",536870919]],["^15",[176,"^F",32,536870919]],["^15",[176,"^X",27,536870919]],["^15",[176,"^V",105,536870919]],["^15",[176,"^U",27,536870919]],["^15",[176,"^?",["^ "],536870927]],["^15",[176,"^J",[],536870927]],["^15",[176,"^4",["^ "],536870927]],["^15",[176,"^;","~u65410d7a-a81a-44a0-8c0a-491ccde9d381",536870919]],["^15",[177,"^Q","un metodo generico è un metodo che viene dichiarato con parametri `<T>` generici",536870919]],["^15",[177,"^O","^16",536870919]],["^15",[177,"^F",95,536870919]],["^15",[177,"^X",27,536870919]],["^15",[177,"^V",95,536870919]],["^15",[177,"^U",27,536870919]],["^15",[177,"^;","~u65410d7a-5b53-43ef-b4f3-ad53c0d9a240",536870919]],["^15",[178,"^Q","~```C#\nList<string> filtred = strList.findAll(s => s.Contains(\"data\"));\n```",536870919]],["^15",[178,"^O","^16",536870919]],["^15",[178,"^F",365,536870919]],["^15",[178,"^X",27,536870919]],["^15",[178,"^V",152,536870919]],["^15",[178,"^U",27,536870919]],["^15",[178,"^;","~u65410d7a-d832-448e-9f37-840ff80e7956",536870919]],["^15",[179,"^M",true,536870919]],["^15",[179,"^Q","**conditional operator**\ncollapsed:: true",536870919]],["^15",[179,"^O","^16",536870919]],["^15",[179,"^F",92,536870919]],["^15",[179,"^X",27,536870919]],["^15",[179,"^V",302,536870919]],["^15",[179,"^U",27,536870919]],["^15",[179,"^?",["^ "],536870927]],["^15",[179,"^J",[],536870927]],["^15",[179,"^4",["^ "],536870927]],["^15",[179,"^;","~u65410d7a-e7be-4337-8804-50e56ceb7fa2",536870919]],["^15",[180,"^M",true,536870919]],["^15",[180,"^Q","*ENUM*\ncollapsed:: true",536870919]],["^15",[180,"^O","^16",536870919]],["^15",[180,"^F",298,536870919]],["^15",[180,"^X",27,536870919]],["^15",[180,"^V",69,536870919]],["^15",[180,"^U",27,536870919]],["^15",[180,"^?",["^ "],536870927]],["^15",[180,"^J",[],536870927]],["^15",[180,"^4",["^ "],536870927]],["^15",[180,"^;","~u65410d7a-fdea-406e-a849-9b6320b53202",536870919]],["^15",[181,"^M",true,536870919]],["^15",[181,"^Q","**nullable**\ncollapsed:: true",536870919]],["^15",[181,"^O","^16",536870919]],["^15",[181,"^F",360,536870919]],["^15",[181,"^X",27,536870919]],["^15",[181,"^V",360,536870919]],["^15",[181,"^U",27,536870919]],["^15",[181,"^?",["^ "],536870927]],["^15",[181,"^J",[],536870927]],["^15",[181,"^4",["^ "],536870927]],["^15",[181,"^;","~u65410d7a-2491-4d31-8184-dcbac0cc14d7",536870919]],["^15",[182,"^Q","~```C#\nConsole.WriteLine(\"...\");\nSystem.Console.WriteLine(\"...\");\n```",536870919]],["^15",[182,"^O","^16",536870919]],["^15",[182,"^F",318,536870919]],["^15",[182,"^X",27,536870919]],["^15",[182,"^V",318,536870919]],["^15",[182,"^U",27,536870919]],["^15",[182,"^;","~u65410d7a-53c2-43fa-812a-06ef4ccbee74",536870919]],["^15",[183,"^M",true,536870919]],["^15",[183,"^Q","metodo vecchio:\ncollapsed:: true",536870919]],["^15",[183,"^O","^16",536870919]],["^15",[183,"^F",299,536870919]],["^15",[183,"^X",27,536870919]],["^15",[183,"^V",299,536870919]],["^15",[183,"^U",27,536870919]],["^15",[183,"^?",["^ "],536870927]],["^15",[183,"^J",[],536870927]],["^15",[183,"^4",["^ "],536870927]],["^15",[183,"^;","~u65410d7a-d533-45e1-8e33-a04e2c056280",536870919]],["^15",[184,"^Q","permette una prima esecuzione del codice, e la sua riesecuzione fin che una codizione è soddisfatta",536870919]],["^15",[184,"^O","^16",536870919]],["^15",[184,"^F",225,536870919]],["^15",[184,"^X",27,536870919]],["^15",[184,"^V",225,536870919]],["^15",[184,"^U",27,536870919]],["^15",[184,"^;","~u65410d7a-0e11-454e-9aca-81cbca422498",536870919]],["^15",[185,"^M",true,536870919]],["^15",[185,"^Q","**puntatore**\ncollapsed:: true",536870919]],["^15",[185,"^O","^16",536870919]],["^15",[185,"^F",149,536870919]],["^15",[185,"^X",27,536870919]],["^15",[185,"^V",43,536870919]],["^15",[185,"^U",27,536870919]],["^15",[185,"^?",["^ "],536870927]],["^15",[185,"^J",[],536870927]],["^15",[185,"^4",["^ "],536870927]],["^15",[185,"^;","~u65410d7a-c78b-41eb-ad08-10c523e3dc3e",536870919]],["^15",[186,"^Q","~```C#\nDateTime time = DateTime.Now //ritorna la data attuale \n```",536870919]],["^15",[186,"^O","^16",536870919]],["^15",[186,"^F",139,536870919]],["^15",[186,"^X",27,536870919]],["^15",[186,"^V",139,536870919]],["^15",[186,"^U",27,536870919]],["^15",[186,"^;","~u65410d7a-d6ae-45f8-b908-57597e5f2ce5",536870919]],["^15",[187,"^M",true,536870919]],["^15",[187,"^Q","*liste*\ncollapsed:: true",536870919]],["^15",[187,"^O","^16",536870919]],["^15",[187,"^F",331,536870919]],["^15",[187,"^X",27,536870919]],["^15",[187,"^V",291,536870919]],["^15",[187,"^U",27,536870919]],["^15",[187,"^?",["^ "],536870927]],["^15",[187,"^J",[],536870927]],["^15",[187,"^4",["^ "],536870927]],["^15",[187,"^;","~u65410d7a-49c4-4b59-9b1a-47e6400667a3",536870919]],["^15",[188,"^Q","tabulazione",536870919]],["^15",[188,"^O","^16",536870919]],["^15",[188,"^F",165,536870919]],["^15",[188,"^X",27,536870919]],["^15",[188,"^V",165,536870919]],["^15",[188,"^U",27,536870919]],["^15",[188,"^;","~u65410d7a-522e-4b29-ae91-8eed3010d61f",536870919]],["^15",[189,"^M",true,536870919]],["^15",[189,"^Q","~`FirstOrDefault`\ncollapsed:: true",536870919]],["^15",[189,"^O","^16",536870919]],["^15",[189,"^F",342,536870919]],["^15",[189,"^X",27,536870919]],["^15",[189,"^V",215,536870919]],["^15",[189,"^U",27,536870919]],["^15",[189,"^?",["^ "],536870927]],["^15",[189,"^J",[],536870927]],["^15",[189,"^4",["^ "],536870927]],["^15",[189,"^;","~u65410d7a-3899-4d1d-be02-c01abe679b64",536870919]],["^15",[190,"^M",true,536870919]],["^15",[190,"^Q","è possibile accedere agli elementi di un enumeratore in questo modo:\ncollapsed:: true",536870919]],["^15",[190,"^O","^16",536870919]],["^15",[190,"^F",201,536870919]],["^15",[190,"^X",27,536870919]],["^15",[190,"^V",180,536870919]],["^15",[190,"^U",27,536870919]],["^15",[190,"^?",["^ "],536870927]],["^15",[190,"^J",[],536870927]],["^15",[190,"^4",["^ "],536870927]],["^15",[190,"^;","~u65410d7a-bb40-4310-8a4a-8d1a075ca1cd",536870919]],["^15",[191,"^M",true,536870919]],["^15",[191,"^Q","l'ereditarietà è quella proprietà della OOP che permette ad una classe figlia di ereditare metodi e attributi da una classe madre\ncollapsed:: true",536870919]],["^15",[191,"^O","^16",536870919]],["^15",[191,"^F",31,536870919]],["^15",[191,"^X",27,536870919]],["^15",[191,"^V",31,536870919]],["^15",[191,"^U",27,536870919]],["^15",[191,"^?",["^ "],536870927]],["^15",[191,"^J",[],536870927]],["^15",[191,"^4",["^ "],536870927]],["^15",[191,"^;","~u65410d7a-d9d6-4566-adb1-eb7bb25bad8a",536870919]],["^15",[192,"^Q","permette di eseguire una porzione di codice tante volte quante quelle specificate nella condizione",536870919]],["^15",[192,"^O","^16",536870919]],["^15",[192,"^F",294,536870919]],["^15",[192,"^X",27,536870919]],["^15",[192,"^V",294,536870919]],["^15",[192,"^U",27,536870919]],["^15",[192,"^;","~u65410d7a-e90e-4629-9de2-0e05c2b28d00",536870919]],["^15",[193,"^Q","le posizioni non assegnate in un array verranno messe a `null`",536870919]],["^15",[193,"^O","^16",536870919]],["^15",[193,"^F",314,536870919]],["^15",[193,"^X",27,536870919]],["^15",[193,"^V",331,536870919]],["^15",[193,"^U",27,536870919]],["^15",[193,"^;","~u65410d7a-e331-4767-953c-9ac8dca0692a",536870919]],["^15",[194,"^M",true,536870919]],["^15",[194,"^Q","~`GetFiles`\ncollapsed:: true",536870919]],["^15",[194,"^O","^16",536870919]],["^15",[194,"^F",250,536870919]],["^15",[194,"^X",27,536870919]],["^15",[194,"^V",341,536870919]],["^15",[194,"^U",27,536870919]],["^15",[194,"^?",["^ "],536870927]],["^15",[194,"^J",[],536870927]],["^15",[194,"^4",["^ "],536870927]],["^15",[194,"^;","~u65410d7a-6478-40a0-b60f-1b920178cbf6",536870919]],["^15",[195,"^M",true,536870919]],["^15",[195,"^Q","il parsing di una variabile permette di convertire una variabile in un altro tipo\ncollapsed:: true",536870919]],["^15",[195,"^O","^16",536870919]],["^15",[195,"^F",153,536870919]],["^15",[195,"^X",27,536870919]],["^15",[195,"^V",153,536870919]],["^15",[195,"^U",27,536870919]],["^15",[195,"^?",["^ "],536870927]],["^15",[195,"^J",[],536870927]],["^15",[195,"^4",["^ "],536870927]],["^15",[195,"^;","~u65410d7a-479d-4c20-a734-dd1135816d10",536870919]],["^15",[196,"^Q","~```C#\nstring[] files = dir.GetFiles();\n```",536870919]],["^15",[196,"^O","^16",536870919]],["^15",[196,"^F",200,536870919]],["^15",[196,"^X",27,536870919]],["^15",[196,"^V",194,536870919]],["^15",[196,"^U",27,536870919]],["^15",[196,"^;","~u65410d7a-fab5-4ea2-b919-aa60b413335d",536870919]],["^15",[197,"^M",true,536870919]],["^15",[197,"^Q","**SINTASSI**\ncollapsed:: true",536870919]],["^15",[197,"^O","^16",536870919]],["^15",[197,"^F",290,536870919]],["^15",[197,"^X",27,536870919]],["^15",[197,"^V",290,536870919]],["^15",[197,"^U",27,536870919]],["^15",[197,"^?",["^ "],536870927]],["^15",[197,"^J",[],536870927]],["^15",[197,"^4",["^ "],536870927]],["^15",[197,"^;","~u65410d7a-2d59-4bba-a419-a0340651369c",536870919]],["^15",[198,"^Q","~```C#\ninternal class Name : IInterface1, IInterface2\n{\n\t//codice\n}\n```",536870919]],["^15",[198,"^O","^16",536870919]],["^15",[198,"^F",206,536870919]],["^15",[198,"^X",27,536870919]],["^15",[198,"^V",176,536870919]],["^15",[198,"^U",27,536870919]],["^15",[198,"^;","~u65410d7a-7ec6-4244-b2ec-76c4d28dd36f",536870919]],["^15",[199,"^Q","permette di ciclare una porzione di dati assegnando ad una variabile ogni posizione della porzione di dati",536870919]],["^15",[199,"^O","^16",536870919]],["^15",[199,"^F",140,536870919]],["^15",[199,"^X",27,536870919]],["^15",[199,"^V",140,536870919]],["^15",[199,"^U",27,536870919]],["^15",[199,"^;","~u65410d7a-33ba-4501-928b-feee3fbb2cf6",536870919]],["^15",[200,"^Q","col metodo GetFiles è possibile ricevere una lista di tutti i file presenti in una directory",536870919]],["^15",[200,"^O","^16",536870919]],["^15",[200,"^F",194,536870919]],["^15",[200,"^X",27,536870919]],["^15",[200,"^V",194,536870919]],["^15",[200,"^U",27,536870919]],["^15",[200,"^;","~u65410d7a-b753-4831-8ec4-8f9de1e4f080",536870919]],["^15",[201,"^M",true,536870919]],["^15",[201,"^Q","per ogni elemento dell'enumeratore viene assegnato un ID con autoincrement. è possibile riassegnare gli ID in un enumeratore in questo modo:\ncollapsed:: true",536870919]],["^15",[201,"^O","^16",536870919]],["^15",[201,"^F",34,536870919]],["^15",[201,"^X",27,536870919]],["^15",[201,"^V",180,536870919]],["^15",[201,"^U",27,536870919]],["^15",[201,"^?",["^ "],536870927]],["^15",[201,"^J",[],536870927]],["^15",[201,"^4",["^ "],536870927]],["^15",[201,"^;","~u65410d7a-5384-407a-8e50-d57c07b5a757",536870919]],["^15",[202,"^Q","~```C#\ninput => { statement };\n```",536870919]],["^15",[202,"^O","^16",536870919]],["^15",[202,"^F",304,536870919]],["^15",[202,"^X",27,536870919]],["^15",[202,"^V",304,536870919]],["^15",[202,"^U",27,536870919]],["^15",[202,"^;","~u65410d7a-ed65-41be-a241-d7d61e96f39e",536870919]],["^15",[203,"^Q","è possibile anche formattare il formato della data richiesta",536870919]],["^15",[203,"^O","^16",536870919]],["^15",[203,"^F",139,536870919]],["^15",[203,"^X",27,536870919]],["^15",[203,"^V",298,536870919]],["^15",[203,"^U",27,536870919]],["^15",[203,"^;","~u65410d7a-96ac-46de-8e69-e405f4d46ca4",536870919]],["^15",[204,"^M",true,536870919]],["^15",[204,"^Q","~`Key`\ncollapsed:: true",536870919]],["^15",[204,"^O","^16",536870919]],["^15",[204,"^F",366,536870919]],["^15",[204,"^X",27,536870919]],["^15",[204,"^V",292,536870919]],["^15",[204,"^U",27,536870919]],["^15",[204,"^?",["^ "],536870927]],["^15",[204,"^J",[],536870927]],["^15",[204,"^4",["^ "],536870927]],["^15",[204,"^;","~u65410d7a-cd31-4225-a14f-c978f5b4cac1",536870919]],["^15",[205,"^Q","come può essere la lettura di un file di testo",536870919]],["^15",[205,"^O","^16",536870919]],["^15",[205,"^F",364,536870919]],["^15",[205,"^X",27,536870919]],["^15",[205,"^V",364,536870919]],["^15",[205,"^U",27,536870919]],["^15",[205,"^;","~u65410d7a-c6a6-4b51-bf77-3650a8e499d1",536870919]],["^15",[206,"^Q","è buona cosa iniziare i nome delle interfaccie con una `I` maiuscola, almeno quando si va a estendere un interfaccie si riesce a differenziare le interfaccie dalle classi",536870919]],["^15",[206,"^O","^16",536870919]],["^15",[206,"^F",176,536870919]],["^15",[206,"^X",27,536870919]],["^15",[206,"^V",176,536870919]],["^15",[206,"^U",27,536870919]],["^15",[206,"^;","~u65410d7a-c14a-40de-8063-57fd7c7b612d",536870919]],["^15",[207,"^M",true,536870919]],["^15",[207,"^Q","*SHA SALT*\ncollapsed:: true",536870919]],["^15",[207,"^O","^16",536870919]],["^15",[207,"^F",212,536870919]],["^15",[207,"^X",27,536870919]],["^15",[207,"^V",213,536870919]],["^15",[207,"^U",27,536870919]],["^15",[207,"^?",["^ "],536870927]],["^15",[207,"^J",[],536870927]],["^15",[207,"^4",["^ "],536870927]],["^15",[207,"^;","~u65410d7a-7f3d-4153-9093-f8aa243d50fc",536870919]],["^15",[208,"^M",true,536870962]],["^15",[208,"^Q","*tuple*\ncollapsed:: true",536870919]],["^15",[208,"^O","^16",536870919]],["^15",[208,"^F",121,536870919]],["^15",[208,"^X",27,536870919]],["^15",[208,"^V",291,536870919]],["^15",[208,"^U",27,536870919]],["^15",[208,"^?",["^ "],536870927]],["^15",[208,"^J",[],536870927]],["^15",[208,"^4",["^ "],536870927]],["^15",[208,"^;","~u65410d7a-68aa-4b32-a163-8561d2b3f5e1",536870919]],["^15",[209,"^M",true,536870919]],["^15",[209,"^Q","lettura di file json\ncollapsed:: true",536870919]],["^15",[209,"^O","^16",536870919]],["^15",[209,"^F",315,536870919]],["^15",[209,"^X",27,536870919]],["^15",[209,"^V",345,536870919]],["^15",[209,"^U",27,536870919]],["^15",[209,"^?",["^ "],536870927]],["^15",[209,"^J",[],536870927]],["^15",[209,"^4",["^ "],536870927]],["^15",[209,"^;","~u65410d7a-62fb-457a-9876-ace3dc6c453e",536870919]],["^15",[210,"^M",true,536870919]],["^15",[210,"^Q","*incapsulamento*\ncollapsed:: true",536870919]],["^15",[210,"^O","^16",536870919]],["^15",[210,"^F",144,536870919]],["^15",[210,"^X",27,536870919]],["^15",[210,"^V",75,536870919]],["^15",[210,"^U",27,536870919]],["^15",[210,"^?",["^ "],536870927]],["^15",[210,"^J",[],536870927]],["^15",[210,"^4",["^ "],536870927]],["^15",[210,"^;","~u65410d7a-8d4d-4fc3-ad5c-e0c98d8e088b",536870919]],["^15",[211,"^M",true,536870919]],["^15",[211,"^Q","**CRYPT**\ncollapsed:: true",536870919]],["^15",[211,"^O","^16",536870919]],["^15",[211,"^F",79,536870919]],["^15",[211,"^X",27,536870919]],["^15",[211,"^V",290,536870919]],["^15",[211,"^U",27,536870919]],["^15",[211,"^?",["^ "],536870927]],["^15",[211,"^J",[],536870927]],["^15",[211,"^4",["^ "],536870927]],["^15",[211,"^;","~u65410d7a-f01e-44f6-92fb-bdf73279c5d3",536870919]],["^15",[212,"^M",true,536870919]],["^15",[212,"^Q","*SHA*\ncollapsed:: true",536870919]],["^15",[212,"^O","^16",536870919]],["^15",[212,"^F",255,536870919]],["^15",[212,"^X",27,536870919]],["^15",[212,"^V",213,536870919]],["^15",[212,"^U",27,536870919]],["^15",[212,"^?",["^ "],536870927]],["^15",[212,"^J",[],536870927]],["^15",[212,"^4",["^ "],536870927]],["^15",[212,"^;","~u65410d7a-f3f4-4d92-a0fb-11f2908ec004",536870919]],["^15",[213,"^M",true,536870919]],["^15",[213,"^Q","*HASH*\ncollapsed:: true",536870919]],["^15",[213,"^O","^16",536870919]],["^15",[213,"^F",211,536870919]],["^15",[213,"^X",27,536870919]],["^15",[213,"^V",211,536870919]],["^15",[213,"^U",27,536870919]],["^15",[213,"^?",["^ "],536870927]],["^15",[213,"^J",[],536870927]],["^15",[213,"^4",["^ "],536870927]],["^15",[213,"^;","~u65410d7a-5a1c-4539-abca-99a19a4bf92a",536870919]],["^15",[214,"^Q","~```C#\nusing StreamReader sr = new StreamReader(\"Path/to/file\");\nwhile ((line = sr.ReadLine()!) != null)\n\tstrList.Add(line);\n```",536870919]],["^15",[214,"^O","^16",536870919]],["^15",[214,"^F",364,536870919]],["^15",[214,"^X",27,536870919]],["^15",[214,"^V",128,536870919]],["^15",[214,"^U",27,536870919]],["^15",[214,"^;","~u65410d7a-8f71-4f5f-8032-61d5e851c357",536870919]],["^15",[215,"^M",true,536870919]],["^15",[215,"^Q","~`linQ` offre anche altri metodi lambda per lavorare sulle liste\ncollapsed:: true",536870919]],["^15",[215,"^O","^16",536870919]],["^15",[215,"^F",66,536870919]],["^15",[215,"^X",27,536870919]],["^15",[215,"^V",62,536870919]],["^15",[215,"^U",27,536870919]],["^15",[215,"^?",["^ "],536870927]],["^15",[215,"^J",[],536870927]],["^15",[215,"^4",["^ "],536870927]],["^15",[215,"^;","~u65410d7a-6877-4573-b1a3-ff3464562323",536870919]],["^15",[216,"^M",true,536870919]],["^15",[216,"^Q","questo metodo permette di generare due HASH diverse anche nel momento in cui si fa l'hash sulla stessa parola.\ncollapsed:: true",536870919]],["^15",[216,"^O","^16",536870919]],["^15",[216,"^F",207,536870919]],["^15",[216,"^X",27,536870919]],["^15",[216,"^V",207,536870919]],["^15",[216,"^U",27,536870919]],["^15",[216,"^?",["^ "],536870927]],["^15",[216,"^J",[],536870927]],["^15",[216,"^4",["^ "],536870927]],["^15",[216,"^;","~u65410d7a-41f6-449e-877d-3b6d6bd5685f",536870919]],["^15",[217,"^M",true,536870919]],["^15",[217,"^Q","**expression lambda**\ncollapsed:: true",536870919]],["^15",[217,"^O","^16",536870919]],["^15",[217,"^F",109,536870919]],["^15",[217,"^X",27,536870919]],["^15",[217,"^V",235,536870919]],["^15",[217,"^U",27,536870919]],["^15",[217,"^?",["^ "],536870927]],["^15",[217,"^J",[],536870927]],["^15",[217,"^4",["^ "],536870927]],["^15",[217,"^;","~u65410d7a-fc16-4cf8-8792-d1437e911447",536870919]],["^15",[218,"^M",true,536870919]],["^15",[218,"^Q","~`append`\ncollapsed:: true",536870919]],["^15",[218,"^O","^16",536870919]],["^15",[218,"^F",33,536870919]],["^15",[218,"^X",27,536870919]],["^15",[218,"^V",286,536870919]],["^15",[218,"^U",27,536870919]],["^15",[218,"^?",["^ "],536870927]],["^15",[218,"^J",[],536870927]],["^15",[218,"^4",["^ "],536870927]],["^15",[218,"^;","~u65410d7a-d831-45e2-ad83-9ebc22d3a1bc",536870919]],["^15",[219,"^Q","~```C#\ninternal static class ExtensionMethod\n{\n    internal static int WordCounts(this string s){\n\t\t//codice\n    }\n}  \n```",536870919]],["^15",[219,"^O","^16",536870919]],["^15",[219,"^F",160,536870919]],["^15",[219,"^X",27,536870919]],["^15",[219,"^V",59,536870919]],["^15",[219,"^U",27,536870919]],["^15",[219,"^;","~u65410d7a-a37e-4dd2-a594-ce55a3448037",536870919]],["^15",[220,"^M",true,536870919]],["^15",[220,"^Q","*getter e setter*\ncollapsed:: true",536870919]],["^15",[220,"^O","^16",536870919]],["^15",[220,"^F",116,536870919]],["^15",[220,"^X",27,536870919]],["^15",[220,"^V",86,536870919]],["^15",[220,"^U",27,536870919]],["^15",[220,"^?",["^ "],536870927]],["^15",[220,"^J",[],536870927]],["^15",[220,"^4",["^ "],536870927]],["^15",[220,"^;","~u65410d7a-690a-4c37-a70f-ad0f48a1f34f",536870919]],["^15",[221,"^Q","~```C#\n string[] fData = File.ReadAllLines(\"path/to/file\");\n```",536870919]],["^15",[221,"^O","^16",536870919]],["^15",[221,"^F",357,536870919]],["^15",[221,"^X",27,536870919]],["^15",[221,"^V",357,536870919]],["^15",[221,"^U",27,536870919]],["^15",[221,"^;","~u65410d7a-2bde-44ed-b828-4735dbd4d96f",536870919]],["^15",[222,"^Q","gli attributi di una classe sono quelle variabili definite all'interno di una classe",536870919]],["^15",[222,"^O","^16",536870919]],["^15",[222,"^F",116,536870919]],["^15",[222,"^X",27,536870919]],["^15",[222,"^V",116,536870919]],["^15",[222,"^U",27,536870919]],["^15",[222,"^;","~u65410d7a-db13-4ae7-b4e4-0651656060f6",536870919]],["^15",[223,"^M",true,536870919]],["^15",[223,"^Q","~`MaxLenght`\ncollapsed:: true",536870919]],["^15",[223,"^O","^16",536870919]],["^15",[223,"^F",204,536870919]],["^15",[223,"^X",27,536870919]],["^15",[223,"^V",292,536870919]],["^15",[223,"^U",27,536870919]],["^15",[223,"^?",["^ "],536870927]],["^15",[223,"^J",[],536870927]],["^15",[223,"^4",["^ "],536870927]],["^15",[223,"^;","~u65410d7a-7622-4a50-b91f-dd88d0b97d01",536870919]],["^15",[224,"^Q","visibile solo nel tuo progetto",536870919]],["^15",[224,"^O","^16",536870919]],["^15",[224,"^F",350,536870919]],["^15",[224,"^X",27,536870919]],["^15",[224,"^V",350,536870919]],["^15",[224,"^U",27,536870919]],["^15",[224,"^;","~u65410d7a-8c21-4d4e-8825-04b4bbf8f62b",536870919]],["^15",[225,"^M",true,536870919]],["^15",[225,"^Q","**do-while**\ncollapsed:: true",536870919]],["^15",[225,"^O","^16",536870919]],["^15",[225,"^F",358,536870919]],["^15",[225,"^X",27,536870919]],["^15",[225,"^V",65,536870919]],["^15",[225,"^U",27,536870919]],["^15",[225,"^?",["^ "],536870927]],["^15",[225,"^J",[],536870927]],["^15",[225,"^4",["^ "],536870927]],["^15",[225,"^;","~u65410d7a-b659-48d0-b674-15c64a3af0d5",536870919]],["^15",[226,"^Q","~```C#\nstring filtred = strList.FirstOrDefault(s => s.Contains(\"data\"),\"\");\n```",536870919]],["^15",[226,"^O","^16",536870919]],["^15",[226,"^F",145,536870919]],["^15",[226,"^X",27,536870919]],["^15",[226,"^V",189,536870919]],["^15",[226,"^U",27,536870919]],["^15",[226,"^;","~u65410d7a-ea05-4fd2-b7ae-f63d66dadba9",536870919]],["^15",[227,"^Q","~```C#\ninternal type GetVar => Var;\t//non-invocable member\ninternal type getVar() => Var;\t//lambda method\ninternal type getVar(){\t\t\t//metodo esteso\n  //controlli\n  return Var;\t\t\t\t\t\n}\n```",536870919]],["^15",[227,"^O","^16",536870919]],["^15",[227,"^F",339,536870919]],["^15",[227,"^X",27,536870919]],["^15",[227,"^V",339,536870919]],["^15",[227,"^U",27,536870919]],["^15",[227,"^;","~u65410d7a-709b-49cc-ac3e-7ed36cc9b20f",536870919]],["^15",[228,"^Q","possibile accedere ai metodi di una tupla in questo modo:",536870919]],["^15",[228,"^O","^16",536870919]],["^15",[228,"^F",320,536870919]],["^15",[228,"^X",27,536870919]],["^15",[228,"^V",328,536870919]],["^15",[228,"^U",27,536870919]],["^15",[228,"^;","~u65410d7a-8909-41f9-9149-a5f6b6d72159",536870919]],["^15",[229,"^M",false,536870947]],["^15",[229,"^Q","è possibile ciclare un Dictionary\ncollapsed:: true",536870919]],["^15",[229,"^O","^16",536870919]],["^15",[229,"^F",133,536870919]],["^15",[229,"^X",27,536870919]],["^15",[229,"^V",121,536870919]],["^15",[229,"^U",27,536870919]],["^15",[229,"^?",["^ "],536870927]],["^15",[229,"^J",[],536870927]],["^15",[229,"^4",["^ "],536870927]],["^15",[229,"^;","~u65410d7a-dcc9-42b9-8f4b-4f1052c9973b",536870919]],["^15",[230,"^Q","permette lì'istruzione e volendo il return di una sola istruzione su una sola riga",536870919]],["^15",[230,"^O","^16",536870919]],["^15",[230,"^F",276,536870919]],["^15",[230,"^X",27,536870919]],["^15",[230,"^V",276,536870919]],["^15",[230,"^U",27,536870919]],["^15",[230,"^;","~u65410d7a-2c21-49e8-b6d1-0290cc18a366",536870919]],["^15",[231,"^Q","~```C#\ninternal static void MetodoGenerico<T>() \n{\n\t//codice\n}\n```",536870919]],["^15",[231,"^O","^16",536870919]],["^15",[231,"^F",177,536870919]],["^15",[231,"^X",27,536870919]],["^15",[231,"^V",95,536870919]],["^15",[231,"^U",27,536870919]],["^15",[231,"^;","~u65410d7a-a6e0-422e-a269-615fac95e3ac",536870919]],["^15",[232,"^M",true,536870919]],["^15",[232,"^Q","*modificatori visiblità*\nid:: 6527a3c5-a0cc-4dc1-b90b-a7b028625423\ncollapsed:: true",536870919]],["^15",[232,"^O","^16",536870919]],["^15",[232,"^F",197,536870919]],["^15",[232,"^X",27,536870919]],["^15",[232,"^V",197,536870919]],["^15",[232,"^U",27,536870919]],["^15",[232,"^?",["^ ","^1:","6527a3c5-a0cc-4dc1-b90b-a7b028625423"],536870927]],["^15",[232,"^J",["^1:"],536870927]],["^15",[232,"^4",["^ ","^1:","6527a3c5-a0cc-4dc1-b90b-a7b028625423"],536870927]],["^15",[232,"^;","~u6527a3c5-a0cc-4dc1-b90b-a7b028625423",536870919]],["^15",[233,"^M",true,536870919]],["^15",[233,"^Q","permette di interpretare in modo letterale il testo senza contare i caratteri di escape\ncollapsed:: true",536870919]],["^15",[233,"^O","^16",536870919]],["^15",[233,"^F",154,536870919]],["^15",[233,"^X",27,536870919]],["^15",[233,"^V",149,536870919]],["^15",[233,"^U",27,536870919]],["^15",[233,"^?",["^ "],536870927]],["^15",[233,"^J",[],536870927]],["^15",[233,"^4",["^ "],536870927]],["^15",[233,"^;","~u65410d7a-60c6-4057-aa69-fc68e74e8790",536870919]],["^15",[234,"^Q","dice che quell'attributo può avere una lunghezza minima di tot caratteri",536870919]],["^15",[234,"^O","^16",536870919]],["^15",[234,"^F",317,536870919]],["^15",[234,"^X",27,536870919]],["^15",[234,"^V",317,536870919]],["^15",[234,"^U",27,536870919]],["^15",[234,"^;","~u65410d7a-385e-4951-8adb-f8be3eb683d4",536870919]],["^15",[235,"^M",true,536870919]],["^15",[235,"^Q","*lambda expression*\ncollapsed:: true",536870919]],["^15",[235,"^O","^16",536870919]],["^15",[235,"^F",73,536870919]],["^15",[235,"^X",27,536870919]],["^15",[235,"^V",197,536870919]],["^15",[235,"^U",27,536870919]],["^15",[235,"^?",["^ "],536870927]],["^15",[235,"^J",[],536870927]],["^15",[235,"^4",["^ "],536870927]],["^15",[235,"^;","~u65410d7a-989e-42ea-a1ab-6cad80a26331",536870919]],["^15",[236,"^Q","visibile solo nella classe corrente",536870919]],["^15",[236,"^O","^16",536870919]],["^15",[236,"^F",253,536870919]],["^15",[236,"^X",27,536870919]],["^15",[236,"^V",253,536870919]],["^15",[236,"^U",27,536870919]],["^15",[236,"^;","~u65410d7a-fafc-4acc-afbc-3c0aa197e35e",536870919]],["^15",[237,"^M",true,536870919]],["^15",[237,"^Q","con il metodo `ReadAllText` è possibile leggere tutto l'intero file fino al terminatore `EOF` e assegnarlo ad una variabile\ncollapsed:: true",536870919]],["^15",[237,"^O","^16",536870919]],["^15",[237,"^F",157,536870919]],["^15",[237,"^X",27,536870919]],["^15",[237,"^V",157,536870919]],["^15",[237,"^U",27,536870919]],["^15",[237,"^?",["^ "],536870927]],["^15",[237,"^J",[],536870927]],["^15",[237,"^4",["^ "],536870927]],["^15",[237,"^;","~u65410d7a-6c8a-406c-9fa6-31947bae7d29",536870919]],["^15",[238,"^M",true,536870919]],["^15",[238,"^Q","~`Find`\ncollapsed:: true",536870919]],["^15",[238,"^O","^16",536870919]],["^15",[238,"^F",215,536870919]],["^15",[238,"^X",27,536870919]],["^15",[238,"^V",215,536870919]],["^15",[238,"^U",27,536870919]],["^15",[238,"^?",["^ "],536870927]],["^15",[238,"^J",[],536870927]],["^15",[238,"^4",["^ "],536870927]],["^15",[238,"^;","~u65410d7a-0a0d-4764-82d3-dd1d57993d8e",536870919]],["^15",[239,"^M",true,536870919]],["^15",[239,"^Q","è possibile validare le data annotation tramite l'oggetto built in `ValidationContext`\ncollapsed:: true",536870919]],["^15",[239,"^O","^16",536870919]],["^15",[239,"^F",247,536870919]],["^15",[239,"^X",27,536870919]],["^15",[239,"^V",99,536870919]],["^15",[239,"^U",27,536870919]],["^15",[239,"^?",["^ "],536870927]],["^15",[239,"^J",[],536870927]],["^15",[239,"^4",["^ "],536870927]],["^15",[239,"^;","~u65410d7a-c268-4fcd-b22c-b2a5068a8512",536870919]],["^15",[240,"^Q","~```C#\nint.TryParse(\"1\", out int var)\n```",536870919]],["^15",[240,"^O","^16",536870919]],["^15",[240,"^F",285,536870919]],["^15",[240,"^X",27,536870919]],["^15",[240,"^V",285,536870919]],["^15",[240,"^U",27,536870919]],["^15",[240,"^;","~u65410d7a-3e35-45ee-8f73-695f36ac78ae",536870919]],["^15",[241,"^Q","~```C#\nConsole.CursorLeft\nConsole.CursorTop\n```",536870919]],["^15",[241,"^O","^16",536870919]],["^15",[241,"^F",103,536870919]],["^15",[241,"^X",27,536870919]],["^15",[241,"^V",103,536870919]],["^15",[241,"^U",27,536870919]],["^15",[241,"^;","~u65410d7a-d70b-4921-9e28-8b726a6efe88",536870919]],["^15",[242,"^Q","è comodo per esempio per passare come parametri degli Enum cosa che non potresti fare in una funzione normale non avendo un tipo",536870919]],["^15",[242,"^O","^16",536870919]],["^15",[242,"^F",231,536870919]],["^15",[242,"^X",27,536870919]],["^15",[242,"^V",95,536870919]],["^15",[242,"^U",27,536870919]],["^15",[242,"^;","~u65410d7a-de58-4c63-b96d-b0b599dd0fce",536870919]],["^15",[243,"^Q","in C# non esiste built-in la classe singleton",536870919]],["^15",[243,"^O","^16",536870919]],["^15",[243,"^F",273,536870919]],["^15",[243,"^X",27,536870919]],["^15",[243,"^V",273,536870919]],["^15",[243,"^U",27,536870919]],["^15",[243,"^;","~u65410d7a-6437-495a-9b88-85505049421a",536870919]],["^15",[244,"^Q","il passaggio dati per referenza fa si che non venga passato il valore di una variabile ad una funzione, bensì la sua porzione di memoria",536870919]],["^15",[244,"^O","^16",536870919]],["^15",[244,"^F",148,536870919]],["^15",[244,"^X",27,536870919]],["^15",[244,"^V",148,536870919]],["^15",[244,"^U",27,536870919]],["^15",[244,"^;","~u65410d7a-3f88-4721-aae9-6d81cad05303",536870919]],["^15",[245,"^M",true,536870919]],["^15",[245,"^Q","~`Range`\ncollapsed:: true",536870919]],["^15",[245,"^O","^16",536870919]],["^15",[245,"^F",335,536870919]],["^15",[245,"^X",27,536870919]],["^15",[245,"^V",292,536870919]],["^15",[245,"^U",27,536870919]],["^15",[245,"^?",["^ "],536870927]],["^15",[245,"^J",[],536870927]],["^15",[245,"^4",["^ "],536870927]],["^15",[245,"^;","~u65410d7a-5b8a-4812-af48-4fde49d1fc09",536870919]],["^15",[246,"^Q","funzioni anonime",536870919]],["^15",[246,"^O","^16",536870919]],["^15",[246,"^F",235,536870919]],["^15",[246,"^X",27,536870919]],["^15",[246,"^V",235,536870919]],["^15",[246,"^U",27,536870919]],["^15",[246,"^;","~u65410d7a-383e-4798-9b73-607bc2dd2fe1",536870919]],["^15",[247,"^Q","~```C#\n[Range(4,10, ErrorMessage = \"error message\")]\n```",536870919]],["^15",[247,"^O","^16",536870919]],["^15",[247,"^F",289,536870919]],["^15",[247,"^X",27,536870919]],["^15",[247,"^V",99,536870919]],["^15",[247,"^U",27,536870919]],["^15",[247,"^;","~u65410d7a-678d-47fa-a65d-f9e683c5296d",536870919]],["^15",[248,"^Q","~```C#\nclass Name\n{\n    [Annotation] \n    readonly int id ;\n```",536870919]],["^15",[248,"^O","^16",536870919]],["^15",[248,"^F",260,536870919]],["^15",[248,"^X",27,536870919]],["^15",[248,"^V",99,536870919]],["^15",[248,"^U",27,536870919]],["^15",[248,"^;","~u65410d7a-e66c-49ad-acfa-556c69be0e26",536870919]],["^15",[249,"^Q","visibile dalla classe corrente e sottoclassi",536870919]],["^15",[249,"^O","^16",536870919]],["^15",[249,"^F",119,536870919]],["^15",[249,"^X",27,536870919]],["^15",[249,"^V",119,536870919]],["^15",[249,"^U",27,536870919]],["^15",[249,"^;","~u65410d7a-ba70-41a4-bc62-ee13981fe729",536870919]],["^15",[250,"^Q","~```C#\nDirectoryInfo dir = new(\"Path/to/dir\");\n```",536870919]],["^15",[250,"^O","^16",536870919]],["^15",[250,"^F",141,536870919]],["^15",[250,"^X",27,536870919]],["^15",[250,"^V",341,536870919]],["^15",[250,"^U",27,536870919]],["^15",[250,"^;","~u65410d7a-6946-4908-b1a9-10f0bec0d84f",536870919]],["^15",[251,"^Q","~```C#\nStreamReader sr = new(\"Path/to/file\"); \n```",536870919]],["^15",[251,"^O","^16",536870919]],["^15",[251,"^F",175,536870919]],["^15",[251,"^X",27,536870919]],["^15",[251,"^V",326,536870919]],["^15",[251,"^U",27,536870919]],["^15",[251,"^;","~u65410d7a-3fcb-49e0-bd15-6bdbb82b27d4",536870919]],["^15",[252,"^Q","è possibile leggere un intero file e salvarlo in una lista di stringhe in questo modo:",536870919]],["^15",[252,"^O","^16",536870919]],["^15",[252,"^F",96,536870919]],["^15",[252,"^X",27,536870919]],["^15",[252,"^V",41,536870919]],["^15",[252,"^U",27,536870919]],["^15",[252,"^;","~u65410d7a-f21c-470f-8ac8-151ebe4b3114",536870919]],["^15",[253,"^M",true,536870919]],["^15",[253,"^Q","~`private`\nid:: 6527a3c5-e1e1-4922-a7de-7a56e2fb6e3e\ncollapsed:: true",536870919]],["^15",[253,"^O","^16",536870919]],["^15",[253,"^F",350,536870919]],["^15",[253,"^X",27,536870919]],["^15",[253,"^V",232,536870919]],["^15",[253,"^U",27,536870919]],["^15",[253,"^?",["^ ","^1:","6527a3c5-e1e1-4922-a7de-7a56e2fb6e3e"],536870927]],["^15",[253,"^J",["^1:"],536870927]],["^15",[253,"^4",["^ ","^1:","6527a3c5-e1e1-4922-a7de-7a56e2fb6e3e"],536870927]],["^15",[253,"^;","~u6527a3c5-e1e1-4922-a7de-7a56e2fb6e3e",536870919]],["^15",[254,"^Q","visibile su più progetti",536870919]],["^15",[254,"^O","^16",536870919]],["^15",[254,"^F",67,536870919]],["^15",[254,"^X",27,536870919]],["^15",[254,"^V",67,536870919]],["^15",[254,"^U",27,536870919]],["^15",[254,"^;","~u65410d7a-f233-4eb0-abe1-273fd3a3d107",536870919]],["^15",[255,"^Q","un HASH è chiamata anche OneWayHash ciò significa che non può esser decryptata. però, visto che due stringhe uguali andranno a generare un hash identica sarà possibile quindi eguliare l'hash salvata e l'hash calcolata al momento, se sono uguali allora la parola di origine è stata trovata",536870919]],["^15",[255,"^O","^16",536870919]],["^15",[255,"^F",49,536870919]],["^15",[255,"^X",27,536870919]],["^15",[255,"^V",213,536870919]],["^15",[255,"^U",27,536870919]],["^15",[255,"^;","~u65410d7a-360f-431b-bd90-3de25c68b632",536870919]],["^15",[256,"^M",true,536870919]],["^15",[256,"^Q","*StreamWriter*\ncollapsed:: true",536870919]],["^15",[256,"^O","^16",536870919]],["^15",[256,"^F",341,536870919]],["^15",[256,"^X",27,536870919]],["^15",[256,"^V",300,536870919]],["^15",[256,"^U",27,536870919]],["^15",[256,"^?",["^ "],536870927]],["^15",[256,"^J",[],536870927]],["^15",[256,"^4",["^ "],536870927]],["^15",[256,"^;","~u65410d7a-25bc-4c15-b74c-54396ba795af",536870919]],["^15",[257,"^M",true,536870919]],["^15",[257,"^Q","*||*\ncollapsed:: true",536870919]],["^15",[257,"^O","^16",536870919]],["^15",[257,"^F",277,536870919]],["^15",[257,"^X",27,536870919]],["^15",[257,"^V",179,536870919]],["^15",[257,"^U",27,536870919]],["^15",[257,"^?",["^ "],536870927]],["^15",[257,"^J",[],536870927]],["^15",[257,"^4",["^ "],536870927]],["^15",[257,"^;","~u65410d7a-bf92-48bd-9979-aa60e01f1399",536870919]],["^15",[258,"^Q","~```C#\nlist.add(Var);\t\t\t\t\t//aggiunge un elemento alla lista\nlist.remove(Var);\t\t\t\t//rimuove un elemento alla lista\nlist.foreach(x => method(x))\t//per ogni elemento esegue un metodo\n```",536870919]],["^15",[258,"^O","^16",536870919]],["^15",[258,"^F",313,536870919]],["^15",[258,"^X",27,536870919]],["^15",[258,"^V",313,536870919]],["^15",[258,"^U",27,536870919]],["^15",[258,"^;","~u65410d7a-cf72-483f-802b-715409442519",536870919]],["^15",[260,"^Q","le `dataAnnotation` servono per la validazioni di dati",536870919]],["^15",[260,"^O","^16",536870919]],["^15",[260,"^F",99,536870919]],["^15",[260,"^X",27,536870919]],["^15",[260,"^V",99,536870919]],["^15",[260,"^U",27,536870919]],["^15",[260,"^;","~u65410d7a-7aac-486c-a60b-03eeb8f976d9",536870919]],["^15",[261,"^Q","tutti gli oggetti da serializzare devono avere attributi `getter` & `setter` pubbici",536870919]],["^15",[261,"^O","^16",536870919]],["^15",[261,"^F",308,536870919]],["^15",[261,"^X",27,536870919]],["^15",[261,"^V",286,536870919]],["^15",[261,"^U",27,536870919]],["^15",[261,"^;","~u65410d7a-4c00-41bc-a603-0ce287f441d7",536870919]],["^15",[262,"^Q","SHA128\nlogseq.order-list-type:: number",536870919]],["^15",[262,"^O","^16",536870919]],["^15",[262,"^F",72,536870919]],["^15",[262,"^X",27,536870919]],["^15",[262,"^V",49,536870919]],["^15",[262,"^U",27,536870919]],["^15",[262,"^?",["^ ","^19","number"],536870927]],["^15",[262,"^J",["^19"],536870927]],["^15",[262,"^4",["^ ","^19","number"],536870927]],["^15",[262,"^;","~u65410d7a-48d8-45c6-a43e-c217ac8e2360",536870919]],["^15",[263,"^Q","~```C#\nwhile(condition){\n\t//istruzioni\n}\n```",536870919]],["^15",[263,"^O","^16",536870919]],["^15",[263,"^F",333,536870919]],["^15",[263,"^X",27,536870919]],["^15",[263,"^V",358,536870919]],["^15",[263,"^U",27,536870919]],["^15",[263,"^;","~u65410d7a-1f87-43e0-902e-f3e8f0839bad",536870919]],["^15",[264,"^Q","id:: 652f7406-2a99-4dad-8c23-36ae5dbd519a\n```C#\nclass childClass : MotherClass\t\n{\n\t//codice\n}\n```",536870919]],["^15",[264,"^O","^16",536870919]],["^15",[264,"^F",191,536870919]],["^15",[264,"^X",27,536870919]],["^15",[264,"^V",31,536870919]],["^15",[264,"^U",27,536870919]],["^15",[264,"^?",["^ ","^1:","652f7406-2a99-4dad-8c23-36ae5dbd519a"],536870927]],["^15",[264,"^J",["^1:"],536870927]],["^15",[264,"^4",["^ ","^1:","652f7406-2a99-4dad-8c23-36ae5dbd519a"],536870927]],["^15",[264,"^;","~u652f7406-2a99-4dad-8c23-36ae5dbd519a",536870919]],["^15",[265,"^M",true,536870919]],["^15",[265,"^Q","**caratteri di escape**\ncollapsed:: true",536870919]],["^15",[265,"^O","^16",536870919]],["^15",[265,"^F",185,536870919]],["^15",[265,"^X",27,536870919]],["^15",[265,"^V",43,536870919]],["^15",[265,"^U",27,536870919]],["^15",[265,"^?",["^ "],536870927]],["^15",[265,"^J",[],536870927]],["^15",[265,"^4",["^ "],536870927]],["^15",[265,"^;","~u65410d7a-7d3c-4b58-8a7e-c7c3054ec895",536870919]],["^15",[266,"^M",true,536870919]],["^15",[266,"^Q","**funzione classica**\ncollapsed:: true",536870919]],["^15",[266,"^O","^16",536870919]],["^15",[266,"^F",174,536870919]],["^15",[266,"^X",27,536870919]],["^15",[266,"^V",174,536870919]],["^15",[266,"^U",27,536870919]],["^15",[266,"^?",["^ "],536870927]],["^15",[266,"^J",[],536870927]],["^15",[266,"^4",["^ "],536870927]],["^15",[266,"^;","~u65410d7a-95da-4ea3-aa8e-e174e94522fc",536870919]],["^15",[267,"^M",true,536870919]],["^15",[267,"^Q","**input**\ncollapsed:: true",536870919]],["^15",[267,"^O","^16",536870919]],["^15",[267,"^F",43,536870919]],["^15",[267,"^X",27,536870919]],["^15",[267,"^V",43,536870919]],["^15",[267,"^U",27,536870919]],["^15",[267,"^?",["^ "],536870927]],["^15",[267,"^J",[],536870927]],["^15",[267,"^4",["^ "],536870927]],["^15",[267,"^;","~u65410d7a-fa81-4fee-af8c-77cb364f9852",536870919]],["^15",[269,"^Q","~```C#\nList<type> list = new List<>();\n```",536870919]],["^15",[269,"^O","^16",536870919]],["^15",[269,"^F",280,536870919]],["^15",[269,"^X",27,536870919]],["^15",[269,"^V",280,536870919]],["^15",[269,"^U",27,536870919]],["^15",[269,"^;","~u65410d7a-1ea2-4ce5-9827-5a0620a60044",536870919]],["^15",[270,"^Q","~```C#\nint = 0;\n```",536870919]],["^15",[270,"^O","^16",536870919]],["^15",[270,"^F",87,536870919]],["^15",[270,"^X",27,536870919]],["^15",[270,"^V",81,536870919]],["^15",[270,"^U",27,536870919]],["^15",[270,"^;","~u65410d7a-8aad-44f2-84cb-998cc1abeb01",536870919]],["^15",[271,"^Q","*lettura di un file*",536870919]],["^15",[271,"^O","^16",536870919]],["^15",[271,"^F",251,536870919]],["^15",[271,"^X",27,536870919]],["^15",[271,"^V",326,536870919]],["^15",[271,"^U",27,536870919]],["^15",[271,"^;","~u65410d7a-6802-4303-94fe-995ccf0850dc",536870919]],["^15",[272,"^Q","~```C#\nprivate void func() => //un istruzione\n```",536870919]],["^15",[272,"^O","^16",536870919]],["^15",[272,"^F",230,536870919]],["^15",[272,"^X",27,536870919]],["^15",[272,"^V",276,536870919]],["^15",[272,"^U",27,536870919]],["^15",[272,"^;","~u65410d7a-22c6-4c39-9b4d-225e59f25d4b",536870919]],["^15",[273,"^M",true,536870919]],["^15",[273,"^Q","una classe singleton è una classe che potrà avere solo 1 istanza\ncollapsed:: true",536870919]],["^15",[273,"^O","^16",536870919]],["^15",[273,"^F",80,536870919]],["^15",[273,"^X",27,536870919]],["^15",[273,"^V",80,536870919]],["^15",[273,"^U",27,536870919]],["^15",[273,"^?",["^ "],536870927]],["^15",[273,"^J",[],536870927]],["^15",[273,"^4",["^ "],536870927]],["^15",[273,"^;","~u65410d7a-2397-4b00-b1af-9dcdccc0e1d6",536870919]],["^15",[274,"^Q","~```C#\nList<string> strList = new(){\"data1\", \"d4ta2\", \"data3\", \"data 4\"};\nList<string> filtred = (from el in strList \n\t\t\t\t\t\twhere el.Contains(\"data\")\n                       \tselect el\n                       ).toList();\n```",536870919]],["^15",[274,"^O","^16",536870919]],["^15",[274,"^F",66,536870919]],["^15",[274,"^X",27,536870919]],["^15",[274,"^V",66,536870919]],["^15",[274,"^U",27,536870919]],["^15",[274,"^;","~u65410d7a-28c3-453d-a760-385364494483",536870919]],["^15",[276,"^M",true,536870919]],["^15",[276,"^Q","**lambda function**\ncollapsed:: true",536870919]],["^15",[276,"^O","^16",536870919]],["^15",[276,"^F",266,536870919]],["^15",[276,"^X",27,536870919]],["^15",[276,"^V",174,536870919]],["^15",[276,"^U",27,536870919]],["^15",[276,"^?",["^ "],536870927]],["^15",[276,"^J",[],536870927]],["^15",[276,"^4",["^ "],536870927]],["^15",[276,"^;","~u65410d7a-b814-4198-997e-0eeb45cad885",536870919]],["^15",[277,"^M",true,536870919]],["^15",[277,"^Q","*&&*\ncollapsed:: true",536870919]],["^15",[277,"^O","^16",536870919]],["^15",[277,"^F",179,536870919]],["^15",[277,"^X",27,536870919]],["^15",[277,"^V",179,536870919]],["^15",[277,"^U",27,536870919]],["^15",[277,"^?",["^ "],536870927]],["^15",[277,"^J",[],536870927]],["^15",[277,"^4",["^ "],536870927]],["^15",[277,"^;","~u65410d7a-e007-4734-a9fd-63768307dd6d",536870919]],["^15",[278,"^Q","~```C#\nName na = Name.Data1  //in questo momento n avrà il valore di Data1\nint n = (int) na\t  //è possibile avere l'ID castando ad intero\n```",536870919]],["^15",[278,"^O","^16",536870919]],["^15",[278,"^F",190,536870919]],["^15",[278,"^X",27,536870919]],["^15",[278,"^V",190,536870919]],["^15",[278,"^U",27,536870919]],["^15",[278,"^;","~u65410d7a-2f54-42dc-97ae-6d4f28aeec4c",536870919]],["^15",[279,"^M",true,536870919]],["^15",[279,"^Q","~`\\r`\ncollapsed:: true",536870919]],["^15",[279,"^O","^16",536870919]],["^15",[279,"^F",115,536870919]],["^15",[279,"^X",27,536870919]],["^15",[279,"^V",265,536870919]],["^15",[279,"^U",27,536870919]],["^15",[279,"^?",["^ "],536870927]],["^15",[279,"^J",[],536870927]],["^15",[279,"^4",["^ "],536870927]],["^15",[279,"^;","~u65410d7a-0f54-4135-b4ba-7a7f6c3dc1a8",536870919]],["^15",[280,"^M",true,536870919]],["^15",[280,"^Q","una lista è una collection dati che permette di contenere una quantità non limitata di oggetti\ncollapsed:: true",536870919]],["^15",[280,"^O","^16",536870919]],["^15",[280,"^F",187,536870919]],["^15",[280,"^X",27,536870919]],["^15",[280,"^V",187,536870919]],["^15",[280,"^U",27,536870919]],["^15",[280,"^?",["^ "],536870927]],["^15",[280,"^J",[],536870927]],["^15",[280,"^4",["^ "],536870927]],["^15",[280,"^;","~u65410d7a-046b-4edd-b7c7-39d0e810565b",536870919]],["^15",[281,"^Q","l'incapsulamento è la capacità di un oggetto di una classe madre di nascondere la sua implementazione ad una classe figlia e permettere l'accesso di quel valore solo tramite `getter` e `setter`",536870919]],["^15",[281,"^O","^16",536870919]],["^15",[281,"^F",210,536870919]],["^15",[281,"^X",27,536870919]],["^15",[281,"^V",210,536870919]],["^15",[281,"^U",27,536870919]],["^15",[281,"^;","~u65410d7a-9ed7-4c28-b9da-5384cbdd1526",536870919]],["^15",[282,"^Q","permette l'esecuzione di più istruzioni in un blocco",536870919]],["^15",[282,"^O","^16",536870919]],["^15",[282,"^F",266,536870919]],["^15",[282,"^X",27,536870919]],["^15",[282,"^V",266,536870919]],["^15",[282,"^U",27,536870919]],["^15",[282,"^;","~u65410d7a-87c1-4e36-b73e-93cec71a4d16",536870919]],["^15",[283,"^Q","~```C#\ninternal enum Name\n{\n\tData1 = 10,\t//in questo modo la conta pratirà da 10\n    Data2,\t\t//11\n    Data3\t\t//12\n}\n```",536870919]],["^15",[283,"^O","^16",536870919]],["^15",[283,"^F",201,536870919]],["^15",[283,"^X",27,536870919]],["^15",[283,"^V",201,536870919]],["^15",[283,"^U",27,536870919]],["^15",[283,"^;","~u65410d7a-2535-457d-ad88-959f0e2b313a",536870919]],["^15",[284,"^Q","SHA256\nlogseq.order-list-type:: number",536870919]],["^15",[284,"^O","^16",536870919]],["^15",[284,"^F",262,536870919]],["^15",[284,"^X",27,536870919]],["^15",[284,"^V",49,536870919]],["^15",[284,"^U",27,536870919]],["^15",[284,"^?",["^ ","^19","number"],536870927]],["^15",[284,"^J",["^19"],536870927]],["^15",[284,"^4",["^ ","^19","number"],536870927]],["^15",[284,"^;","~u65410d7a-a10e-47b1-8ff6-0cd76819b620",536870919]],["^15",[285,"^M",true,536870919]],["^15",[285,"^Q","nel caso in cui si tenti per esempio di fare il parsing di una stringa ad intero potrebbe dare errore nel momento in cui tu cerchi di convertire una lettera a intero è possibile usare di conseguenza il metodo ``TryParse(var, out var)``\ncollapsed:: true",536870919]],["^15",[285,"^O","^16",536870919]],["^15",[285,"^F",195,536870919]],["^15",[285,"^X",27,536870919]],["^15",[285,"^V",153,536870919]],["^15",[285,"^U",27,536870919]],["^15",[285,"^?",["^ "],536870927]],["^15",[285,"^J",[],536870927]],["^15",[285,"^4",["^ "],536870927]],["^15",[285,"^;","~u65410d7a-f6d3-4768-88f9-fb048f84dd7b",536870919]],["^15",[286,"^M",true,536870919]],["^15",[286,"^Q","*XML*\ncollapsed:: true",536870919]],["^15",[286,"^O","^16",536870919]],["^15",[286,"^F",412,536870927]],["^15",[286,"^X",27,536870919]],["^15",[286,"^V",79,536870919]],["^15",[286,"^U",27,536870919]],["^15",[286,"^?",["^ "],536870927]],["^15",[286,"^J",[],536870927]],["^15",[286,"^4",["^ "],536870927]],["^15",[286,"^;","~u65410d7a-9f5b-4b95-bdb4-5cc361e2a1e4",536870919]],["^15",[287,"^Q","~```C#\nDictionary<Tkey, Tvar> dic = new();\ndic.add(Tkey, Tvar)\n```",536870919]],["^15",[287,"^O","^16",536870919]],["^15",[287,"^F",133,536870919]],["^15",[287,"^X",27,536870919]],["^15",[287,"^V",133,536870919]],["^15",[287,"^U",27,536870919]],["^15",[287,"^;","~u65410d7a-e332-46a6-8689-94f0eb173d48",536870919]],["^15",[288,"^Q","~```C#\ntime.ToString(\"format\") //il metodo ToString accetta in input il formato\n```",536870919]],["^15",[288,"^O","^16",536870919]],["^15",[288,"^F",203,536870919]],["^15",[288,"^X",27,536870919]],["^15",[288,"^V",203,536870919]],["^15",[288,"^U",27,536870919]],["^15",[288,"^;","~u65410d7a-5e1a-4d4b-b4e9-d94b20b17c17",536870919]],["^15",[289,"^Q","è possibile assegnare degli `ErrorMessage` personalizzati in questo modo:",536870919]],["^15",[289,"^O","^16",536870919]],["^15",[289,"^F",292,536870919]],["^15",[289,"^X",27,536870919]],["^15",[289,"^V",99,536870919]],["^15",[289,"^U",27,536870919]],["^15",[289,"^;","~u65410d7a-3697-4a6f-8211-728d6b5900fc",536870919]],["^15",[290,"^Q","## GENERALI",536870919]],["^15",[290,"^O","^16",536870919]],["^15",[290,"^F",27,536870919]],["^15",[290,"^X",27,536870919]],["^15",[290,"^V",27,536870919]],["^15",[290,"^U",27,536870919]],["^15",[290,"^?",["^ ","^1;",2],536870927]],["^15",[290,"^J",[],536870927]],["^15",[290,"^;","~u65410d7a-a417-437a-b1b0-b4f3df5a729e",536870919]],["^15",[291,"^M",false,536870938]],["^15",[291,"^Q","**METODI**\ncollapsed:: true",536870919]],["^15",[291,"^O","^16",536870919]],["^15",[291,"^F",197,536870919]],["^15",[291,"^X",27,536870919]],["^15",[291,"^V",290,536870919]],["^15",[291,"^U",27,536870919]],["^15",[291,"^?",["^ "],536870927]],["^15",[291,"^J",[],536870927]],["^15",[291,"^4",["^ "],536870927]],["^15",[291,"^;","~u65410d7a-4111-4f83-bbeb-95303723b6ca",536870919]],["^15",[292,"^M",true,536870919]],["^15",[292,"^Q","ecco alcuni esempi:\ncollapsed:: true",536870919]],["^15",[292,"^O","^16",536870919]],["^15",[292,"^F",248,536870919]],["^15",[292,"^X",27,536870919]],["^15",[292,"^V",99,536870919]],["^15",[292,"^U",27,536870919]],["^15",[292,"^?",["^ "],536870927]],["^15",[292,"^J",[],536870927]],["^15",[292,"^4",["^ "],536870927]],["^15",[292,"^;","~u65410d7a-b533-4c9e-a0f0-6b1fc9022a09",536870919]],["^15",[293,"^M",true,536870919]],["^15",[293,"^Q","*try-catch*\ncollapsed:: true",536870919]],["^15",[293,"^O","^16",536870919]],["^15",[293,"^F",43,536870919]],["^15",[293,"^X",27,536870919]],["^15",[293,"^V",197,536870919]],["^15",[293,"^U",27,536870919]],["^15",[293,"^?",["^ "],536870927]],["^15",[293,"^J",[],536870927]],["^15",[293,"^4",["^ "],536870927]],["^15",[293,"^;","~u65410d7a-7cc0-47a7-9b7c-7d385a68b39e",536870919]],["^15",[294,"^M",true,536870919]],["^15",[294,"^Q","**for**\ncollapsed:: true",536870919]],["^15",[294,"^O","^16",536870919]],["^15",[294,"^F",225,536870919]],["^15",[294,"^X",27,536870919]],["^15",[294,"^V",65,536870919]],["^15",[294,"^U",27,536870919]],["^15",[294,"^?",["^ "],536870927]],["^15",[294,"^J",[],536870927]],["^15",[294,"^4",["^ "],536870927]],["^15",[294,"^;","~u65410d7a-8658-480d-af9a-6bce31849fbd",536870919]],["^15",[295,"^Q","~```C#\nList<string> filtred = strList.Where(s => s.Contains(\"data\"));\n```",536870919]],["^15",[295,"^O","^16",536870919]],["^15",[295,"^F",147,536870919]],["^15",[295,"^X",27,536870919]],["^15",[295,"^V",342,536870919]],["^15",[295,"^U",27,536870919]],["^15",[295,"^;","~u65410d7a-18d9-4f5a-9bde-ae64273e6c6e",536870919]],["^15",[296,"^Q","~```C#\npublic class Name\n{\n  \n}\n```",536870919]],["^15",[296,"^O","^16",536870919]],["^15",[296,"^F",150,536870919]],["^15",[296,"^X",27,536870919]],["^15",[296,"^V",321,536870919]],["^15",[296,"^U",27,536870919]],["^15",[296,"^;","~u65410d7a-d6dc-4da2-b469-b42989d5a923",536870919]],["^15",[297,"^Q","~```C#\nConsole.WriteLine(@\"...\\n\")\n```",536870919]],["^15",[297,"^O","^16",536870919]],["^15",[297,"^F",233,536870919]],["^15",[297,"^X",27,536870919]],["^15",[297,"^V",233,536870919]],["^15",[297,"^U",27,536870919]],["^15",[297,"^;","~u65410d7a-dd6a-44c0-9d59-72f45fded28a",536870919]],["^15",[298,"^Q","*DateTime*",536870919]],["^15",[298,"^O","^16",536870919]],["^15",[298,"^F",69,536870919]],["^15",[298,"^X",27,536870919]],["^15",[298,"^V",69,536870919]],["^15",[298,"^U",27,536870919]],["^15",[298,"^;","~u65410d7a-7ee1-4fd7-8701-44dfe7832639",536870919]],["^15",[299,"^M",true,536870919]],["^15",[299,"^Q","per poter istanziare un oggetto in C# sono presenti più metodi:\ncollapsed:: true",536870919]],["^15",[299,"^O","^16",536870919]],["^15",[299,"^F",164,536870919]],["^15",[299,"^X",27,536870919]],["^15",[299,"^V",164,536870919]],["^15",[299,"^U",27,536870919]],["^15",[299,"^?",["^ "],536870927]],["^15",[299,"^J",[],536870927]],["^15",[299,"^4",["^ "],536870927]],["^15",[299,"^;","~u65410d7a-b5d7-41ff-88e8-c8a7154cd111",536870919]],["^15",[300,"^M",true,536870919]],["^15",[300,"^Q","**GESTIONE FILESYSTEM**\ncollapsed:: true",536870919]],["^15",[300,"^O","^16",536870919]],["^15",[300,"^F",69,536870919]],["^15",[300,"^X",27,536870919]],["^15",[300,"^V",290,536870919]],["^15",[300,"^U",27,536870919]],["^15",[300,"^?",["^ "],536870927]],["^15",[300,"^J",[],536870927]],["^15",[300,"^4",["^ "],536870927]],["^15",[300,"^;","~u65410d7a-e550-4c2a-afa4-5a8c5ae54136",536870919]],["^15",[301,"^Q","SHA512\nlogseq.order-list-type:: number",536870919]],["^15",[301,"^O","^16",536870919]],["^15",[301,"^F",284,536870919]],["^15",[301,"^X",27,536870919]],["^15",[301,"^V",49,536870919]],["^15",[301,"^U",27,536870919]],["^15",[301,"^?",["^ ","^19","number"],536870927]],["^15",[301,"^J",["^19"],536870927]],["^15",[301,"^4",["^ ","^19","number"],536870927]],["^15",[301,"^;","~u65410d7a-cada-44d2-9287-de213fee928b",536870919]],["^15",[302,"^M",true,536870919]],["^15",[302,"^Q","*if*\ncollapsed:: true",536870919]],["^15",[302,"^O","^16",536870919]],["^15",[302,"^F",293,536870919]],["^15",[302,"^X",27,536870919]],["^15",[302,"^V",197,536870919]],["^15",[302,"^U",27,536870919]],["^15",[302,"^?",["^ "],536870927]],["^15",[302,"^J",[],536870927]],["^15",[302,"^4",["^ "],536870927]],["^15",[302,"^;","~u65410d7a-0f78-4e17-a304-1c86d6a7ab59",536870919]],["^15",[303,"^Q","in C# è possibile definire fin da subito quando una variabile può essere solo letta o solo sovrascritta o entrambi attraverso le keyword `{get;}` e `{set;}`",536870919]],["^15",[303,"^O","^16",536870919]],["^15",[303,"^F",340,536870919]],["^15",[303,"^X",27,536870919]],["^15",[303,"^V",340,536870919]],["^15",[303,"^U",27,536870919]],["^15",[303,"^;","~u65410d7a-8e66-4a6e-ab8f-062c307d3480",536870919]],["^15",[304,"^M",true,536870919]],["^15",[304,"^Q","**statement lambda**\ncollapsed:: true",536870919]],["^15",[304,"^O","^16",536870919]],["^15",[304,"^F",217,536870919]],["^15",[304,"^X",27,536870919]],["^15",[304,"^V",235,536870919]],["^15",[304,"^U",27,536870919]],["^15",[304,"^?",["^ "],536870927]],["^15",[304,"^J",[],536870927]],["^15",[304,"^4",["^ "],536870927]],["^15",[304,"^;","~u65410d7a-7c52-4932-a848-daf42569535a",536870919]],["^15",[305,"^Q","~```C#\nXmlSerializer xml = new(MyObj.GetType());\n\nusing(StreamWriter sw = new(\"Path/to/xml\"))\n{\n\txml.Serialize(sw, MyObj);\n}\n```",536870919]],["^15",[305,"^O","^16",536870919]],["^15",[305,"^F",354,536870919]],["^15",[305,"^X",27,536870919]],["^15",[305,"^V",354,536870919]],["^15",[305,"^U",27,536870919]],["^15",[305,"^;","~u65410d7a-af95-45b7-ba4f-3fd6265bb591",536870919]],["^15",[306,"^Q","permette di prendere i input dei valori da console",536870919]],["^15",[306,"^O","^16",536870919]],["^15",[306,"^F",267,536870919]],["^15",[306,"^X",27,536870919]],["^15",[306,"^V",267,536870919]],["^15",[306,"^U",27,536870919]],["^15",[306,"^;","~u65410d7a-2409-49a9-9cfc-5500c34929e6",536870919]],["^15",[307,"^Q","~```C#\nList<string> lines = new();\n\nwhile((sline = sr.ReadLine()!) != null)\n\tlines.Add(sline);\n```",536870919]],["^15",[307,"^O","^16",536870919]],["^15",[307,"^F",252,536870919]],["^15",[307,"^X",27,536870919]],["^15",[307,"^V",252,536870919]],["^15",[307,"^U",27,536870919]],["^15",[307,"^;","~u65410d7a-51b6-4c72-81b2-60f76701da61",536870919]],["^15",[308,"^Q","eXtensible Markup Language",536870919]],["^15",[308,"^O","^16",536870919]],["^15",[308,"^F",286,536870919]],["^15",[308,"^X",27,536870919]],["^15",[308,"^V",286,536870919]],["^15",[308,"^U",27,536870919]],["^15",[308,"^;","~u65410d7a-d678-41c1-af4b-e8c00287bdb1",536870919]],["^15",[309,"^Q","i metodi e gli attributi abstract sarà neessario fargli l'override nella classe che la estenderà",536870919]],["^15",[309,"^O","^16",536870919]],["^15",[309,"^F",35,536870919]],["^15",[309,"^X",27,536870919]],["^15",[309,"^V",144,536870919]],["^15",[309,"^U",27,536870919]],["^15",[309,"^;","~u65410d7a-3026-43df-8796-561b1d527cf2",536870919]],["^15",[310,"^Q","con il metodo `ReadToEnd` è possibile leggere un intero flusso di byte e salvarlo tutto all'interno di una variabile di tipo stringa",536870919]],["^15",[310,"^O","^16",536870919]],["^15",[310,"^F",271,536870919]],["^15",[310,"^X",27,536870919]],["^15",[310,"^V",271,536870919]],["^15",[310,"^U",27,536870919]],["^15",[310,"^;","~u65410d7a-d21b-47b1-be03-8a89b8f29249",536870919]],["^15",[311,"^Q","~`dotnet add package Microsoft.AspNetCore.Cryptography.KeyDerivation --version 7.0.12`",536870919]],["^15",[311,"^O","^16",536870919]],["^15",[311,"^F",46,536870919]],["^15",[311,"^X",27,536870919]],["^15",[311,"^V",46,536870919]],["^15",[311,"^U",27,536870919]],["^15",[311,"^;","~u65410d7a-a4a6-4d6b-aa89-1f679a47efb3",536870919]],["^15",[312,"^Q","~```C#\nforeach (Name na in Enum.GetValues(typeof(Name)))\n{\n\tConsole.WriteLine(na);\n}\n```",536870919]],["^15",[312,"^O","^16",536870919]],["^15",[312,"^F",126,536870919]],["^15",[312,"^X",27,536870919]],["^15",[312,"^V",126,536870919]],["^15",[312,"^U",27,536870919]],["^15",[312,"^;","~u65410d7a-5cf5-4cb9-9b6c-6311d633aff4",536870919]],["^15",[313,"^M",true,536870919]],["^15",[313,"^Q","le liste posseggono molti metodi per poter gestire i dati al loro interno, ecco alcuni esempi:\ncollapsed:: true",536870919]],["^15",[313,"^O","^16",536870919]],["^15",[313,"^F",280,536870919]],["^15",[313,"^X",27,536870919]],["^15",[313,"^V",187,536870919]],["^15",[313,"^U",27,536870919]],["^15",[313,"^?",["^ "],536870927]],["^15",[313,"^J",[],536870927]],["^15",[313,"^4",["^ "],536870927]],["^15",[313,"^;","~u65410d7a-3326-4bf8-823b-a6b5d2424f89",536870919]],["^15",[314,"^Q","un array è una collection dati che permette di salvare massimo tot numero di oggetti",536870919]],["^15",[314,"^O","^16",536870919]],["^15",[314,"^F",331,536870919]],["^15",[314,"^X",27,536870919]],["^15",[314,"^V",331,536870919]],["^15",[314,"^U",27,536870919]],["^15",[314,"^;","~u65410d7a-44db-442f-ab5f-969eefde34e3",536870919]],["^15",[315,"^M",true,536870919]],["^15",[315,"^Q","deserializzare un json per esempio letto da file e serializzarlo come lista di oggetti\ncollapsed:: true",536870919]],["^15",[315,"^O","^16",536870919]],["^15",[315,"^F",345,536870919]],["^15",[315,"^X",27,536870919]],["^15",[315,"^V",345,536870919]],["^15",[315,"^U",27,536870919]],["^15",[315,"^?",["^ "],536870927]],["^15",[315,"^J",[],536870927]],["^15",[315,"^4",["^ "],536870927]],["^15",[315,"^;","~u65410d7a-2ed8-4e7a-9a05-9162dc8271a3",536870919]],["^15",[316,"^Q","~```C#\ntry\n{\n\t//codice\n}\ncatch(Exception e)\n{\n  \t// gestione errori\n}\nfinally\n{\n\t// codice che viene sempre eseguito a prescindere da che blocco entra\n}\n```",536870919]],["^15",[316,"^O","^16",536870919]],["^15",[316,"^F",293,536870919]],["^15",[316,"^X",27,536870919]],["^15",[316,"^V",293,536870919]],["^15",[316,"^U",27,536870919]],["^15",[316,"^;","~u65410d7a-00df-4c5f-8523-c38bb9ef97ad",536870919]],["^15",[317,"^M",true,536870919]],["^15",[317,"^Q","~`MinLenght`\ncollapsed:: true",536870919]],["^15",[317,"^O","^16",536870919]],["^15",[317,"^F",223,536870919]],["^15",[317,"^X",27,536870919]],["^15",[317,"^V",292,536870919]],["^15",[317,"^U",27,536870919]],["^15",[317,"^?",["^ "],536870927]],["^15",[317,"^J",[],536870927]],["^15",[317,"^4",["^ "],536870927]],["^15",[317,"^;","~u65410d7a-5df3-474e-a0b7-aac60b331dfa",536870919]],["^15",[318,"^M",true,536870919]],["^15",[318,"^Q","permette di stampare a console dei valori\ncollapsed:: true",536870919]],["^15",[318,"^O","^16",536870919]],["^15",[318,"^F",149,536870919]],["^15",[318,"^X",27,536870919]],["^15",[318,"^V",149,536870919]],["^15",[318,"^U",27,536870919]],["^15",[318,"^?",["^ "],536870927]],["^15",[318,"^J",[],536870927]],["^15",[318,"^4",["^ "],536870927]],["^15",[318,"^;","~u65410d7a-0557-4391-bb10-93fa81e2f8e6",536870919]],["^15",[319,"^M",true,536870919]],["^15",[319,"^Q","*ternary operator*\ncollapsed:: true",536870919]],["^15",[319,"^O","^16",536870919]],["^15",[319,"^F",302,536870919]],["^15",[319,"^X",27,536870919]],["^15",[319,"^V",197,536870919]],["^15",[319,"^U",27,536870919]],["^15",[319,"^?",["^ "],536870927]],["^15",[319,"^J",[],536870927]],["^15",[319,"^4",["^ "],536870927]],["^15",[319,"^;","~u65410d7a-2032-40f5-8a0f-5982d8b2b70f",536870919]],["^15",[320,"^Q","id:: 6527a615-9120-4328-96ab-f46f0c17ae6c\n```C#\n Tuple<int, string, Student> tuple = Tuple.Create(\n   1,\"parola\", new Student(\"denys\", \"raimondi\")\n );\n```",536870919]],["^15",[320,"^O","^16",536870919]],["^15",[320,"^F",74,536870919]],["^15",[320,"^X",27,536870919]],["^15",[320,"^V",328,536870919]],["^15",[320,"^U",27,536870919]],["^15",[320,"^?",["^ ","^1:","6527a615-9120-4328-96ab-f46f0c17ae6c"],536870927]],["^15",[320,"^J",["^1:"],536870927]],["^15",[320,"^4",["^ ","^1:","6527a615-9120-4328-96ab-f46f0c17ae6c"],536870927]],["^15",[320,"^;","~u6527a615-9120-4328-96ab-f46f0c17ae6c",536870919]],["^15",[321,"^M",true,536870919]],["^15",[321,"^Q","*classe*\ncollapsed:: true",536870919]],["^15",[321,"^O","^16",536870919]],["^15",[321,"^F",86,536870919]],["^15",[321,"^X",27,536870919]],["^15",[321,"^V",86,536870919]],["^15",[321,"^U",27,536870919]],["^15",[321,"^?",["^ "],536870927]],["^15",[321,"^J",[],536870927]],["^15",[321,"^4",["^ "],536870927]],["^15",[321,"^;","~u65410d7a-045f-48c5-a2bc-cfd41f674c1e",536870919]],["^15",[322,"^Q","OR",536870919]],["^15",[322,"^O","^16",536870919]],["^15",[322,"^F",257,536870919]],["^15",[322,"^X",27,536870919]],["^15",[322,"^V",257,536870919]],["^15",[322,"^U",27,536870919]],["^15",[322,"^;","~u65410d7a-d45b-44ea-8f9e-42160639cfe9",536870919]],["^15",[323,"^Q","~```C#\n[MaxLength(30)]\nreadonly string str;\n```",536870919]],["^15",[323,"^O","^16",536870919]],["^15",[323,"^F",68,536870919]],["^15",[323,"^X",27,536870919]],["^15",[323,"^V",223,536870919]],["^15",[323,"^U",27,536870919]],["^15",[323,"^;","~u65410d7a-ef11-4757-b13a-c3525f5576db",536870919]],["^15",[324,"^M",true,536870919]],["^15",[324,"^Q","di conseguenza non sarà possibile comparare l'HASH salvata con la nuova HASH appena calcolata per vedere la corrispondenza, perchè verranno generate HASH diverse.\ncollapsed:: true",536870919]],["^15",[324,"^O","^16",536870919]],["^15",[324,"^F",216,536870919]],["^15",[324,"^X",27,536870919]],["^15",[324,"^V",207,536870919]],["^15",[324,"^U",27,536870919]],["^15",[324,"^?",["^ "],536870927]],["^15",[324,"^J",[],536870927]],["^15",[324,"^4",["^ "],536870927]],["^15",[324,"^;","~u65410d7a-21c6-472c-b27c-efef075dda35",536870919]],["^15",[325,"^Q","Find ritorna la prima occorrenza della lista che corrispondono alla condizione",536870919]],["^15",[325,"^O","^16",536870919]],["^15",[325,"^F",238,536870919]],["^15",[325,"^X",27,536870919]],["^15",[325,"^V",238,536870919]],["^15",[325,"^U",27,536870919]],["^15",[325,"^;","~u65410d7a-4a64-4bec-b803-1373c186dc73",536870919]],["^15",[326,"^Q","*StreamReader*",536870919]],["^15",[326,"^O","^16",536870919]],["^15",[326,"^F",125,536870919]],["^15",[326,"^X",27,536870919]],["^15",[326,"^V",300,536870919]],["^15",[326,"^U",27,536870919]],["^15",[326,"^;","~u65410d7a-d85f-4b8c-b8de-5e829b9e171b",536870919]],["^15",[327,"^M",true,536870919]],["^15",[327,"^Q","~`Serialize`",536870927]],["^15",[327,"^O","^16",536870919]],["^15",[327,"^F",64,536870919]],["^15",[327,"^X",27,536870919]],["^15",[327,"^V",412,536870927]],["^15",[327,"^U",27,536870919]],["^15",[327,"^;","~u65410d7a-d7e4-413a-8cc3-8a43d5bd8e44",536870919]],["^15",[328,"^M",false,536870957]],["^15",[328,"^Q","una tupla è una particolare collection caratterizzata da vari record dove sono presenti più variabili anche di tipi diversi o oggetti\ncollapsed:: true",536870919]],["^15",[328,"^O","^16",536870919]],["^15",[328,"^F",208,536870919]],["^15",[328,"^X",27,536870919]],["^15",[328,"^V",208,536870919]],["^15",[328,"^U",27,536870919]],["^15",[328,"^?",["^ "],536870927]],["^15",[328,"^J",[],536870927]],["^15",[328,"^4",["^ "],536870927]],["^15",[328,"^;","~u65410d7a-eb2f-4074-93c0-8abddd6c5df5",536870919]],["^15",[329,"^Q","~```C#\nstring fData = File.ReadAllText(\"path/to/file\");\n```",536870919]],["^15",[329,"^O","^16",536870919]],["^15",[329,"^F",237,536870919]],["^15",[329,"^X",27,536870919]],["^15",[329,"^V",237,536870919]],["^15",[329,"^U",27,536870919]],["^15",[329,"^;","~u65410d7a-fd0e-4694-a862-4a161ea4e654",536870919]],["^15",[330,"^M",true,536870919]],["^15",[330,"^Q","una classe astratta è una classe i quali metodi e attributi le quali implementazioni sono mancanti o incomplete. o MotherClass la quale però non potrà avere un istanza\ncollapsed:: true",536870919]],["^15",[330,"^O","^16",536870919]],["^15",[330,"^F",144,536870919]],["^15",[330,"^X",27,536870919]],["^15",[330,"^V",144,536870919]],["^15",[330,"^U",27,536870919]],["^15",[330,"^?",["^ "],536870927]],["^15",[330,"^J",[],536870927]],["^15",[330,"^4",["^ "],536870927]],["^15",[330,"^;","~u65410d7a-b66d-4dcf-90e8-95c7714ffd7f",536870919]],["^15",[331,"^M",true,536870919]],["^15",[331,"^Q","*array*\ncollapsed:: true",536870919]],["^15",[331,"^O","^16",536870919]],["^15",[331,"^F",153,536870919]],["^15",[331,"^X",27,536870919]],["^15",[331,"^V",291,536870919]],["^15",[331,"^U",27,536870919]],["^15",[331,"^?",["^ "],536870927]],["^15",[331,"^J",[],536870927]],["^15",[331,"^4",["^ "],536870927]],["^15",[331,"^;","~u65410d7a-1204-46ef-960c-b603186b5982",536870919]],["^15",[332,"^Q","~```C#\n[DisplayName(\"name\")]\nreadonly string str;\n```",536870919]],["^15",[332,"^O","^16",536870919]],["^15",[332,"^F",52,536870919]],["^15",[332,"^X",27,536870919]],["^15",[332,"^V",335,536870919]],["^15",[332,"^U",27,536870919]],["^15",[332,"^;","~u65410d7a-3fd5-4b1c-ab0b-9767ef4ae0cf",536870919]],["^15",[333,"^Q","permette di eseguire una porzione di codice fin che una condizione è soddisfatta",536870919]],["^15",[333,"^O","^16",536870919]],["^15",[333,"^F",358,536870919]],["^15",[333,"^X",27,536870919]],["^15",[333,"^V",358,536870919]],["^15",[333,"^U",27,536870919]],["^15",[333,"^;","~u65410d7a-6532-4e13-aa68-cf75dd1c3877",536870919]],["^15",[334,"^Q","visibile dalle librerie",536870919]],["^15",[334,"^O","^16",536870919]],["^15",[334,"^F",254,536870919]],["^15",[334,"^X",27,536870919]],["^15",[334,"^V",67,536870919]],["^15",[334,"^U",27,536870919]],["^15",[334,"^;","~u65410d7a-bc02-41f0-be07-5b6dce65a0b8",536870919]],["^15",[335,"^M",true,536870919]],["^15",[335,"^Q","~`DisplayName`\ncollapsed:: true",536870919]],["^15",[335,"^O","^16",536870919]],["^15",[335,"^F",317,536870919]],["^15",[335,"^X",27,536870919]],["^15",[335,"^V",292,536870919]],["^15",[335,"^U",27,536870919]],["^15",[335,"^?",["^ "],536870927]],["^15",[335,"^J",[],536870927]],["^15",[335,"^4",["^ "],536870927]],["^15",[335,"^;","~u65410d7a-3caa-4447-acee-8477d851ff7d",536870919]],["^15",[336,"^Q","dice che quel dato DEVE esser assegnato",536870919]],["^15",[336,"^O","^16",536870919]],["^15",[336,"^F",366,536870919]],["^15",[336,"^X",27,536870919]],["^15",[336,"^V",366,536870919]],["^15",[336,"^U",27,536870919]],["^15",[336,"^;","~u65410d7a-0e01-464a-a064-b5c33f17464b",536870919]],["^15",[337,"^Q","è possibile estendere ed eriditare i metodi di sola una classe per volta",536870919]],["^15",[337,"^O","^16",536870919]],["^15",[337,"^F",167,536870919]],["^15",[337,"^X",27,536870919]],["^15",[337,"^V",31,536870919]],["^15",[337,"^U",27,536870919]],["^15",[337,"^;","~u65410d7a-4b5a-493b-a89b-cd0783af6f64",536870919]],["^15",[338,"^Q","invio",536870919]],["^15",[338,"^O","^16",536870919]],["^15",[338,"^F",279,536870919]],["^15",[338,"^X",27,536870919]],["^15",[338,"^V",279,536870919]],["^15",[338,"^U",27,536870919]],["^15",[338,"^;","~u65410d7a-17ca-45ad-a69a-0f881f0f1480",536870919]],["^15",[339,"^M",true,536870919]],["^15",[339,"^Q","ci sono vari modi per definire un getter o un setter\ncollapsed:: true",536870919]],["^15",[339,"^O","^16",536870919]],["^15",[339,"^F",82,536870919]],["^15",[339,"^X",27,536870919]],["^15",[339,"^V",220,536870919]],["^15",[339,"^U",27,536870919]],["^15",[339,"^?",["^ "],536870927]],["^15",[339,"^J",[],536870927]],["^15",[339,"^4",["^ "],536870927]],["^15",[339,"^;","~u65410d7a-e771-4317-ab18-990b4cb3b8da",536870919]],["^15",[340,"^M",true,536870919]],["^15",[340,"^Q","*NB*\ncollapsed:: true",536870919]],["^15",[340,"^O","^16",536870919]],["^15",[340,"^F",120,536870919]],["^15",[340,"^X",27,536870919]],["^15",[340,"^V",116,536870919]],["^15",[340,"^U",27,536870919]],["^15",[340,"^?",["^ "],536870927]],["^15",[340,"^J",[],536870927]],["^15",[340,"^4",["^ "],536870927]],["^15",[340,"^;","~u65410d7a-a169-4130-a2c6-2af2f8277220",536870919]],["^15",[341,"^M",true,536870919]],["^15",[341,"^Q","*DirectoryInfo*\ncollapsed:: true",536870919]],["^15",[341,"^O","^16",536870919]],["^15",[341,"^F",326,536870919]],["^15",[341,"^X",27,536870919]],["^15",[341,"^V",300,536870919]],["^15",[341,"^U",27,536870919]],["^15",[341,"^?",["^ "],536870927]],["^15",[341,"^J",[],536870927]],["^15",[341,"^4",["^ "],536870927]],["^15",[341,"^;","~u65410d7a-031f-4dae-a1f8-78350841d3bc",536870919]],["^15",[342,"^M",true,536870919]],["^15",[342,"^Q","~`Where`\ncollapsed:: true",536870919]],["^15",[342,"^O","^16",536870919]],["^15",[342,"^F",152,536870919]],["^15",[342,"^X",27,536870919]],["^15",[342,"^V",215,536870919]],["^15",[342,"^U",27,536870919]],["^15",[342,"^?",["^ "],536870927]],["^15",[342,"^J",[],536870927]],["^15",[342,"^4",["^ "],536870927]],["^15",[342,"^;","~u65410d7a-9359-4f4b-a7dc-e5ce6229facc",536870919]],["^15",[343,"^Q","~```C#\nsw.WriteLine(\"text\");\n```",536870919]],["^15",[343,"^O","^16",536870919]],["^15",[343,"^F",60,536870919]],["^15",[343,"^X",27,536870919]],["^15",[343,"^V",60,536870919]],["^15",[343,"^U",27,536870919]],["^15",[343,"^;","~u65410d7a-25c2-49c9-a301-3377f27df91f",536870919]],["^15",[344,"^Q","permette di fare dei controlli",536870919]],["^15",[344,"^O","^16",536870919]],["^15",[344,"^F",302,536870919]],["^15",[344,"^X",27,536870919]],["^15",[344,"^V",302,536870919]],["^15",[344,"^U",27,536870919]],["^15",[344,"^;","~u65410d7a-6306-463c-98ee-8c3493c33e09",536870919]],["^15",[345,"^M",true,536870919]],["^15",[345,"^Q","~`Deserialize`\ncollapsed:: true",536870919]],["^15",[345,"^O","^16",536870919]],["^15",[345,"^F",327,536870919]],["^15",[345,"^X",27,536870919]],["^15",[345,"^V",412,536870927]],["^15",[345,"^U",27,536870919]],["^15",[345,"^?",["^ "],536870927]],["^15",[345,"^J",[],536870927]],["^15",[345,"^4",["^ "],536870927]],["^15",[345,"^;","~u65410d7a-a21f-4738-9b3e-ab74853d1ac7",536870919]],["^15",[346,"^Q","~```C#\ndo{\n\t//istruzioni\n}while(condition)\n```",536870919]],["^15",[346,"^O","^16",536870919]],["^15",[346,"^F",184,536870919]],["^15",[346,"^X",27,536870919]],["^15",[346,"^V",225,536870919]],["^15",[346,"^U",27,536870919]],["^15",[346,"^;","~u65410d7a-3f89-416a-98a6-3939f7f51788",536870919]],["^15",[347,"^Q","~```C#\nConsole.WriteLine($\"valore tupla: {tuple.Item1}\\n\" + \n                  $\"{tuple.Item2}\\n\" + \n                  $\"\\n{tuple.Item3}\");\n```",536870919]],["^15",[347,"^O","^16",536870919]],["^15",[347,"^F",228,536870919]],["^15",[347,"^X",27,536870919]],["^15",[347,"^V",328,536870919]],["^15",[347,"^U",27,536870919]],["^15",[347,"^;","~u65410d7a-9106-4b77-a197-d117a6b5e8be",536870919]],["^15",[348,"^Q","dice che quell'attributo è una chiave, per esempio in un database",536870919]],["^15",[348,"^O","^16",536870919]],["^15",[348,"^F",204,536870919]],["^15",[348,"^X",27,536870919]],["^15",[348,"^V",204,536870919]],["^15",[348,"^U",27,536870919]],["^15",[348,"^;","~u65410d7a-8087-4894-9447-06f3217b5636",536870919]],["^15",[349,"^Q","MD5\nlogseq.order-list-type:: number",536870919]],["^15",[349,"^O","^16",536870919]],["^15",[349,"^F",301,536870919]],["^15",[349,"^X",27,536870919]],["^15",[349,"^V",49,536870919]],["^15",[349,"^U",27,536870919]],["^15",[349,"^?",["^ ","^19","number"],536870927]],["^15",[349,"^J",["^19"],536870927]],["^15",[349,"^4",["^ ","^19","number"],536870927]],["^15",[349,"^;","~u65410d7a-10c5-440f-a89a-497d67b51c24",536870919]],["^15",[350,"^M",true,536870919]],["^15",[350,"^Q","~`internal`\nid:: 6527a3c5-ec59-481e-93b6-3907eb48ef29\ncollapsed:: true",536870919]],["^15",[350,"^O","^16",536870919]],["^15",[350,"^F",67,536870919]],["^15",[350,"^X",27,536870919]],["^15",[350,"^V",232,536870919]],["^15",[350,"^U",27,536870919]],["^15",[350,"^?",["^ ","^1:","6527a3c5-ec59-481e-93b6-3907eb48ef29"],536870927]],["^15",[350,"^J",["^1:"],536870927]],["^15",[350,"^4",["^ ","^1:","6527a3c5-ec59-481e-93b6-3907eb48ef29"],536870927]],["^15",[350,"^;","~u6527a3c5-ec59-481e-93b6-3907eb48ef29",536870919]],["^15",[351,"^Q","~`dotnet** add package Newtonsoft.Json`",536870919]],["^15",[351,"^O","^16",536870919]],["^15",[351,"^F",64,536870919]],["^15",[351,"^X",27,536870919]],["^15",[351,"^V",64,536870919]],["^15",[351,"^U",27,536870919]],["^15",[351,"^;","~u65410d7a-310f-498f-b469-dc8dbc87df20",536870919]],["^15",[352,"^Q","~```C#\nint.Parse(var) //type.Parse(var)\n```",536870919]],["^15",[352,"^O","^16",536870919]],["^15",[352,"^F",195,536870919]],["^15",[352,"^X",27,536870919]],["^15",[352,"^V",195,536870919]],["^15",[352,"^U",27,536870919]],["^15",[352,"^;","~u65410d7a-f173-41df-870d-589431863ade",536870919]],["^15",[353,"^Q","~```C#\npublic int x {get; private set;} \n//permette di mettere il get pubblico e il set privato\n```",536870919]],["^15",[353,"^O","^16",536870919]],["^15",[353,"^F",57,536870919]],["^15",[353,"^X",27,536870919]],["^15",[353,"^V",339,536870919]],["^15",[353,"^U",27,536870919]],["^15",[353,"^;","~u65410d7a-6644-4dfb-a82b-5e94f232d8f5",536870919]],["^15",[354,"^M",true,536870919]],["^15",[354,"^Q","nel metodo `Serialize` al posto di Console.Out è possibile mettere qualiasi metodo di scrittura come uno StreamWriter\ncollapsed:: true",536870919]],["^15",[354,"^O","^16",536870919]],["^15",[354,"^F",45,536870919]],["^15",[354,"^X",27,536870919]],["^15",[354,"^V",127,536870919]],["^15",[354,"^U",27,536870919]],["^15",[354,"^?",["^ "],536870927]],["^15",[354,"^J",[],536870927]],["^15",[354,"^4",["^ "],536870927]],["^15",[354,"^;","~u65410d7a-78dc-4760-845e-852da7c5f3c2",536870919]],["^15",[355,"^M",true,536870919]],["^15",[355,"^Q","*scrittura su un file*\ncollapsed:: true",536870919]],["^15",[355,"^O","^16",536870919]],["^15",[355,"^F",168,536870919]],["^15",[355,"^X",27,536870919]],["^15",[355,"^V",256,536870919]],["^15",[355,"^U",27,536870919]],["^15",[355,"^?",["^ "],536870927]],["^15",[355,"^J",[],536870927]],["^15",[355,"^4",["^ "],536870927]],["^15",[355,"^;","~u65410d7a-cacd-4e2b-92fd-241ab3ee4489",536870919]],["^15",[356,"^Q","è possibile sentir chiamare classe Madre e FIglia: Super Class e Base Class",536870919]],["^15",[356,"^O","^16",536870919]],["^15",[356,"^F",191,536870919]],["^15",[356,"^X",27,536870919]],["^15",[356,"^V",191,536870919]],["^15",[356,"^U",27,536870919]],["^15",[356,"^;","~u65410d7a-b7d8-4f6f-a5f7-7ffb37211314",536870919]],["^15",[357,"^M",true,536870919]],["^15",[357,"^Q","con il metodo `ReadAllLines` è possibile leggere l'intero file fino al terminatore `EOF` e assegnare ogni riga ad una posizione di un array di stringhe\ncollapsed:: true",536870919]],["^15",[357,"^O","^16",536870919]],["^15",[357,"^F",237,536870919]],["^15",[357,"^X",27,536870919]],["^15",[357,"^V",157,536870919]],["^15",[357,"^U",27,536870919]],["^15",[357,"^?",["^ "],536870927]],["^15",[357,"^J",[],536870927]],["^15",[357,"^4",["^ "],536870927]],["^15",[357,"^;","~u65410d7a-1a27-4c40-a81e-2c88b71f5997",536870919]],["^15",[358,"^M",true,536870919]],["^15",[358,"^Q","**while**\ncollapsed:: true",536870919]],["^15",[358,"^O","^16",536870919]],["^15",[358,"^F",65,536870919]],["^15",[358,"^X",27,536870919]],["^15",[358,"^V",65,536870919]],["^15",[358,"^U",27,536870919]],["^15",[358,"^?",["^ "],536870927]],["^15",[358,"^J",[],536870927]],["^15",[358,"^4",["^ "],536870927]],["^15",[358,"^;","~u65410d7a-96f3-4306-95db-e6254980797c",536870919]],["^15",[359,"^Q","tabulazione verticale",536870919]],["^15",[359,"^O","^16",536870919]],["^15",[359,"^F",84,536870919]],["^15",[359,"^X",27,536870919]],["^15",[359,"^V",84,536870919]],["^15",[359,"^U",27,536870919]],["^15",[359,"^;","~u65410d7a-6978-48e5-81f8-fa67b039c0aa",536870919]],["^15",[360,"^M",true,536870919]],["^15",[360,"^Q","*variabili*\ncollapsed:: true",536870919]],["^15",[360,"^O","^16",536870919]],["^15",[360,"^F",232,536870919]],["^15",[360,"^X",27,536870919]],["^15",[360,"^V",197,536870919]],["^15",[360,"^U",27,536870919]],["^15",[360,"^?",["^ "],536870927]],["^15",[360,"^J",[],536870927]],["^15",[360,"^4",["^ "],536870927]],["^15",[360,"^;","~u65410d7a-b7c9-4ef8-8774-52e8d94a1d0c",536870919]],["^15",[361,"^Q","~```C#\ninput => expression;\n```",536870919]],["^15",[361,"^O","^16",536870919]],["^15",[361,"^F",217,536870919]],["^15",[361,"^X",27,536870919]],["^15",[361,"^V",217,536870919]],["^15",[361,"^U",27,536870919]],["^15",[361,"^;","~u65410d7a-9773-4348-9ddb-c6919b9351aa",536870919]],["^15",[362,"^Q","dice che un attributo deve essere presente in un range di caratteri",536870919]],["^15",[362,"^O","^16",536870919]],["^15",[362,"^F",245,536870919]],["^15",[362,"^X",27,536870919]],["^15",[362,"^V",245,536870919]],["^15",[362,"^U",27,536870919]],["^15",[362,"^;","~u65410d7a-8845-4089-b97e-f4b599d27487",536870919]],["^15",[363,"^Q","in C# un interfaccia non può contenere attributi",536870919]],["^15",[363,"^O","^16",536870919]],["^15",[363,"^F",176,536870919]],["^15",[363,"^X",27,536870919]],["^15",[363,"^V",105,536870919]],["^15",[363,"^U",27,536870919]],["^15",[363,"^;","~u65410d7a-1ca0-497a-b066-7af99b878ca9",536870919]],["^15",[364,"^M",true,536870919]],["^15",[364,"^Q","l'istruzione `using` garantisce l'uso corretto di un istanza IDisposable quindi di un istanza che gestisce delle risorse\ncollapsed:: true",536870919]],["^15",[364,"^O","^16",536870919]],["^15",[364,"^F",128,536870919]],["^15",[364,"^X",27,536870919]],["^15",[364,"^V",128,536870919]],["^15",[364,"^U",27,536870919]],["^15",[364,"^?",["^ "],536870927]],["^15",[364,"^J",[],536870927]],["^15",[364,"^4",["^ "],536870927]],["^15",[364,"^;","~u65410d7a-99b5-44db-8ebe-ea3411967ae4",536870919]],["^15",[365,"^Q","FindAll ritorna una lista di elementi che corrispondono alla condizione",536870919]],["^15",[365,"^O","^16",536870919]],["^15",[365,"^F",152,536870919]],["^15",[365,"^X",27,536870919]],["^15",[365,"^V",152,536870919]],["^15",[365,"^U",27,536870919]],["^15",[365,"^;","~u65410d7a-e292-4575-a52a-cf0d1e9df361",536870919]],["^15",[366,"^M",true,536870919]],["^15",[366,"^Q","~`Required`\ncollapsed:: true",536870919]],["^15",[366,"^O","^16",536870919]],["^15",[366,"^F",292,536870919]],["^15",[366,"^X",27,536870919]],["^15",[366,"^V",292,536870919]],["^15",[366,"^U",27,536870919]],["^15",[366,"^?",["^ "],536870927]],["^15",[366,"^J",[],536870927]],["^15",[366,"^4",["^ "],536870927]],["^15",[366,"^;","~u65410d7a-416f-4849-a56d-c241b3f5849b",536870919]],["^15",[367,"^Q","una classe abstract in C# deve esser definita come sottoclasse",536870919]],["^15",[367,"^O","^16",536870919]],["^15",[367,"^F",111,536870919]],["^15",[367,"^X",27,536870919]],["^15",[367,"^V",144,536870919]],["^15",[367,"^U",27,536870919]],["^15",[367,"^;","~u65410d7a-8178-4c12-b82d-7d323ffc9fa2",536870919]],["^15",[368,"^Q","~```C#\nstring fData = sr.ReadToEnd();\n```",536870919]],["^15",[368,"^O","^16",536870919]],["^15",[368,"^F",310,536870919]],["^15",[368,"^X",27,536870919]],["^15",[368,"^V",310,536870919]],["^15",[368,"^U",27,536870919]],["^15",[368,"^;","~u65410d7a-b3b3-4d07-95d4-0b04548f5a97",536870919]],["^15",[369,"^Q","~```C#\ninternal bool VerifyPassword(string enteredPassword, \n                             KeyValuePair<string, string> hashedSalt)\n{\n        byte[] salt = Convert.FromBase64String(hashedSalt.Key);\n        byte[] hash = Convert.FromBase64String(hashedSalt.Value);\n\n        byte[] newHash = KeyDerivation.Pbkdf2(\n            password: enteredPassword,\n            salt: salt,\n            prf: KeyDerivationPrf.HMACSHA256,\n            iterationCount: 10000,\n            numBytesRequested: hash.lenght\n        );\n\n        return newHash.SequenceEqual(hash);\n    }\n}\n```",536870919]],["^15",[369,"^O","^16",536870919]],["^15",[369,"^F",112,536870919]],["^15",[369,"^X",27,536870919]],["^15",[369,"^V",324,536870919]],["^15",[369,"^U",27,536870919]],["^15",[369,"^;","~u65410d7a-170f-40c1-9098-df11fc0d0af4",536870919]],["^15",[370,"^M",true,536870919]],["^15",[370,"^Q","imposta la posizione del cursore in una certa posizione nella console\ncollapsed:: true",536870919]],["^15",[370,"^O","^16",536870919]],["^15",[370,"^F",185,536870919]],["^15",[370,"^X",27,536870919]],["^15",[370,"^V",185,536870919]],["^15",[370,"^U",27,536870919]],["^15",[370,"^?",["^ "],536870927]],["^15",[370,"^J",[],536870927]],["^15",[370,"^4",["^ "],536870927]],["^15",[370,"^;","~u65410d7a-fa37-48de-8160-5f0c1f66c13f",536870919]],["^15",[371,"^3","## .NET core\n\t- **creazione**\n\t\t- *web app*\n\t\t- *console app*\n\t\t- *desktop app*\n\t\t- *mobile app*\n\t\t- *videogame*\n- ## .NET 7.0 **vs** framework .NET 4.8\n\t- **dotnet 7.0**\n\t\t- *retrocompatibile*\n\t\t- *coesistenza*\n\t\t\t- più versioni disponibili sulla stessa macchina\n\t\t- *multiplatform*\n\t\t- *web app*\n\t\t- *hosting evoluto*\n\t- **framework .NET 4.8**\n\t\t- *orientato più su windows*\n- ## IDE / text-editor\n\t- **visual studio code**\n\t- **microsoft visual studio community**\n\t\t- *debugging avanzato*\n\t\t- *visualizzatore tabelle database*\n\t\t- *virtualizzione dispositivi mobile*\n- ## Runtime\n\t- ***C* *L* *R* **\n\t\t- **common language runtime**\n\t\t\t- permette l'esecuzione di app .NET\n\t\t\t- codice eseguibile sulla tua macchina\n\t- ***J* *I* *T* **\n\t\t- **just in time**\n\t\t\t- *compiler*\n\t\t\t\t- compila in CIL code",536870919]],["^15",[371,"^17",1698762106949,536870919]],["^15",[371,"^Z","pages/TEORIA.md",536870919]],["^15",[372,"^Q","*coesistenza*",536870919]],["^15",[372,"^O","^16",536870919]],["^15",[372,"^F",402,536870919]],["^15",[372,"^X",26,536870919]],["^15",[372,"^V",400,536870919]],["^15",[372,"^U",26,536870919]],["^15",[372,"^;","~u65410d7a-c882-4944-a5af-1b16c4f34f60",536870919]],["^15",[373,"^Q","*desktop app*",536870919]],["^15",[373,"^O","^16",536870919]],["^15",[373,"^F",384,536870919]],["^15",[373,"^X",26,536870919]],["^15",[373,"^V",382,536870919]],["^15",[373,"^U",26,536870919]],["^15",[373,"^;","~u65410d7a-4640-4f3d-ad5f-8b7e7e090522",536870919]],["^15",[374,"^Q","**framework .NET 4.8**",536870919]],["^15",[374,"^O","^16",536870919]],["^15",[374,"^F",400,536870919]],["^15",[374,"^X",26,536870919]],["^15",[374,"^V",385,536870919]],["^15",[374,"^U",26,536870919]],["^15",[374,"^;","~u65410d7a-d67a-4f86-9bfd-23820d5b1ac8",536870919]],["^15",[375,"^Q","codice eseguibile sulla tua macchina",536870919]],["^15",[375,"^O","^16",536870919]],["^15",[375,"^F",401,536870919]],["^15",[375,"^X",26,536870919]],["^15",[375,"^V",377,536870919]],["^15",[375,"^U",26,536870919]],["^15",[375,"^;","~u65410d7a-6186-44b7-855e-43bb3b153f3c",536870919]],["^15",[376,"^Q","*debugging avanzato*",536870919]],["^15",[376,"^O","^16",536870919]],["^15",[376,"^F",396,536870919]],["^15",[376,"^X",26,536870919]],["^15",[376,"^V",396,536870919]],["^15",[376,"^U",26,536870919]],["^15",[376,"^;","~u65410d7a-91b5-4e32-af12-0a3cd910a144",536870919]],["^15",[377,"^Q","**common language runtime**",536870919]],["^15",[377,"^O","^16",536870919]],["^15",[377,"^F",392,536870919]],["^15",[377,"^X",26,536870919]],["^15",[377,"^V",392,536870919]],["^15",[377,"^U",26,536870919]],["^15",[377,"^;","~u65410d7a-72c7-440d-9b1f-4f0f41b404e3",536870919]],["^15",[378,"^Q","più versioni disponibili sulla stessa macchina",536870919]],["^15",[378,"^O","^16",536870919]],["^15",[378,"^F",372,536870919]],["^15",[378,"^X",26,536870919]],["^15",[378,"^V",372,536870919]],["^15",[378,"^U",26,536870919]],["^15",[378,"^;","~u65410d7a-6763-40e3-9187-c05ee633523d",536870919]],["^15",[379,"^Q","*hosting evoluto*",536870919]],["^15",[379,"^O","^16",536870919]],["^15",[379,"^F",403,536870919]],["^15",[379,"^X",26,536870919]],["^15",[379,"^V",400,536870919]],["^15",[379,"^U",26,536870919]],["^15",[379,"^;","~u65410d7a-31d2-4af9-92da-c680fc71f077",536870919]],["^15",[380,"^Q","*web app*",536870919]],["^15",[380,"^O","^16",536870919]],["^15",[380,"^F",382,536870919]],["^15",[380,"^X",26,536870919]],["^15",[380,"^V",382,536870919]],["^15",[380,"^U",26,536870919]],["^15",[380,"^;","~u65410d7a-993f-4fcb-8f25-3e32a2d9c0eb",536870919]],["^15",[381,"^Q","## IDE / text-editor",536870919]],["^15",[381,"^O","^16",536870919]],["^15",[381,"^F",385,536870919]],["^15",[381,"^X",26,536870919]],["^15",[381,"^V",26,536870919]],["^15",[381,"^U",26,536870919]],["^15",[381,"^?",["^ ","^1;",2],536870919]],["^15",[381,"^J",[],536870919]],["^15",[381,"^;","~u65410d7a-04b1-431d-82be-c5b531b76867",536870919]],["^15",[382,"^Q","**creazione**",536870919]],["^15",[382,"^O","^16",536870919]],["^15",[382,"^F",391,536870919]],["^15",[382,"^X",26,536870919]],["^15",[382,"^V",391,536870919]],["^15",[382,"^U",26,536870919]],["^15",[382,"^;","~u65410d7a-28ee-4f10-9b02-5dd170990d6b",536870919]],["^15",[383,"^Q","*mobile app*",536870919]],["^15",[383,"^O","^16",536870919]],["^15",[383,"^F",373,536870919]],["^15",[383,"^X",26,536870919]],["^15",[383,"^V",382,536870919]],["^15",[383,"^U",26,536870919]],["^15",[383,"^;","~u65410d7a-78a6-445e-b093-d71a3d4bd9a0",536870919]],["^15",[384,"^Q","*console app*",536870919]],["^15",[384,"^O","^16",536870919]],["^15",[384,"^F",380,536870919]],["^15",[384,"^X",26,536870919]],["^15",[384,"^V",382,536870919]],["^15",[384,"^U",26,536870919]],["^15",[384,"^;","~u65410d7a-e06c-431c-b650-f9feec145541",536870919]],["^15",[385,"^Q","## .NET 7.0 **vs** framework .NET 4.8",536870919]],["^15",[385,"^O","^16",536870919]],["^15",[385,"^F",391,536870919]],["^15",[385,"^X",26,536870919]],["^15",[385,"^V",26,536870919]],["^15",[385,"^U",26,536870919]],["^15",[385,"^?",["^ ","^1;",2],536870919]],["^15",[385,"^J",[],536870919]],["^15",[385,"^;","~u65410d7a-85b9-4b66-aef9-aad07d9239d2",536870919]],["^15",[386,"^Q","*orientato più su windows*",536870919]],["^15",[386,"^O","^16",536870919]],["^15",[386,"^F",374,536870919]],["^15",[386,"^X",26,536870919]],["^15",[386,"^V",374,536870919]],["^15",[386,"^U",26,536870919]],["^15",[386,"^;","~u65410d7a-1ffb-464e-af5c-db437de6cd6c",536870919]],["^15",[387,"^Q","*visualizzatore tabelle database*",536870919]],["^15",[387,"^O","^16",536870919]],["^15",[387,"^F",376,536870919]],["^15",[387,"^X",26,536870919]],["^15",[387,"^V",396,536870919]],["^15",[387,"^U",26,536870919]],["^15",[387,"^;","~u65410d7a-aa86-47d7-aab1-4106c040e2f2",536870919]],["^15",[388,"^Q","***J* *I* *T* **",536870919]],["^15",[388,"^O","^16",536870919]],["^15",[388,"^F",392,536870919]],["^15",[388,"^X",26,536870919]],["^15",[388,"^V",398,536870919]],["^15",[388,"^U",26,536870919]],["^15",[388,"^;","~u65410d7a-49fe-4420-9876-06595f00a9b2",536870919]],["^15",[389,"^Q","**just in time**",536870919]],["^15",[389,"^O","^16",536870919]],["^15",[389,"^F",388,536870919]],["^15",[389,"^X",26,536870919]],["^15",[389,"^V",388,536870919]],["^15",[389,"^U",26,536870919]],["^15",[389,"^;","~u65410d7a-5ce4-42b3-943f-eb0eb9a463d1",536870919]],["^15",[390,"^Q","*compiler*",536870919]],["^15",[390,"^O","^16",536870919]],["^15",[390,"^F",389,536870919]],["^15",[390,"^X",26,536870919]],["^15",[390,"^V",389,536870919]],["^15",[390,"^U",26,536870919]],["^15",[390,"^;","~u65410d7a-8325-43e2-8cbd-30a494c5dea4",536870919]],["^15",[391,"^Q","## .NET core",536870919]],["^15",[391,"^O","^16",536870919]],["^15",[391,"^F",26,536870919]],["^15",[391,"^X",26,536870919]],["^15",[391,"^V",26,536870919]],["^15",[391,"^U",26,536870919]],["^15",[391,"^?",["^ ","^1;",2],536870919]],["^15",[391,"^J",[],536870919]],["^15",[391,"^;","~u65410d7a-878c-409f-af1c-a2c1480562b7",536870919]],["^15",[392,"^Q","***C* *L* *R* **",536870919]],["^15",[392,"^O","^16",536870919]],["^15",[392,"^F",398,536870919]],["^15",[392,"^X",26,536870919]],["^15",[392,"^V",398,536870919]],["^15",[392,"^U",26,536870919]],["^15",[392,"^;","~u65410d7a-5bbc-44cc-8620-624df602601a",536870919]],["^15",[393,"^Q","*videogame*",536870919]],["^15",[393,"^O","^16",536870919]],["^15",[393,"^F",383,536870919]],["^15",[393,"^X",26,536870919]],["^15",[393,"^V",382,536870919]],["^15",[393,"^U",26,536870919]],["^15",[393,"^;","~u65410d7a-b184-42fb-b15c-602c2e805602",536870919]],["^15",[394,"^Q","**visual studio code**",536870919]],["^15",[394,"^O","^16",536870919]],["^15",[394,"^F",381,536870919]],["^15",[394,"^X",26,536870919]],["^15",[394,"^V",381,536870919]],["^15",[394,"^U",26,536870919]],["^15",[394,"^;","~u65410d7a-d8e8-49d1-b912-80df0e21f5db",536870919]],["^15",[395,"^Q","*virtualizzione dispositivi mobile*",536870919]],["^15",[395,"^O","^16",536870919]],["^15",[395,"^F",387,536870919]],["^15",[395,"^X",26,536870919]],["^15",[395,"^V",396,536870919]],["^15",[395,"^U",26,536870919]],["^15",[395,"^;","~u65410d7a-d8c5-48d7-a555-6c52b59505f7",536870919]],["^15",[396,"^Q","**microsoft visual studio community**",536870919]],["^15",[396,"^O","^16",536870919]],["^15",[396,"^F",394,536870919]],["^15",[396,"^X",26,536870919]],["^15",[396,"^V",381,536870919]],["^15",[396,"^U",26,536870919]],["^15",[396,"^;","~u65410d7a-ddf6-4645-8d1f-a51113f82d34",536870919]],["^15",[397,"^Q","compila in CIL code",536870919]],["^15",[397,"^O","^16",536870919]],["^15",[397,"^F",390,536870919]],["^15",[397,"^X",26,536870919]],["^15",[397,"^V",390,536870919]],["^15",[397,"^U",26,536870919]],["^15",[397,"^;","~u65410d7a-8a59-4695-92b1-f41373a0d272",536870919]],["^15",[398,"^Q","## Runtime",536870919]],["^15",[398,"^O","^16",536870919]],["^15",[398,"^F",381,536870919]],["^15",[398,"^X",26,536870919]],["^15",[398,"^V",26,536870919]],["^15",[398,"^U",26,536870919]],["^15",[398,"^?",["^ ","^1;",2],536870919]],["^15",[398,"^J",[],536870919]],["^15",[398,"^;","~u65410d7a-266f-4b29-b247-915d0eb27738",536870919]],["^15",[399,"^Q","*multiplatform*",536870919]],["^15",[399,"^O","^16",536870919]],["^15",[399,"^F",372,536870919]],["^15",[399,"^X",26,536870919]],["^15",[399,"^V",400,536870919]],["^15",[399,"^U",26,536870919]],["^15",[399,"^;","~u65410d7a-2f1b-4b61-9e8b-a590f1c3620c",536870919]],["^15",[400,"^Q","**dotnet 7.0**",536870919]],["^15",[400,"^O","^16",536870919]],["^15",[400,"^F",385,536870919]],["^15",[400,"^X",26,536870919]],["^15",[400,"^V",385,536870919]],["^15",[400,"^U",26,536870919]],["^15",[400,"^;","~u65410d7a-3ca0-4e1e-b3c9-1facb72a829a",536870919]],["^15",[401,"^Q","permette l'esecuzione di app .NET",536870919]],["^15",[401,"^O","^16",536870919]],["^15",[401,"^F",377,536870919]],["^15",[401,"^X",26,536870919]],["^15",[401,"^V",377,536870919]],["^15",[401,"^U",26,536870919]],["^15",[401,"^;","~u65410d7a-af96-4850-98de-826851fc5dba",536870919]],["^15",[402,"^Q","*retrocompatibile*",536870919]],["^15",[402,"^O","^16",536870919]],["^15",[402,"^F",400,536870919]],["^15",[402,"^X",26,536870919]],["^15",[402,"^V",400,536870919]],["^15",[402,"^U",26,536870919]],["^15",[402,"^;","~u65410d7a-12e0-41d8-9f04-01a1f0ee400e",536870919]],["^15",[403,"^Q","*web app*",536870919]],["^15",[403,"^O","^16",536870919]],["^15",[403,"^F",399,536870919]],["^15",[403,"^X",26,536870919]],["^15",[403,"^V",400,536870919]],["^15",[403,"^U",26,536870919]],["^15",[403,"^;","~u65410d7a-77a3-4757-87d5-70207016591c",536870919]],["^15",[404,"^3","- #CSharp\n-",536870919]],["^15",[404,"^17",1698762106960,536870919]],["^15",[404,"^Z","pages/betacom academy.md",536870919]],["^15",[405,"^K",1698762106958,536870919]],["^15",[405,"^[",404,536870919]],["^15",[405,"^@",false,536870919]],["^15",[405,"^Y","betacom academy",536870919]],["^15",[405,"^11","betacom academy",536870919]],["^15",[405,"^B",1698762106958,536870919]],["^15",[405,"^;","~u65410d7a-cafc-4865-8123-5e8f82430177",536870919]],["^15",[406,"^Q","#CSharp",536870919]],["^15",[406,"^O","^16",536870919]],["^15",[406,"^F",405,536870919]],["^15",[406,"^X",405,536870919]],["^15",[406,"^V",405,536870919]],["^15",[406,"^U",25,536870919]],["^15",[406,"^U",405,536870919]],["^15",[406,"^H",25,536870919]],["^15",[406,"^;","~u65410d7a-b710-4e1a-8d5c-ff734e7e9f80",536870919]],["^15",[407,"^Q","",536870919]],["^15",[407,"^O","^16",536870919]],["^15",[407,"^F",406,536870919]],["^15",[407,"^X",405,536870919]],["^15",[407,"^V",405,536870919]],["^15",[407,"^U",405,536870919]],["^15",[407,"^;","~u65410d7a-0f01-49f6-a3aa-79341e5c6295",536870919]],["^15",[408,"^2",1,536870920]],["^15",[408,"^T","^2",536870920]],["^15",[409,"^12",2,536870922]],["^15",[410,"^K",1698925701625,536870923]],["^15",[410,"^O","^16",536870923]],["^15",[410,"^N",20231102,536870923]],["^15",[410,"^@",true,536870923]],["^15",[410,"^Y","nov 2nd, 2023",536870923]],["^15",[410,"^11","Nov 2nd, 2023",536870923]],["^15",[410,"^B",1698925701625,536870923]],["^15",[410,"^;","~u65438c85-1198-4ebe-a050-7de85151c4f5",536870923]],["^15",[411,"^Q","",536870924]],["^15",[411,"^O","^16",536870924]],["^15",[411,"^N",20231102,536870924]],["^15",[411,"^@",true,536870924]],["^15",[411,"^F",410,536870924]],["^15",[411,"^X",410,536870924]],["^15",[411,"^V",410,536870924]],["^15",[411,"^U",410,536870925]],["^15",[411,"^?",["^ "],536870924]],["^15",[411,"^;","~u65438c85-2558-463d-aed2-73e46bcd0190",536870924]],["^15",[412,"^Q","*JSON*",536870927]],["^15",[412,"^O","^16",536870927]],["^15",[412,"^F",79,536870927]],["^15",[412,"^X",27,536870927]],["^15",[412,"^V",79,536870927]],["^15",[412,"^U",27,536870927]],["^15",[412,"^;","~u65438c86-54a2-4c12-9d93-bae2dab1f9d5",536870927]],["^15",[413,"^Q","using(StreamWriter sw = new(\"Path/to/JSON\")\n{\n\tsw.WriteLine(json);\n}",536870927]],["^15",[413,"^O","^16",536870927]],["^15",[413,"^F",417,536870927]],["^15",[413,"^X",27,536870927]],["^15",[413,"^V",417,536870927]],["^15",[413,"^U",27,536870927]],["^15",[413,"^;","~u65438c86-3ea0-4ea9-8985-162c3118ffce",536870927]],["^15",[414,"^Q","serializzare una serie di oggetti da object a json",536870927]],["^15",[414,"^O","^16",536870927]],["^15",[414,"^F",327,536870927]],["^15",[414,"^X",27,536870927]],["^15",[414,"^V",327,536870927]],["^15",[414,"^U",27,536870927]],["^15",[414,"^;","~u65438c86-a887-4b7f-9471-d92e5410fa41",536870927]],["^15",[415,"^Q","~```C#\nobject json = JsonConvert.SerializeObject(obj, Formatting.Indented);\n```",536870927]],["^15",[415,"^O","^16",536870927]],["^15",[415,"^F",414,536870927]],["^15",[415,"^X",27,536870927]],["^15",[415,"^V",414,536870927]],["^15",[415,"^U",27,536870927]],["^15",[415,"^;","~u65438c86-af83-4798-abb4-2c196d5df57a",536870927]],["^15",[416,"^M",true,536870927]],["^15",[416,"^Q","~`Serialize`\ncollapsed:: true",536870927]],["^15",[416,"^O","^16",536870927]],["^15",[416,"^F",261,536870927]],["^15",[416,"^X",27,536870927]],["^15",[416,"^V",286,536870927]],["^15",[416,"^U",27,536870927]],["^15",[416,"^?",["^ "],536870927]],["^15",[416,"^J",[],536870927]],["^15",[416,"^4",["^ "],536870927]],["^15",[416,"^;","~u65438c86-7b27-440a-ad04-1ac85d6c12f2",536870927]],["^15",[417,"^Q","salvatagio dati json su file",536870927]],["^15",[417,"^O","^16",536870927]],["^15",[417,"^F",414,536870927]],["^15",[417,"^X",27,536870927]],["^15",[417,"^V",327,536870927]],["^15",[417,"^U",27,536870927]],["^15",[417,"^;","~u65438c86-5a28-45a8-aab9-3ecb6cfe7fe4",536870927]],["^15",[418,"^T","^R",536870929]],["^15",[418,"^R",["^14",["pratica","csharp","betacom academy"]],536870931]]]]]]